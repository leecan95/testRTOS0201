
testSys_RTOS3101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000768c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000299b4  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080311e0  080311e0  00050074  2**0
                  CONTENTS
  4 .ARM          00000008  080311e0  080311e0  000411e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080311e8  080311e8  00050074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080311e8  080311e8  000411e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080311ec  080311ec  000411ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080311f0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004358  20000074  08031264  00050074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043cc  08031264  000543cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e69  00000000  00000000  000500a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003186  00000000  00000000  00067f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001638  00000000  00000000  0006b098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  0006c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019232  00000000  00000000  0006dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001086c  00000000  00000000  00086de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009901c  00000000  00000000  0009764e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013066a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b0  00000000  00000000  001306e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007814 	.word	0x08007814

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007814 	.word	0x08007814

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2iz>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d215      	bcs.n	800063e <__aeabi_d2iz+0x36>
 8000612:	d511      	bpl.n	8000638 <__aeabi_d2iz+0x30>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d912      	bls.n	8000644 <__aeabi_d2iz+0x3c>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062e:	fa23 f002 	lsr.w	r0, r3, r2
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	4770      	bx	lr
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	4770      	bx	lr
 800063e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000642:	d105      	bne.n	8000650 <__aeabi_d2iz+0x48>
 8000644:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_Init+0x40>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_Init+0x40>)
 800096e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x40>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f8fa 	bl	8000b7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f005 fc58 	bl	800623c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f005 fa44 	bl	8005e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20004084 	.word	0x20004084

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20004084 	.word	0x20004084

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_Delay+0x40>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000

08000a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	60d3      	str	r3, [r2, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <__NVIC_EnableIRQ+0x38>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff4c 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba2:	f7ff ff61 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000ba6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	6978      	ldr	r0, [r7, #20]
 8000bae:	f7ff ffb1 	bl	8000b14 <NVIC_EncodePriority>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff80 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff54 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d004      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2280      	movs	r2, #128	; 0x80
 8000bfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00c      	b.n	8000c1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2205      	movs	r2, #5
 8000c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0201 	bic.w	r2, r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e159      	b.n	8000ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 8148 	bne.w	8000ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x4a>
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b12      	cmp	r3, #18
 8000c70:	d123      	bne.n	8000cba <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	08da      	lsrs	r2, r3, #3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3208      	adds	r2, #8
 8000c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	220f      	movs	r2, #15
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	69b9      	ldr	r1, [r7, #24]
 8000cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0203 	and.w	r2, r3, #3
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d00b      	beq.n	8000d0e <HAL_GPIO_Init+0xe6>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d007      	beq.n	8000d0e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d02:	2b11      	cmp	r3, #17
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b12      	cmp	r3, #18
 8000d0c:	d130      	bne.n	8000d70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	f003 0201 	and.w	r2, r3, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80a2 	beq.w	8000ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b56      	ldr	r3, [pc, #344]	; (8000f0c <HAL_GPIO_Init+0x2e4>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a55      	ldr	r2, [pc, #340]	; (8000f0c <HAL_GPIO_Init+0x2e4>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <HAL_GPIO_Init+0x2e4>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a51      	ldr	r2, [pc, #324]	; (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_GPIO_Init+0x2ec>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x202>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_GPIO_Init+0x2f0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1fe>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <HAL_GPIO_Init+0x2f4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1fa>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1f2>
 8000e16:	2304      	movs	r3, #4
 8000e18:	e008      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e004      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	f002 0203 	and.w	r2, r2, #3
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	4093      	lsls	r3, r2
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e3c:	4934      	ldr	r1, [pc, #208]	; (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e6e:	4a2e      	ldr	r2, [pc, #184]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e74:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e98:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eec:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	f67f aea2 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f00:	bf00      	nop
 8000f02:	3724      	adds	r7, #36	; 0x24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40013800 	.word	0x40013800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	40020c00 	.word	0x40020c00
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40013c00 	.word	0x40013c00

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f48:	e003      	b.n	8000f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	041a      	lsls	r2, r3, #16
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	619a      	str	r2, [r3, #24]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e10f      	b.n	8001192 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d106      	bne.n	8000f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f004 ff72 	bl	8005e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fa4:	f000 fce6 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8000fa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4a7b      	ldr	r2, [pc, #492]	; (800119c <HAL_I2C_Init+0x23c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d807      	bhi.n	8000fc4 <HAL_I2C_Init+0x64>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4a7a      	ldr	r2, [pc, #488]	; (80011a0 <HAL_I2C_Init+0x240>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	bf94      	ite	ls
 8000fbc:	2301      	movls	r3, #1
 8000fbe:	2300      	movhi	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	e006      	b.n	8000fd2 <HAL_I2C_Init+0x72>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4a77      	ldr	r2, [pc, #476]	; (80011a4 <HAL_I2C_Init+0x244>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	bf94      	ite	ls
 8000fcc:	2301      	movls	r3, #1
 8000fce:	2300      	movhi	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0db      	b.n	8001192 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4a72      	ldr	r2, [pc, #456]	; (80011a8 <HAL_I2C_Init+0x248>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	0c9b      	lsrs	r3, r3, #18
 8000fe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4a64      	ldr	r2, [pc, #400]	; (800119c <HAL_I2C_Init+0x23c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d802      	bhi.n	8001014 <HAL_I2C_Init+0xb4>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3301      	adds	r3, #1
 8001012:	e009      	b.n	8001028 <HAL_I2C_Init+0xc8>
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4a63      	ldr	r2, [pc, #396]	; (80011ac <HAL_I2C_Init+0x24c>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	099b      	lsrs	r3, r3, #6
 8001026:	3301      	adds	r3, #1
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	430b      	orrs	r3, r1
 800102e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800103a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4956      	ldr	r1, [pc, #344]	; (800119c <HAL_I2C_Init+0x23c>)
 8001044:	428b      	cmp	r3, r1
 8001046:	d80d      	bhi.n	8001064 <HAL_I2C_Init+0x104>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1e59      	subs	r1, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fbb1 f3f3 	udiv	r3, r1, r3
 8001056:	3301      	adds	r3, #1
 8001058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105c:	2b04      	cmp	r3, #4
 800105e:	bf38      	it	cc
 8001060:	2304      	movcc	r3, #4
 8001062:	e04f      	b.n	8001104 <HAL_I2C_Init+0x1a4>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d111      	bne.n	8001090 <HAL_I2C_Init+0x130>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1e58      	subs	r0, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	440b      	add	r3, r1
 800107a:	fbb0 f3f3 	udiv	r3, r0, r3
 800107e:	3301      	adds	r3, #1
 8001080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf0c      	ite	eq
 8001088:	2301      	moveq	r3, #1
 800108a:	2300      	movne	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	e012      	b.n	80010b6 <HAL_I2C_Init+0x156>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	1e58      	subs	r0, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6859      	ldr	r1, [r3, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	0099      	lsls	r1, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010a6:	3301      	adds	r3, #1
 80010a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_I2C_Init+0x15e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e022      	b.n	8001104 <HAL_I2C_Init+0x1a4>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10e      	bne.n	80010e4 <HAL_I2C_Init+0x184>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1e58      	subs	r0, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6859      	ldr	r1, [r3, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	440b      	add	r3, r1
 80010d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d8:	3301      	adds	r3, #1
 80010da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e2:	e00f      	b.n	8001104 <HAL_I2C_Init+0x1a4>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	1e58      	subs	r0, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6859      	ldr	r1, [r3, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	0099      	lsls	r1, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010fa:	3301      	adds	r3, #1
 80010fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	6809      	ldr	r1, [r1, #0]
 8001108:	4313      	orrs	r3, r2
 800110a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69da      	ldr	r2, [r3, #28]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6911      	ldr	r1, [r2, #16]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68d2      	ldr	r2, [r2, #12]
 800113e:	4311      	orrs	r1, r2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	430b      	orrs	r3, r1
 8001146:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2220      	movs	r2, #32
 800117e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	000186a0 	.word	0x000186a0
 80011a0:	001e847f 	.word	0x001e847f
 80011a4:	003d08ff 	.word	0x003d08ff
 80011a8:	431bde83 	.word	0x431bde83
 80011ac:	10624dd3 	.word	0x10624dd3

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e22d      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d075      	beq.n	80012ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ce:	4ba3      	ldr	r3, [pc, #652]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d00c      	beq.n	80011f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011da:	4ba0      	ldr	r3, [pc, #640]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d112      	bne.n	800120c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e6:	4b9d      	ldr	r3, [pc, #628]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011f2:	d10b      	bne.n	800120c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	4b99      	ldr	r3, [pc, #612]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d05b      	beq.n	80012b8 <HAL_RCC_OscConfig+0x108>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d157      	bne.n	80012b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e208      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d106      	bne.n	8001224 <HAL_RCC_OscConfig+0x74>
 8001216:	4b91      	ldr	r3, [pc, #580]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a90      	ldr	r2, [pc, #576]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x98>
 800122e:	4b8b      	ldr	r3, [pc, #556]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b88      	ldr	r3, [pc, #544]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a87      	ldr	r2, [pc, #540]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001248:	4b84      	ldr	r3, [pc, #528]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a83      	ldr	r2, [pc, #524]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a80      	ldr	r2, [pc, #512]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fbac 	bl	80009c4 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fba8 	bl	80009c4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1cd      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b76      	ldr	r3, [pc, #472]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xc0>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fb98 	bl	80009c4 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fb94 	bl	80009c4 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1b9      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	4b6c      	ldr	r3, [pc, #432]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0xe8>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d063      	beq.n	800138e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c6:	4b65      	ldr	r3, [pc, #404]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d2:	4b62      	ldr	r3, [pc, #392]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d11c      	bne.n	8001318 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x152>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e18d      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	4b56      	ldr	r3, [pc, #344]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4952      	ldr	r1, [pc, #328]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	e03a      	b.n	800138e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d020      	beq.n	8001362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001320:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <HAL_RCC_OscConfig+0x2b0>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff fb4d 	bl	80009c4 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fb49 	bl	80009c4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e16e      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4940      	ldr	r1, [pc, #256]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001362:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <HAL_RCC_OscConfig+0x2b0>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fb2c 	bl	80009c4 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fb28 	bl	80009c4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e14d      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d030      	beq.n	80013fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d016      	beq.n	80013d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_RCC_OscConfig+0x2b4>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff fb0c 	bl	80009c4 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fb08 	bl	80009c4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e12d      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x200>
 80013ce:	e015      	b.n	80013fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x2b4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff faf5 	bl	80009c4 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff faf1 	bl	80009c4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e116      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a0 	beq.w	800154a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001436:	2301      	movs	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x2b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d121      	bne.n	800148a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_RCC_OscConfig+0x2b8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_RCC_OscConfig+0x2b8>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001452:	f7ff fab7 	bl	80009c4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	e011      	b.n	800147e <HAL_RCC_OscConfig+0x2ce>
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	42470000 	.word	0x42470000
 8001464:	42470e80 	.word	0x42470e80
 8001468:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146c:	f7ff faaa 	bl	80009c4 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0cf      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147e:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_RCC_OscConfig+0x478>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
 8001492:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a65      	ldr	r2, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	e01c      	b.n	80014da <HAL_RCC_OscConfig+0x32a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d10c      	bne.n	80014c2 <HAL_RCC_OscConfig+0x312>
 80014a8:	4b60      	ldr	r3, [pc, #384]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	4a5f      	ldr	r2, [pc, #380]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6713      	str	r3, [r2, #112]	; 0x70
 80014b4:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a5c      	ldr	r2, [pc, #368]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	e00b      	b.n	80014da <HAL_RCC_OscConfig+0x32a>
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a59      	ldr	r2, [pc, #356]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a56      	ldr	r2, [pc, #344]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d015      	beq.n	800150e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e2:	f7ff fa6f 	bl	80009c4 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	e00a      	b.n	8001500 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ea:	f7ff fa6b 	bl	80009c4 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e08e      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001500:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ee      	beq.n	80014ea <HAL_RCC_OscConfig+0x33a>
 800150c:	e014      	b.n	8001538 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fa59 	bl	80009c4 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fa55 	bl	80009c4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e078      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	4b3f      	ldr	r3, [pc, #252]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1ee      	bne.n	8001516 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d105      	bne.n	800154a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a3a      	ldr	r2, [pc, #232]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 8001544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d064      	beq.n	800161c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b08      	cmp	r3, #8
 800155c:	d05c      	beq.n	8001618 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d141      	bne.n	80015ea <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b32      	ldr	r3, [pc, #200]	; (8001630 <HAL_RCC_OscConfig+0x480>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa2a 	bl	80009c4 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fa26 	bl	80009c4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e04b      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69da      	ldr	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	3b01      	subs	r3, #1
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	491d      	ldr	r1, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_RCC_OscConfig+0x480>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff f9ff 	bl	80009c4 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff f9fb 	bl	80009c4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e020      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x41a>
 80015e8:	e018      	b.n	800161c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_RCC_OscConfig+0x480>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff f9e8 	bl	80009c4 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff f9e4 	bl	80009c4 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e009      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_RCC_OscConfig+0x47c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x448>
 8001616:	e001      	b.n	800161c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40007000 	.word	0x40007000
 800162c:	40023800 	.word	0x40023800
 8001630:	42470060 	.word	0x42470060

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0ca      	b.n	80017de <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_ClockConfig+0x1b4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d90c      	bls.n	8001670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0b6      	b.n	80017de <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001688:	4b58      	ldr	r3, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a57      	ldr	r2, [pc, #348]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a0:	4b52      	ldr	r3, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a51      	ldr	r2, [pc, #324]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80016a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494c      	ldr	r1, [pc, #304]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d044      	beq.n	8001754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b46      	ldr	r3, [pc, #280]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d119      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07d      	b.n	80017de <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06d      	b.n	80017de <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e065      	b.n	80017de <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4933      	ldr	r1, [pc, #204]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001724:	f7ff f94e 	bl	80009c4 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff f94a 	bl	80009c4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e04d      	b.n	80017de <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d20c      	bcs.n	800177c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_RCC_ClockConfig+0x1b4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e030      	b.n	80017de <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4915      	ldr	r1, [pc, #84]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490d      	ldr	r1, [pc, #52]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ba:	f000 f81d 	bl	80017f8 <HAL_RCC_GetSysClockFreq>
 80017be:	4601      	mov	r1, r0
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	fa21 f303 	lsr.w	r3, r1, r3
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f004 fd30 	bl	800623c <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	0802d100 	.word	0x0802d100
 80017f4:	2000000c 	.word	0x2000000c

080017f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_GetSysClockFreq+0x158>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b04      	cmp	r3, #4
 8001818:	d007      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0x32>
 800181a:	2b08      	cmp	r3, #8
 800181c:	d008      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x38>
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 808d 	bne.w	800193e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001826:	60bb      	str	r3, [r7, #8]
       break;
 8001828:	e08c      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182a:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <HAL_RCC_GetSysClockFreq+0x160>)
 800182c:	60bb      	str	r3, [r7, #8]
      break;
 800182e:	e089      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001830:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_GetSysClockFreq+0x158>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001838:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <HAL_RCC_GetSysClockFreq+0x158>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d023      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <HAL_RCC_GetSysClockFreq+0x158>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	099b      	lsrs	r3, r3, #6
 800184c:	f04f 0400 	mov.w	r4, #0
 8001850:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	ea03 0501 	and.w	r5, r3, r1
 800185c:	ea04 0602 	and.w	r6, r4, r2
 8001860:	4a3d      	ldr	r2, [pc, #244]	; (8001958 <HAL_RCC_GetSysClockFreq+0x160>)
 8001862:	fb02 f106 	mul.w	r1, r2, r6
 8001866:	2200      	movs	r2, #0
 8001868:	fb02 f205 	mul.w	r2, r2, r5
 800186c:	440a      	add	r2, r1
 800186e:	493a      	ldr	r1, [pc, #232]	; (8001958 <HAL_RCC_GetSysClockFreq+0x160>)
 8001870:	fba5 0101 	umull	r0, r1, r5, r1
 8001874:	1853      	adds	r3, r2, r1
 8001876:	4619      	mov	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f04f 0400 	mov.w	r4, #0
 800187e:	461a      	mov	r2, r3
 8001880:	4623      	mov	r3, r4
 8001882:	f7fe fee9 	bl	8000658 <__aeabi_uldivmod>
 8001886:	4603      	mov	r3, r0
 8001888:	460c      	mov	r4, r1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e049      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <HAL_RCC_GetSysClockFreq+0x158>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	f04f 0400 	mov.w	r4, #0
 8001898:	f240 11ff 	movw	r1, #511	; 0x1ff
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	ea03 0501 	and.w	r5, r3, r1
 80018a4:	ea04 0602 	and.w	r6, r4, r2
 80018a8:	4629      	mov	r1, r5
 80018aa:	4632      	mov	r2, r6
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f04f 0400 	mov.w	r4, #0
 80018b4:	0154      	lsls	r4, r2, #5
 80018b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ba:	014b      	lsls	r3, r1, #5
 80018bc:	4619      	mov	r1, r3
 80018be:	4622      	mov	r2, r4
 80018c0:	1b49      	subs	r1, r1, r5
 80018c2:	eb62 0206 	sbc.w	r2, r2, r6
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f04f 0400 	mov.w	r4, #0
 80018ce:	0194      	lsls	r4, r2, #6
 80018d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018d4:	018b      	lsls	r3, r1, #6
 80018d6:	1a5b      	subs	r3, r3, r1
 80018d8:	eb64 0402 	sbc.w	r4, r4, r2
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	00e2      	lsls	r2, r4, #3
 80018e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ea:	00d9      	lsls	r1, r3, #3
 80018ec:	460b      	mov	r3, r1
 80018ee:	4614      	mov	r4, r2
 80018f0:	195b      	adds	r3, r3, r5
 80018f2:	eb44 0406 	adc.w	r4, r4, r6
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	02a2      	lsls	r2, r4, #10
 8001900:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001904:	0299      	lsls	r1, r3, #10
 8001906:	460b      	mov	r3, r1
 8001908:	4614      	mov	r4, r2
 800190a:	4618      	mov	r0, r3
 800190c:	4621      	mov	r1, r4
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f04f 0400 	mov.w	r4, #0
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	f7fe fe9e 	bl	8000658 <__aeabi_uldivmod>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_GetSysClockFreq+0x158>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	0c1b      	lsrs	r3, r3, #16
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	3301      	adds	r3, #1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	60bb      	str	r3, [r7, #8]
      break;
 800193c:	e002      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001940:	60bb      	str	r3, [r7, #8]
      break;
 8001942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001944:	68bb      	ldr	r3, [r7, #8]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	00f42400 	.word	0x00f42400
 8001958:	017d7840 	.word	0x017d7840

0800195c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_RCC_GetHCLKFreq+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c

08001974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001978:	f7ff fff0 	bl	800195c <HAL_RCC_GetHCLKFreq>
 800197c:	4601      	mov	r1, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0a9b      	lsrs	r3, r3, #10
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	0802d110 	.word	0x0802d110

0800199c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a0:	f7ff ffdc 	bl	800195c <HAL_RCC_GetHCLKFreq>
 80019a4:	4601      	mov	r1, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0b5b      	lsrs	r3, r3, #13
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	0802d110 	.word	0x0802d110

080019c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	220f      	movs	r2, #15
 80019d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_GetClockConfig+0x5c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_RCC_GetClockConfig+0x5c>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_RCC_GetClockConfig+0x5c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_GetClockConfig+0x5c>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_RCC_GetClockConfig+0x60>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 020f 	and.w	r2, r3, #15
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	601a      	str	r2, [r3, #0]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e056      	b.n	8001ae8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f004 fa53 	bl	8005f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	ea42 0103 	orr.w	r1, r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	f003 0104 	and.w	r1, r3, #4
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	4613      	mov	r3, r2
 8001afe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_SPI_Transmit+0x22>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e11e      	b.n	8001d50 <HAL_SPI_Transmit+0x260>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b1a:	f7fe ff53 	bl	80009c4 <HAL_GetTick>
 8001b1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d002      	beq.n	8001b36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
 8001b32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b34:	e103      	b.n	8001d3e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_SPI_Transmit+0x52>
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b46:	e0fa      	b.n	8001d3e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	88fa      	ldrh	r2, [r7, #6]
 8001b60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8e:	d107      	bne.n	8001ba0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d007      	beq.n	8001bbe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bc6:	d14b      	bne.n	8001c60 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_SPI_Transmit+0xe6>
 8001bd0:	8afb      	ldrh	r3, [r7, #22]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d13e      	bne.n	8001c54 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	881a      	ldrh	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	1c9a      	adds	r2, r3, #2
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bfa:	e02b      	b.n	8001c54 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d112      	bne.n	8001c30 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	1c9a      	adds	r2, r3, #2
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c2e:	e011      	b.n	8001c54 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c30:	f7fe fec8 	bl	80009c4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d803      	bhi.n	8001c48 <HAL_SPI_Transmit+0x158>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c46:	d102      	bne.n	8001c4e <HAL_SPI_Transmit+0x15e>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c52:	e074      	b.n	8001d3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ce      	bne.n	8001bfc <HAL_SPI_Transmit+0x10c>
 8001c5e:	e04c      	b.n	8001cfa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_SPI_Transmit+0x17e>
 8001c68:	8afb      	ldrh	r3, [r7, #22]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d140      	bne.n	8001cf0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	330c      	adds	r3, #12
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c94:	e02c      	b.n	8001cf0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d113      	bne.n	8001ccc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	330c      	adds	r3, #12
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cca:	e011      	b.n	8001cf0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ccc:	f7fe fe7a 	bl	80009c4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d803      	bhi.n	8001ce4 <HAL_SPI_Transmit+0x1f4>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d102      	bne.n	8001cea <HAL_SPI_Transmit+0x1fa>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cee:	e026      	b.n	8001d3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1cd      	bne.n	8001c96 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f9b2 	bl	8002068 <SPI_EndRxTxTransaction>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	77fb      	strb	r3, [r7, #31]
 8001d3a:	e000      	b.n	8001d3e <HAL_SPI_Transmit+0x24e>
  }

error:
 8001d3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10f      	bne.n	8001d9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
    return;
 8001d9a:	e0d8      	b.n	8001f4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <HAL_SPI_IRQHandler+0x66>
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	09db      	lsrs	r3, r3, #7
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d004      	beq.n	8001dbe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
    return;
 8001dbc:	e0c7      	b.n	8001f4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	095b      	lsrs	r3, r3, #5
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_SPI_IRQHandler+0x8c>
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_SPI_IRQHandler+0x8c>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80b5 	beq.w	8001f4e <HAL_SPI_IRQHandler+0x1f6>
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ae 	beq.w	8001f4e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d023      	beq.n	8001e46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d011      	beq.n	8001e2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f043 0204 	orr.w	r2, r3, #4
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	e00b      	b.n	8001e46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
        return;
 8001e44:	e083      	b.n	8001f4e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d014      	beq.n	8001e7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f043 0208 	orr.w	r2, r3, #8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d050      	beq.n	8001f4c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eb8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d104      	bne.n	8001ed6 <HAL_SPI_IRQHandler+0x17e>
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d034      	beq.n	8001f40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0203 	bic.w	r2, r2, #3
 8001ee4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d011      	beq.n	8001f12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_SPI_IRQHandler+0x1fc>)
 8001ef4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe72 	bl	8000be4 <HAL_DMA_Abort_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d016      	beq.n	8001f48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1e:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_SPI_IRQHandler+0x1fc>)
 8001f20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fe5c 	bl	8000be4 <HAL_DMA_Abort_IT>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001f3e:	e003      	b.n	8001f48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f809 	bl	8001f58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001f46:	e000      	b.n	8001f4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8001f48:	bf00      	nop
    return;
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
  }
}
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	08001f6d 	.word	0x08001f6d

08001f58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7ff ffe6 	bl	8001f58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fa4:	e04c      	b.n	8002040 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d048      	beq.n	8002040 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001fae:	f7fe fd09 	bl	80009c4 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d902      	bls.n	8001fc4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d13d      	bne.n	8002040 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fdc:	d111      	bne.n	8002002 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fe6:	d004      	beq.n	8001ff2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff0:	d107      	bne.n	8002002 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002000:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200a:	d10f      	bne.n	800202c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e00f      	b.n	8002060 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4013      	ands	r3, r2
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	429a      	cmp	r2, r3
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	429a      	cmp	r2, r3
 800205c:	d1a3      	bne.n	8001fa6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <SPI_EndRxTxTransaction+0x7c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <SPI_EndRxTxTransaction+0x80>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0d5b      	lsrs	r3, r3, #21
 8002080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002092:	d112      	bne.n	80020ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2200      	movs	r2, #0
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff ff78 	bl	8001f94 <SPI_WaitFlagStateUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f043 0220 	orr.w	r2, r3, #32
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e00f      	b.n	80020da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d0f2      	beq.n	80020ba <SPI_EndRxTxTransaction+0x52>
 80020d4:	e000      	b.n	80020d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80020d6:	bf00      	nop
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000000c 	.word	0x2000000c
 80020e8:	165e9f81 	.word	0x165e9f81

080020ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e01d      	b.n	800213a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f815 	bl	8002142 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3304      	adds	r3, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f000 fa58 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b06      	cmp	r3, #6
 800217e:	d007      	beq.n	8002190 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01d      	b.n	80021ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f003 ff0b 	bl	8005fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3304      	adds	r3, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f000 f9ff 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b02      	cmp	r3, #2
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0202 	mvn.w	r2, #2
 8002220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f9b4 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9a6 	bl	8002590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f9b7 	bl	80025b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b04      	cmp	r3, #4
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0204 	mvn.w	r2, #4
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f98a 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f97c 	bl	8002590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f98d 	bl	80025b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0208 	mvn.w	r2, #8
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2204      	movs	r2, #4
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f960 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f952 	bl	8002590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f963 	bl	80025b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b10      	cmp	r3, #16
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b10      	cmp	r3, #16
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0210 	mvn.w	r2, #16
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2208      	movs	r2, #8
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f936 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f928 	bl	8002590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f939 	bl	80025b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f003 fd36 	bl	8005de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fbcb 	bl	8002b3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8fe 	bl	80025cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0220 	mvn.w	r2, #32
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fb95 	bl	8002b26 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800241a:	2302      	movs	r3, #2
 800241c:	e0b4      	b.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x184>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f200 809f 	bhi.w	8002574 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002436:	a201      	add	r2, pc, #4	; (adr r2, 800243c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	08002471 	.word	0x08002471
 8002440:	08002575 	.word	0x08002575
 8002444:	08002575 	.word	0x08002575
 8002448:	08002575 	.word	0x08002575
 800244c:	080024b1 	.word	0x080024b1
 8002450:	08002575 	.word	0x08002575
 8002454:	08002575 	.word	0x08002575
 8002458:	08002575 	.word	0x08002575
 800245c:	080024f3 	.word	0x080024f3
 8002460:	08002575 	.word	0x08002575
 8002464:	08002575 	.word	0x08002575
 8002468:	08002575 	.word	0x08002575
 800246c:	08002533 	.word	0x08002533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f932 	bl	80026e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0208 	orr.w	r2, r2, #8
 800248a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0204 	bic.w	r2, r2, #4
 800249a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6999      	ldr	r1, [r3, #24]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	619a      	str	r2, [r3, #24]
      break;
 80024ae:	e062      	b.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f978 	bl	80027ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6999      	ldr	r1, [r3, #24]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	021a      	lsls	r2, r3, #8
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	619a      	str	r2, [r3, #24]
      break;
 80024f0:	e041      	b.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f9c3 	bl	8002884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0208 	orr.w	r2, r2, #8
 800250c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0204 	bic.w	r2, r2, #4
 800251c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69d9      	ldr	r1, [r3, #28]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	61da      	str	r2, [r3, #28]
      break;
 8002530:	e021      	b.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fa0d 	bl	8002958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69d9      	ldr	r1, [r3, #28]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	021a      	lsls	r2, r3, #8
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	61da      	str	r2, [r3, #28]
      break;
 8002572:	e000      	b.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002574:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <TIM_Base_SetConfig+0xe4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00f      	beq.n	8002618 <TIM_Base_SetConfig+0x38>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fe:	d00b      	beq.n	8002618 <TIM_Base_SetConfig+0x38>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a31      	ldr	r2, [pc, #196]	; (80026c8 <TIM_Base_SetConfig+0xe8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <TIM_Base_SetConfig+0x38>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a30      	ldr	r2, [pc, #192]	; (80026cc <TIM_Base_SetConfig+0xec>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d003      	beq.n	8002618 <TIM_Base_SetConfig+0x38>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a2f      	ldr	r2, [pc, #188]	; (80026d0 <TIM_Base_SetConfig+0xf0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d108      	bne.n	800262a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <TIM_Base_SetConfig+0xe4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01b      	beq.n	800266a <TIM_Base_SetConfig+0x8a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002638:	d017      	beq.n	800266a <TIM_Base_SetConfig+0x8a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <TIM_Base_SetConfig+0xe8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <TIM_Base_SetConfig+0x8a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a21      	ldr	r2, [pc, #132]	; (80026cc <TIM_Base_SetConfig+0xec>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00f      	beq.n	800266a <TIM_Base_SetConfig+0x8a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <TIM_Base_SetConfig+0xf0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0x8a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <TIM_Base_SetConfig+0xf4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x8a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <TIM_Base_SetConfig+0xf8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x8a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <TIM_Base_SetConfig+0xfc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <TIM_Base_SetConfig+0xe4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d103      	bne.n	80026b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	615a      	str	r2, [r3, #20]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40000c00 	.word	0x40000c00
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40014400 	.word	0x40014400
 80026dc:	40014800 	.word	0x40014800

080026e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f023 0201 	bic.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 0302 	bic.w	r3, r3, #2
 8002728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <TIM_OC1_SetConfig+0xc8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10c      	bne.n	8002756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0308 	bic.w	r3, r3, #8
 8002742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <TIM_OC1_SetConfig+0xc8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d111      	bne.n	8002782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800276c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	621a      	str	r2, [r3, #32]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40010000 	.word	0x40010000

080027ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f023 0210 	bic.w	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0320 	bic.w	r3, r3, #32
 80027f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <TIM_OC2_SetConfig+0xd4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10d      	bne.n	8002828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a15      	ldr	r2, [pc, #84]	; (8002880 <TIM_OC2_SetConfig+0xd4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d113      	bne.n	8002858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800283e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	621a      	str	r2, [r3, #32]
}
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000

08002884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <TIM_OC3_SetConfig+0xd0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <TIM_OC3_SetConfig+0xd0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d113      	bne.n	800292e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800290c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40010000 	.word	0x40010000

08002958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	031b      	lsls	r3, r3, #12
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <TIM_OC4_SetConfig+0x9c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d109      	bne.n	80029cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	621a      	str	r2, [r3, #32]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40010000 	.word	0x40010000

080029f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e032      	b.n	8002a76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e03d      	b.n	8002b1a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e03f      	b.n	8002be0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f003 fb11 	bl	800619c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2224      	movs	r2, #36	; 0x24
 8002b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fb92 	bl	80032bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	f040 8083 	bne.w	8002d10 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_UART_Transmit+0x2e>
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07b      	b.n	8002d12 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Transmit+0x40>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e074      	b.n	8002d12 <HAL_UART_Transmit+0x12a>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2221      	movs	r2, #33	; 0x21
 8002c3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c3e:	f7fd fec1 	bl	80009c4 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	88fa      	ldrh	r2, [r7, #6]
 8002c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c50:	e042      	b.n	8002cd8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d122      	bne.n	8002cb0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f9b5 	bl	8002fe4 <UART_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e046      	b.n	8002d12 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c96:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	e017      	b.n	8002cd8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	e013      	b.n	8002cd8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f992 	bl	8002fe4 <UART_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e023      	b.n	8002d12 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	60ba      	str	r2, [r7, #8]
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1b7      	bne.n	8002c52 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f979 	bl	8002fe4 <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e00a      	b.n	8002d12 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d140      	bne.n	8002db6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_UART_Receive_IT+0x26>
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e039      	b.n	8002db8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Receive_IT+0x38>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e032      	b.n	8002db8 <HAL_UART_Receive_IT+0x9e>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	88fa      	ldrh	r2, [r7, #6]
 8002d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2222      	movs	r2, #34	; 0x22
 8002d76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d90:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0220 	orr.w	r2, r2, #32
 8002db0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10d      	bne.n	8002e16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_UART_IRQHandler+0x52>
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9d2 	bl	80031b8 <UART_Receive_IT>
      return;
 8002e14:	e0cc      	b.n	8002fb0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80ab 	beq.w	8002f74 <HAL_UART_IRQHandler+0x1b0>
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_UART_IRQHandler+0x70>
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80a0 	beq.w	8002f74 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_UART_IRQHandler+0x90>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_UART_IRQHandler+0xb0>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	f043 0202 	orr.w	r2, r3, #2
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_UART_IRQHandler+0xd0>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_UART_IRQHandler+0xf0>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	f043 0208 	orr.w	r2, r3, #8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d078      	beq.n	8002fae <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x112>
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f971 	bl	80031b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <HAL_UART_IRQHandler+0x13a>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d031      	beq.n	8002f62 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8ba 	bl	8003078 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d123      	bne.n	8002f5a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d013      	beq.n	8002f52 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2e:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <HAL_UART_IRQHandler+0x1f4>)
 8002f30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fe54 	bl	8000be4 <HAL_DMA_Abort_IT>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	e00e      	b.n	8002f70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f83c 	bl	8002fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	e00a      	b.n	8002f70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f838 	bl	8002fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	e006      	b.n	8002f70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f834 	bl	8002fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f6e:	e01e      	b.n	8002fae <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	bf00      	nop
    return;
 8002f72:	e01c      	b.n	8002fae <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_UART_IRQHandler+0x1cc>
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f8a7 	bl	80030dc <UART_Transmit_IT>
    return;
 8002f8e:	e00f      	b.n	8002fb0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x1ec>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f8ef 	bl	8003188 <UART_EndTransmit_IT>
    return;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002fae:	bf00      	nop
  }
}
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	080030b5 	.word	0x080030b5

08002fbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff4:	e02c      	b.n	8003050 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d028      	beq.n	8003050 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <UART_WaitOnFlagUntilTimeout+0x30>
 8003004:	f7fd fcde 	bl	80009c4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	429a      	cmp	r2, r3
 8003012:	d21d      	bcs.n	8003050 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003022:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e00f      	b.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	429a      	cmp	r2, r3
 800306c:	d0c3      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800308e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff ff7e 	bl	8002fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b21      	cmp	r3, #33	; 0x21
 80030ee:	d144      	bne.n	800317a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d11a      	bne.n	8003130 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	1c9a      	adds	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	621a      	str	r2, [r3, #32]
 8003122:	e00e      	b.n	8003142 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]
 800312e:	e008      	b.n	8003142 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	1c59      	adds	r1, r3, #1
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6211      	str	r1, [r2, #32]
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29b      	uxth	r3, r3
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4619      	mov	r1, r3
 8003150:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003164:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003174:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800319e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff07 	bl	8002fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b22      	cmp	r3, #34	; 0x22
 80031ca:	d171      	bne.n	80032b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d4:	d123      	bne.n	800321e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10e      	bne.n	8003202 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	1c9a      	adds	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003200:	e029      	b.n	8003256 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	b29b      	uxth	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
 800321c:	e01b      	b.n	8003256 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6858      	ldr	r0, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	1c59      	adds	r1, r3, #1
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6291      	str	r1, [r2, #40]	; 0x28
 8003236:	b2c2      	uxtb	r2, r0
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e00c      	b.n	8003256 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	1c58      	adds	r0, r3, #1
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	6288      	str	r0, [r1, #40]	; 0x28
 800324e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29b      	uxth	r3, r3
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4619      	mov	r1, r3
 8003264:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003266:	2b00      	cmp	r3, #0
 8003268:	d120      	bne.n	80032ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0220 	bic.w	r2, r2, #32
 8003278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f001 ff9a 	bl	80051dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e002      	b.n	80032b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032bc:	b5b0      	push	{r4, r5, r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032fc:	f023 030c 	bic.w	r3, r3, #12
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	430b      	orrs	r3, r1
 8003308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003328:	f040 80e4 	bne.w	80034f4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4aab      	ldr	r2, [pc, #684]	; (80035e0 <UART_SetConfig+0x324>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <UART_SetConfig+0x84>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4aaa      	ldr	r2, [pc, #680]	; (80035e4 <UART_SetConfig+0x328>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d16c      	bne.n	800341a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003340:	f7fe fb2c 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8003344:	4602      	mov	r2, r0
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	009a      	lsls	r2, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	4aa3      	ldr	r2, [pc, #652]	; (80035e8 <UART_SetConfig+0x32c>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	011c      	lsls	r4, r3, #4
 8003364:	f7fe fb1a 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8003368:	4602      	mov	r2, r0
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009a      	lsls	r2, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fbb2 f5f3 	udiv	r5, r2, r3
 800337e:	f7fe fb0d 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8003382:	4602      	mov	r2, r0
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009a      	lsls	r2, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	4a93      	ldr	r2, [pc, #588]	; (80035e8 <UART_SetConfig+0x32c>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2264      	movs	r2, #100	; 0x64
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	1aeb      	subs	r3, r5, r3
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a8e      	ldr	r2, [pc, #568]	; (80035e8 <UART_SetConfig+0x32c>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033ba:	441c      	add	r4, r3
 80033bc:	f7fe faee 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	009a      	lsls	r2, r3, #2
 80033ca:	441a      	add	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80033d6:	f7fe fae1 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	4a7d      	ldr	r2, [pc, #500]	; (80035e8 <UART_SetConfig+0x32c>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2264      	movs	r2, #100	; 0x64
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	1aeb      	subs	r3, r5, r3
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	3332      	adds	r3, #50	; 0x32
 8003404:	4a78      	ldr	r2, [pc, #480]	; (80035e8 <UART_SetConfig+0x32c>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 0207 	and.w	r2, r3, #7
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4422      	add	r2, r4
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	e154      	b.n	80036c4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800341a:	f7fe faab 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 800341e:	4602      	mov	r2, r0
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009a      	lsls	r2, r3, #2
 8003428:	441a      	add	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	4a6c      	ldr	r2, [pc, #432]	; (80035e8 <UART_SetConfig+0x32c>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	011c      	lsls	r4, r3, #4
 800343e:	f7fe fa99 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8003442:	4602      	mov	r2, r0
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009a      	lsls	r2, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fbb2 f5f3 	udiv	r5, r2, r3
 8003458:	f7fe fa8c 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 800345c:	4602      	mov	r2, r0
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	009a      	lsls	r2, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	4a5d      	ldr	r2, [pc, #372]	; (80035e8 <UART_SetConfig+0x32c>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	2264      	movs	r2, #100	; 0x64
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	1aeb      	subs	r3, r5, r3
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	3332      	adds	r3, #50	; 0x32
 8003486:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <UART_SetConfig+0x32c>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003494:	441c      	add	r4, r3
 8003496:	f7fe fa6d 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 800349a:	4602      	mov	r2, r0
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80034b0:	f7fe fa60 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009a      	lsls	r2, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	4a47      	ldr	r2, [pc, #284]	; (80035e8 <UART_SetConfig+0x32c>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2264      	movs	r2, #100	; 0x64
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	1aeb      	subs	r3, r5, r3
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	3332      	adds	r3, #50	; 0x32
 80034de:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <UART_SetConfig+0x32c>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 0207 	and.w	r2, r3, #7
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4422      	add	r2, r4
 80034f0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80034f2:	e0e7      	b.n	80036c4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a39      	ldr	r2, [pc, #228]	; (80035e0 <UART_SetConfig+0x324>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <UART_SetConfig+0x24c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <UART_SetConfig+0x328>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d171      	bne.n	80035ec <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003508:	f7fe fa48 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 800350c:	4602      	mov	r2, r0
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009a      	lsls	r2, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	4a31      	ldr	r2, [pc, #196]	; (80035e8 <UART_SetConfig+0x32c>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	011c      	lsls	r4, r3, #4
 800352c:	f7fe fa36 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8003530:	4602      	mov	r2, r0
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009a      	lsls	r2, r3, #2
 800353a:	441a      	add	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	fbb2 f5f3 	udiv	r5, r2, r3
 8003546:	f7fe fa29 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 800354a:	4602      	mov	r2, r0
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	009a      	lsls	r2, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <UART_SetConfig+0x32c>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2264      	movs	r2, #100	; 0x64
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	1aeb      	subs	r3, r5, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	; 0x32
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <UART_SetConfig+0x32c>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003580:	441c      	add	r4, r3
 8003582:	f7fe fa0b 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8003586:	4602      	mov	r2, r0
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fbb2 f5f3 	udiv	r5, r2, r3
 800359c:	f7fe f9fe 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009a      	lsls	r2, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <UART_SetConfig+0x32c>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	2264      	movs	r2, #100	; 0x64
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	1aeb      	subs	r3, r5, r3
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	3332      	adds	r3, #50	; 0x32
 80035ca:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <UART_SetConfig+0x32c>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	f003 020f 	and.w	r2, r3, #15
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4422      	add	r2, r4
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	e071      	b.n	80036c4 <UART_SetConfig+0x408>
 80035e0:	40011000 	.word	0x40011000
 80035e4:	40011400 	.word	0x40011400
 80035e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80035ec:	f7fe f9c2 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009a      	lsls	r2, r3, #2
 80035fa:	441a      	add	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4a31      	ldr	r2, [pc, #196]	; (80036cc <UART_SetConfig+0x410>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	011c      	lsls	r4, r3, #4
 8003610:	f7fe f9b0 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8003614:	4602      	mov	r2, r0
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	fbb2 f5f3 	udiv	r5, r2, r3
 800362a:	f7fe f9a3 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 800362e:	4602      	mov	r2, r0
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	4a21      	ldr	r2, [pc, #132]	; (80036cc <UART_SetConfig+0x410>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2264      	movs	r2, #100	; 0x64
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	1aeb      	subs	r3, r5, r3
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	3332      	adds	r3, #50	; 0x32
 8003658:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <UART_SetConfig+0x410>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003664:	441c      	add	r4, r3
 8003666:	f7fe f985 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 800366a:	4602      	mov	r2, r0
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009a      	lsls	r2, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003680:	f7fe f978 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8003684:	4602      	mov	r2, r0
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009a      	lsls	r2, r3, #2
 800368e:	441a      	add	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <UART_SetConfig+0x410>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	2264      	movs	r2, #100	; 0x64
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	1aeb      	subs	r3, r5, r3
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	3332      	adds	r3, #50	; 0x32
 80036ae:	4a07      	ldr	r2, [pc, #28]	; (80036cc <UART_SetConfig+0x410>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	f003 020f 	and.w	r2, r3, #15
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4422      	add	r2, r4
 80036c0:	609a      	str	r2, [r3, #8]
}
 80036c2:	e7ff      	b.n	80036c4 <UART_SetConfig+0x408>
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bdb0      	pop	{r4, r5, r7, pc}
 80036cc:	51eb851f 	.word	0x51eb851f

080036d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036e2:	2b84      	cmp	r3, #132	; 0x84
 80036e4:	d005      	beq.n	80036f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4413      	add	r3, r2
 80036ee:	3303      	adds	r3, #3
 80036f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80036f2:	68fb      	ldr	r3, [r7, #12]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003704:	f000 fad2 	bl	8003cac <vTaskStartScheduler>
  
  return osOK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}

0800370e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800370e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003710:	b089      	sub	sp, #36	; 0x24
 8003712:	af04      	add	r7, sp, #16
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <osThreadCreate+0x54>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01c      	beq.n	8003762 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685c      	ldr	r4, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681d      	ldr	r5, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691e      	ldr	r6, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ffc8 	bl	80036d0 <makeFreeRtosPriority>
 8003740:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800374a:	9202      	str	r2, [sp, #8]
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	9100      	str	r1, [sp, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4632      	mov	r2, r6
 8003754:	4629      	mov	r1, r5
 8003756:	4620      	mov	r0, r4
 8003758:	f000 f8ed 	bl	8003936 <xTaskCreateStatic>
 800375c:	4603      	mov	r3, r0
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e01c      	b.n	800379c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685c      	ldr	r4, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800376e:	b29e      	uxth	r6, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ffaa 	bl	80036d0 <makeFreeRtosPriority>
 800377c:	4602      	mov	r2, r0
 800377e:	f107 030c 	add.w	r3, r7, #12
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	9200      	str	r2, [sp, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	4632      	mov	r2, r6
 800378a:	4629      	mov	r1, r5
 800378c:	4620      	mov	r0, r4
 800378e:	f000 f92b 	bl	80039e8 <xTaskCreate>
 8003792:	4603      	mov	r3, r0
 8003794:	2b01      	cmp	r3, #1
 8003796:	d001      	beq.n	800379c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800379c:	68fb      	ldr	r3, [r7, #12]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <osDelay+0x16>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	e000      	b.n	80037be <osDelay+0x18>
 80037bc:	2301      	movs	r3, #1
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa40 	bl	8003c44 <vTaskDelay>
  
  return osOK;
 80037c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f103 0208 	add.w	r2, r3, #8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f04f 32ff 	mov.w	r2, #4294967295
 80037e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f103 0208 	add.w	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f103 0208 	add.w	r2, r3, #8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d103      	bne.n	8003890 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e00c      	b.n	80038aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3308      	adds	r3, #8
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	e002      	b.n	800389e <vListInsert+0x2e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d2f6      	bcs.n	8003898 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	601a      	str	r2, [r3, #0]
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6892      	ldr	r2, [r2, #8]
 80038f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6852      	ldr	r2, [r2, #4]
 8003902:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d103      	bne.n	8003916 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	1e5a      	subs	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003936:	b580      	push	{r7, lr}
 8003938:	b08e      	sub	sp, #56	; 0x38
 800393a:	af04      	add	r7, sp, #16
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	623b      	str	r3, [r7, #32]
 800395c:	e7fe      	b.n	800395c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <xTaskCreateStatic+0x42>
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e7fe      	b.n	8003976 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003978:	2354      	movs	r3, #84	; 0x54
 800397a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b54      	cmp	r3, #84	; 0x54
 8003980:	d009      	beq.n	8003996 <xTaskCreateStatic+0x60>
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e7fe      	b.n	8003994 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01e      	beq.n	80039da <xTaskCreateStatic+0xa4>
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01b      	beq.n	80039da <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039b4:	2300      	movs	r3, #0
 80039b6:	9303      	str	r3, [sp, #12]
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	9302      	str	r3, [sp, #8]
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f850 	bl	8003a72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039d4:	f000 f8cc 	bl	8003b70 <prvAddNewTaskToReadyList>
 80039d8:	e001      	b.n	80039de <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039de:	697b      	ldr	r3, [r7, #20]
	}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	; 0x30
 80039ec:	af04      	add	r7, sp, #16
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 feb1 	bl	8004764 <pvPortMalloc>
 8003a02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00e      	beq.n	8003a28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a0a:	2054      	movs	r0, #84	; 0x54
 8003a0c:	f000 feaa 	bl	8004764 <pvPortMalloc>
 8003a10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a1e:	e005      	b.n	8003a2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a20:	6978      	ldr	r0, [r7, #20]
 8003a22:	f000 ff61 	bl	80048e8 <vPortFree>
 8003a26:	e001      	b.n	8003a2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d017      	beq.n	8003a62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9303      	str	r3, [sp, #12]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f80e 	bl	8003a72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a56:	69f8      	ldr	r0, [r7, #28]
 8003a58:	f000 f88a 	bl	8003b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e002      	b.n	8003a68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a68:	69bb      	ldr	r3, [r7, #24]
	}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b088      	sub	sp, #32
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f023 0307 	bic.w	r3, r3, #7
 8003a98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <prvInitialiseNewTask+0x46>
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e7fe      	b.n	8003ab6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e012      	b.n	8003ae4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	7819      	ldrb	r1, [r3, #0]
 8003ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	3334      	adds	r3, #52	; 0x34
 8003ace:	460a      	mov	r2, r1
 8003ad0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	d9e9      	bls.n	8003abe <prvInitialiseNewTask+0x4c>
 8003aea:	e000      	b.n	8003aee <prvInitialiseNewTask+0x7c>
		{
			break;
 8003aec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	d901      	bls.n	8003b00 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003afc:	2306      	movs	r3, #6
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	2200      	movs	r2, #0
 8003b10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	3304      	adds	r3, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff fe79 	bl	800380e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	3318      	adds	r3, #24
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fe74 	bl	800380e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	f1c3 0207 	rsb	r2, r3, #7
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	2200      	movs	r2, #0
 8003b40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	68f9      	ldr	r1, [r7, #12]
 8003b4e:	69b8      	ldr	r0, [r7, #24]
 8003b50:	f000 fc08 	bl	8004364 <pxPortInitialiseStack>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b66:	bf00      	nop
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b78:	f000 fd18 	bl	80045ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <prvAddNewTaskToReadyList+0xb8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	4a29      	ldr	r2, [pc, #164]	; (8003c28 <prvAddNewTaskToReadyList+0xb8>)
 8003b84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b86:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <prvAddNewTaskToReadyList+0xbc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b8e:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <prvAddNewTaskToReadyList+0xbc>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b94:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <prvAddNewTaskToReadyList+0xb8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d110      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b9c:	f000 fabc 	bl	8004118 <prvInitialiseTaskLists>
 8003ba0:	e00d      	b.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ba2:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <prvAddNewTaskToReadyList+0xc0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <prvAddNewTaskToReadyList+0xbc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d802      	bhi.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <prvAddNewTaskToReadyList+0xbc>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <prvAddNewTaskToReadyList+0xc4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <prvAddNewTaskToReadyList+0xc4>)
 8003bc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2201      	movs	r2, #1
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <prvAddNewTaskToReadyList+0xc8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <prvAddNewTaskToReadyList+0xc8>)
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <prvAddNewTaskToReadyList+0xcc>)
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7ff fe19 	bl	8003828 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bf6:	f000 fd07 	bl	8004608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <prvAddNewTaskToReadyList+0xc0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00e      	beq.n	8003c20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <prvAddNewTaskToReadyList+0xbc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d207      	bcs.n	8003c20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <prvAddNewTaskToReadyList+0xd0>)
 8003c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000190 	.word	0x20000190
 8003c2c:	20000090 	.word	0x20000090
 8003c30:	2000019c 	.word	0x2000019c
 8003c34:	200001ac 	.word	0x200001ac
 8003c38:	20000198 	.word	0x20000198
 8003c3c:	20000094 	.word	0x20000094
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <vTaskDelay+0x60>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <vTaskDelay+0x2e>
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	e7fe      	b.n	8003c70 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c72:	f000 f879 	bl	8003d68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c76:	2100      	movs	r1, #0
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fb0d 	bl	8004298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c7e:	f000 f881 	bl	8003d84 <xTaskResumeAll>
 8003c82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d107      	bne.n	8003c9a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <vTaskDelay+0x64>)
 8003c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200001b8 	.word	0x200001b8
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cba:	463a      	mov	r2, r7
 8003cbc:	1d39      	adds	r1, r7, #4
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 ff24 	bl	8004b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	9202      	str	r2, [sp, #8]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	460a      	mov	r2, r1
 8003cda:	491d      	ldr	r1, [pc, #116]	; (8003d50 <vTaskStartScheduler+0xa4>)
 8003cdc:	481d      	ldr	r0, [pc, #116]	; (8003d54 <vTaskStartScheduler+0xa8>)
 8003cde:	f7ff fe2a 	bl	8003936 <xTaskCreateStatic>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <vTaskStartScheduler+0xac>)
 8003ce6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <vTaskStartScheduler+0xac>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e001      	b.n	8003cfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d115      	bne.n	8003d2c <vTaskStartScheduler+0x80>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <vTaskStartScheduler+0xb0>)
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295
 8003d18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <vTaskStartScheduler+0xb4>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <vTaskStartScheduler+0xb8>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d26:	f000 fba3 	bl	8004470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d2a:	e00d      	b.n	8003d48 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d109      	bne.n	8003d48 <vTaskStartScheduler+0x9c>
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e7fe      	b.n	8003d46 <vTaskStartScheduler+0x9a>
}
 8003d48:	bf00      	nop
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	0800782c 	.word	0x0800782c
 8003d54:	080040e9 	.word	0x080040e9
 8003d58:	200001b4 	.word	0x200001b4
 8003d5c:	200001b0 	.word	0x200001b0
 8003d60:	2000019c 	.word	0x2000019c
 8003d64:	20000194 	.word	0x20000194

08003d68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <vTaskSuspendAll+0x18>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <vTaskSuspendAll+0x18>)
 8003d74:	6013      	str	r3, [r2, #0]
}
 8003d76:	bf00      	nop
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	200001b8 	.word	0x200001b8

08003d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d92:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <xTaskResumeAll+0x114>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <xTaskResumeAll+0x2a>
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	e7fe      	b.n	8003dac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dae:	f000 fbfd 	bl	80045ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003db2:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <xTaskResumeAll+0x114>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	4a37      	ldr	r2, [pc, #220]	; (8003e98 <xTaskResumeAll+0x114>)
 8003dba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dbc:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <xTaskResumeAll+0x114>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d161      	bne.n	8003e88 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dc4:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <xTaskResumeAll+0x118>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05d      	beq.n	8003e88 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dcc:	e02e      	b.n	8003e2c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dce:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <xTaskResumeAll+0x11c>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3318      	adds	r3, #24
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fd81 	bl	80038e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fd7c 	bl	80038e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	2201      	movs	r2, #1
 8003df0:	409a      	lsls	r2, r3
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <xTaskResumeAll+0x120>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <xTaskResumeAll+0x120>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <xTaskResumeAll+0x124>)
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7ff fd08 	bl	8003828 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <xTaskResumeAll+0x128>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003e26:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <xTaskResumeAll+0x12c>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <xTaskResumeAll+0x11c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1cc      	bne.n	8003dce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e3a:	f000 fa07 	bl	800424c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <xTaskResumeAll+0x130>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e4a:	f000 f837 	bl	8003ebc <xTaskIncrementTick>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <xTaskResumeAll+0x12c>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f1      	bne.n	8003e4a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <xTaskResumeAll+0x130>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <xTaskResumeAll+0x12c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <xTaskResumeAll+0x134>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e88:	f000 fbbe 	bl	8004608 <vPortExitCritical>

	return xAlreadyYielded;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200001b8 	.word	0x200001b8
 8003e9c:	20000190 	.word	0x20000190
 8003ea0:	20000150 	.word	0x20000150
 8003ea4:	20000198 	.word	0x20000198
 8003ea8:	20000094 	.word	0x20000094
 8003eac:	20000090 	.word	0x20000090
 8003eb0:	200001a4 	.word	0x200001a4
 8003eb4:	200001a0 	.word	0x200001a0
 8003eb8:	e000ed04 	.word	0xe000ed04

08003ebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec6:	4b50      	ldr	r3, [pc, #320]	; (8004008 <xTaskIncrementTick+0x14c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 808c 	bne.w	8003fe8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ed0:	4b4e      	ldr	r3, [pc, #312]	; (800400c <xTaskIncrementTick+0x150>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ed8:	4a4c      	ldr	r2, [pc, #304]	; (800400c <xTaskIncrementTick+0x150>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11f      	bne.n	8003f24 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ee4:	4b4a      	ldr	r3, [pc, #296]	; (8004010 <xTaskIncrementTick+0x154>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <xTaskIncrementTick+0x46>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	e7fe      	b.n	8003f00 <xTaskIncrementTick+0x44>
 8003f02:	4b43      	ldr	r3, [pc, #268]	; (8004010 <xTaskIncrementTick+0x154>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <xTaskIncrementTick+0x158>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a40      	ldr	r2, [pc, #256]	; (8004010 <xTaskIncrementTick+0x154>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4a40      	ldr	r2, [pc, #256]	; (8004014 <xTaskIncrementTick+0x158>)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b40      	ldr	r3, [pc, #256]	; (8004018 <xTaskIncrementTick+0x15c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4a3e      	ldr	r2, [pc, #248]	; (8004018 <xTaskIncrementTick+0x15c>)
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	f000 f994 	bl	800424c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f24:	4b3d      	ldr	r3, [pc, #244]	; (800401c <xTaskIncrementTick+0x160>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d34d      	bcc.n	8003fca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f2e:	4b38      	ldr	r3, [pc, #224]	; (8004010 <xTaskIncrementTick+0x154>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <xTaskIncrementTick+0x80>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <xTaskIncrementTick+0x82>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <xTaskIncrementTick+0x160>)
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295
 8003f48:	601a      	str	r2, [r3, #0]
					break;
 8003f4a:	e03e      	b.n	8003fca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f4c:	4b30      	ldr	r3, [pc, #192]	; (8004010 <xTaskIncrementTick+0x154>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d203      	bcs.n	8003f6c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f64:	4a2d      	ldr	r2, [pc, #180]	; (800401c <xTaskIncrementTick+0x160>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6013      	str	r3, [r2, #0]
						break;
 8003f6a:	e02e      	b.n	8003fca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fcb6 	bl	80038e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3318      	adds	r3, #24
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fcad 	bl	80038e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	4b23      	ldr	r3, [pc, #140]	; (8004020 <xTaskIncrementTick+0x164>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	4a22      	ldr	r2, [pc, #136]	; (8004020 <xTaskIncrementTick+0x164>)
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <xTaskIncrementTick+0x168>)
 8003fa8:	441a      	add	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f7ff fc39 	bl	8003828 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <xTaskIncrementTick+0x16c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d3b4      	bcc.n	8003f2e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc8:	e7b1      	b.n	8003f2e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <xTaskIncrementTick+0x16c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	4914      	ldr	r1, [pc, #80]	; (8004024 <xTaskIncrementTick+0x168>)
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d907      	bls.n	8003ff2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e004      	b.n	8003ff2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fe8:	4b10      	ldr	r3, [pc, #64]	; (800402c <xTaskIncrementTick+0x170>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a0f      	ldr	r2, [pc, #60]	; (800402c <xTaskIncrementTick+0x170>)
 8003ff0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <xTaskIncrementTick+0x174>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ffe:	697b      	ldr	r3, [r7, #20]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200001b8 	.word	0x200001b8
 800400c:	20000194 	.word	0x20000194
 8004010:	20000148 	.word	0x20000148
 8004014:	2000014c 	.word	0x2000014c
 8004018:	200001a8 	.word	0x200001a8
 800401c:	200001b0 	.word	0x200001b0
 8004020:	20000198 	.word	0x20000198
 8004024:	20000094 	.word	0x20000094
 8004028:	20000090 	.word	0x20000090
 800402c:	200001a0 	.word	0x200001a0
 8004030:	200001a4 	.word	0x200001a4

08004034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <vTaskSwitchContext+0xa0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004042:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <vTaskSwitchContext+0xa4>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004048:	e03e      	b.n	80040c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <vTaskSwitchContext+0xa4>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <vTaskSwitchContext+0xa8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800405e:	7afb      	ldrb	r3, [r7, #11]
 8004060:	f1c3 031f 	rsb	r3, r3, #31
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	491e      	ldr	r1, [pc, #120]	; (80040e0 <vTaskSwitchContext+0xac>)
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <vTaskSwitchContext+0x5a>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	e7fe      	b.n	800408c <vTaskSwitchContext+0x58>
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4a11      	ldr	r2, [pc, #68]	; (80040e0 <vTaskSwitchContext+0xac>)
 800409a:	4413      	add	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	3308      	adds	r3, #8
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d104      	bne.n	80040be <vTaskSwitchContext+0x8a>
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <vTaskSwitchContext+0xb0>)
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	200001b8 	.word	0x200001b8
 80040d8:	200001a4 	.word	0x200001a4
 80040dc:	20000198 	.word	0x20000198
 80040e0:	20000094 	.word	0x20000094
 80040e4:	20000090 	.word	0x20000090

080040e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040f0:	f000 f852 	bl	8004198 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <prvIdleTask+0x28>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d9f9      	bls.n	80040f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <prvIdleTask+0x2c>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800410c:	e7f0      	b.n	80040f0 <prvIdleTask+0x8>
 800410e:	bf00      	nop
 8004110:	20000094 	.word	0x20000094
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	e00c      	b.n	800413e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <prvInitialiseTaskLists+0x60>)
 8004130:	4413      	add	r3, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fb4b 	bl	80037ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3301      	adds	r3, #1
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b06      	cmp	r3, #6
 8004142:	d9ef      	bls.n	8004124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004144:	480d      	ldr	r0, [pc, #52]	; (800417c <prvInitialiseTaskLists+0x64>)
 8004146:	f7ff fb42 	bl	80037ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800414a:	480d      	ldr	r0, [pc, #52]	; (8004180 <prvInitialiseTaskLists+0x68>)
 800414c:	f7ff fb3f 	bl	80037ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004150:	480c      	ldr	r0, [pc, #48]	; (8004184 <prvInitialiseTaskLists+0x6c>)
 8004152:	f7ff fb3c 	bl	80037ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004156:	480c      	ldr	r0, [pc, #48]	; (8004188 <prvInitialiseTaskLists+0x70>)
 8004158:	f7ff fb39 	bl	80037ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800415c:	480b      	ldr	r0, [pc, #44]	; (800418c <prvInitialiseTaskLists+0x74>)
 800415e:	f7ff fb36 	bl	80037ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <prvInitialiseTaskLists+0x78>)
 8004164:	4a05      	ldr	r2, [pc, #20]	; (800417c <prvInitialiseTaskLists+0x64>)
 8004166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <prvInitialiseTaskLists+0x7c>)
 800416a:	4a05      	ldr	r2, [pc, #20]	; (8004180 <prvInitialiseTaskLists+0x68>)
 800416c:	601a      	str	r2, [r3, #0]
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000094 	.word	0x20000094
 800417c:	20000120 	.word	0x20000120
 8004180:	20000134 	.word	0x20000134
 8004184:	20000150 	.word	0x20000150
 8004188:	20000164 	.word	0x20000164
 800418c:	2000017c 	.word	0x2000017c
 8004190:	20000148 	.word	0x20000148
 8004194:	2000014c 	.word	0x2000014c

08004198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800419e:	e019      	b.n	80041d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041a0:	f000 fa04 	bl	80045ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <prvCheckTasksWaitingTermination+0x4c>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fb96 	bl	80038e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <prvCheckTasksWaitingTermination+0x50>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <prvCheckTasksWaitingTermination+0x50>)
 80041be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <prvCheckTasksWaitingTermination+0x54>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <prvCheckTasksWaitingTermination+0x54>)
 80041c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041ca:	f000 fa1d 	bl	8004608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f80e 	bl	80041f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <prvCheckTasksWaitingTermination+0x54>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e1      	bne.n	80041a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000164 	.word	0x20000164
 80041e8:	20000190 	.word	0x20000190
 80041ec:	20000178 	.word	0x20000178

080041f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fb6e 	bl	80048e8 <vPortFree>
				vPortFree( pxTCB );
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb6b 	bl	80048e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004212:	e017      	b.n	8004244 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800421a:	2b01      	cmp	r3, #1
 800421c:	d103      	bne.n	8004226 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb62 	bl	80048e8 <vPortFree>
	}
 8004224:	e00e      	b.n	8004244 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800422c:	2b02      	cmp	r3, #2
 800422e:	d009      	beq.n	8004244 <prvDeleteTCB+0x54>
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e7fe      	b.n	8004242 <prvDeleteTCB+0x52>
	}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <prvResetNextTaskUnblockTime+0x44>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <prvResetNextTaskUnblockTime+0x14>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <prvResetNextTaskUnblockTime+0x16>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <prvResetNextTaskUnblockTime+0x48>)
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800426e:	e008      	b.n	8004282 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <prvResetNextTaskUnblockTime+0x44>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <prvResetNextTaskUnblockTime+0x48>)
 8004280:	6013      	str	r3, [r2, #0]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000148 	.word	0x20000148
 8004294:	200001b0 	.word	0x200001b0

08004298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <prvAddCurrentTaskToDelayedList+0xb0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a8:	4b28      	ldr	r3, [pc, #160]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fb17 	bl	80038e2 <uxListRemove>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4013      	ands	r3, r2
 80042ce:	4a20      	ldr	r2, [pc, #128]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d10a      	bne.n	80042f0 <prvAddCurrentTaskToDelayedList+0x58>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	481a      	ldr	r0, [pc, #104]	; (8004354 <prvAddCurrentTaskToDelayedList+0xbc>)
 80042ea:	f7ff fa9d 	bl	8003828 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042ee:	e026      	b.n	800433e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	429a      	cmp	r2, r3
 8004306:	d209      	bcs.n	800431c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <prvAddCurrentTaskToDelayedList+0xc0>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7ff faab 	bl	8003870 <vListInsert>
}
 800431a:	e010      	b.n	800433e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431c:	4b0f      	ldr	r3, [pc, #60]	; (800435c <prvAddCurrentTaskToDelayedList+0xc4>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7ff faa1 	bl	8003870 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	d202      	bcs.n	800433e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004338:	4a09      	ldr	r2, [pc, #36]	; (8004360 <prvAddCurrentTaskToDelayedList+0xc8>)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6013      	str	r3, [r2, #0]
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000194 	.word	0x20000194
 800434c:	20000090 	.word	0x20000090
 8004350:	20000198 	.word	0x20000198
 8004354:	2000017c 	.word	0x2000017c
 8004358:	2000014c 	.word	0x2000014c
 800435c:	20000148 	.word	0x20000148
 8004360:	200001b0 	.word	0x200001b0

08004364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b04      	subs	r3, #4
 8004374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800437c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b04      	subs	r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f023 0201 	bic.w	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b04      	subs	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004394:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <pxPortInitialiseStack+0x64>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3b14      	subs	r3, #20
 800439e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b04      	subs	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f06f 0202 	mvn.w	r2, #2
 80043b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3b20      	subs	r3, #32
 80043b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	080043cd 	.word	0x080043cd

080043cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <prvTaskExitError+0x50>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d009      	beq.n	80043f4 <prvTaskExitError+0x28>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e7fe      	b.n	80043f2 <prvTaskExitError+0x26>
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004406:	bf00      	nop
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0fc      	beq.n	8004408 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000004 	.word	0x20000004

08004420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <pxCurrentTCBConst2>)
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	6808      	ldr	r0, [r1, #0]
 8004426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442a:	f380 8809 	msr	PSP, r0
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f380 8811 	msr	BASEPRI, r0
 800443a:	4770      	bx	lr
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst2>:
 8004440:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004448:	4808      	ldr	r0, [pc, #32]	; (800446c <prvPortStartFirstTask+0x24>)
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	6800      	ldr	r0, [r0, #0]
 800444e:	f380 8808 	msr	MSP, r0
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8814 	msr	CONTROL, r0
 800445a:	b662      	cpsie	i
 800445c:	b661      	cpsie	f
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	df00      	svc	0
 8004468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800446a:	bf00      	nop
 800446c:	e000ed08 	.word	0xe000ed08

08004470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004476:	4b44      	ldr	r3, [pc, #272]	; (8004588 <xPortStartScheduler+0x118>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a44      	ldr	r2, [pc, #272]	; (800458c <xPortStartScheduler+0x11c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d109      	bne.n	8004494 <xPortStartScheduler+0x24>
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e7fe      	b.n	8004492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004494:	4b3c      	ldr	r3, [pc, #240]	; (8004588 <xPortStartScheduler+0x118>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <xPortStartScheduler+0x120>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d109      	bne.n	80044b2 <xPortStartScheduler+0x42>
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e7fe      	b.n	80044b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044b2:	4b38      	ldr	r3, [pc, #224]	; (8004594 <xPortStartScheduler+0x124>)
 80044b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4b30      	ldr	r3, [pc, #192]	; (8004598 <xPortStartScheduler+0x128>)
 80044d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044da:	4b30      	ldr	r3, [pc, #192]	; (800459c <xPortStartScheduler+0x12c>)
 80044dc:	2207      	movs	r2, #7
 80044de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044e0:	e009      	b.n	80044f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <xPortStartScheduler+0x12c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4a2c      	ldr	r2, [pc, #176]	; (800459c <xPortStartScheduler+0x12c>)
 80044ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d0ef      	beq.n	80044e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <xPortStartScheduler+0x12c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1c3 0307 	rsb	r3, r3, #7
 800450a:	2b04      	cmp	r3, #4
 800450c:	d009      	beq.n	8004522 <xPortStartScheduler+0xb2>
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	e7fe      	b.n	8004520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <xPortStartScheduler+0x12c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	4a1c      	ldr	r2, [pc, #112]	; (800459c <xPortStartScheduler+0x12c>)
 800452a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <xPortStartScheduler+0x12c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <xPortStartScheduler+0x12c>)
 8004536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004540:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <xPortStartScheduler+0x130>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <xPortStartScheduler+0x130>)
 8004546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800454a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <xPortStartScheduler+0x130>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <xPortStartScheduler+0x130>)
 8004552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004558:	f000 f8d6 	bl	8004708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <xPortStartScheduler+0x134>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004562:	f000 f8f5 	bl	8004750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <xPortStartScheduler+0x138>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a0f      	ldr	r2, [pc, #60]	; (80045a8 <xPortStartScheduler+0x138>)
 800456c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004572:	f7ff ff69 	bl	8004448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004576:	f7ff fd5d 	bl	8004034 <vTaskSwitchContext>
	prvTaskExitError();
 800457a:	f7ff ff27 	bl	80043cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed00 	.word	0xe000ed00
 800458c:	410fc271 	.word	0x410fc271
 8004590:	410fc270 	.word	0x410fc270
 8004594:	e000e400 	.word	0xe000e400
 8004598:	200001bc 	.word	0x200001bc
 800459c:	200001c0 	.word	0x200001c0
 80045a0:	e000ed20 	.word	0xe000ed20
 80045a4:	20000004 	.word	0x20000004
 80045a8:	e000ef34 	.word	0xe000ef34

080045ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <vPortEnterCritical+0x54>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <vPortEnterCritical+0x54>)
 80045cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <vPortEnterCritical+0x54>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10e      	bne.n	80045f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <vPortEnterCritical+0x58>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d009      	beq.n	80045f4 <vPortEnterCritical+0x48>
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	e7fe      	b.n	80045f2 <vPortEnterCritical+0x46>
	}
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	20000004 	.word	0x20000004
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <vPortExitCritical+0x4c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <vPortExitCritical+0x22>
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	e7fe      	b.n	8004628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <vPortExitCritical+0x4c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3b01      	subs	r3, #1
 8004630:	4a08      	ldr	r2, [pc, #32]	; (8004654 <vPortExitCritical+0x4c>)
 8004632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <vPortExitCritical+0x4c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <vPortExitCritical+0x3e>
 800463c:	2300      	movs	r3, #0
 800463e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000004 	.word	0x20000004
	...

08004660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004660:	f3ef 8009 	mrs	r0, PSP
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <pxCurrentTCBConst>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	f01e 0f10 	tst.w	lr, #16
 8004670:	bf08      	it	eq
 8004672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	6010      	str	r0, [r2, #0]
 800467c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004684:	f380 8811 	msr	BASEPRI, r0
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f7ff fcd0 	bl	8004034 <vTaskSwitchContext>
 8004694:	f04f 0000 	mov.w	r0, #0
 8004698:	f380 8811 	msr	BASEPRI, r0
 800469c:	bc09      	pop	{r0, r3}
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	6808      	ldr	r0, [r1, #0]
 80046a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a6:	f01e 0f10 	tst.w	lr, #16
 80046aa:	bf08      	it	eq
 80046ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046b0:	f380 8809 	msr	PSP, r0
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst>:
 80046c0:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046e0:	f7ff fbec 	bl	8003ebc <xTaskIncrementTick>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <SysTick_Handler+0x3c>)
 80046ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <vPortSetupTimerInterrupt+0x34>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <vPortSetupTimerInterrupt+0x38>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <vPortSetupTimerInterrupt+0x3c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <vPortSetupTimerInterrupt+0x40>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <vPortSetupTimerInterrupt+0x44>)
 8004726:	3b01      	subs	r3, #1
 8004728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800472a:	4b04      	ldr	r3, [pc, #16]	; (800473c <vPortSetupTimerInterrupt+0x34>)
 800472c:	2207      	movs	r2, #7
 800472e:	601a      	str	r2, [r3, #0]
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	e000e010 	.word	0xe000e010
 8004740:	e000e018 	.word	0xe000e018
 8004744:	2000000c 	.word	0x2000000c
 8004748:	10624dd3 	.word	0x10624dd3
 800474c:	e000e014 	.word	0xe000e014

08004750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004760 <vPortEnableVFP+0x10>
 8004754:	6801      	ldr	r1, [r0, #0]
 8004756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800475a:	6001      	str	r1, [r0, #0]
 800475c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800475e:	bf00      	nop
 8004760:	e000ed88 	.word	0xe000ed88

08004764 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004770:	f7ff fafa 	bl	8003d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004774:	4b57      	ldr	r3, [pc, #348]	; (80048d4 <pvPortMalloc+0x170>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800477c:	f000 f90c 	bl	8004998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004780:	4b55      	ldr	r3, [pc, #340]	; (80048d8 <pvPortMalloc+0x174>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 808c 	bne.w	80048a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01c      	beq.n	80047ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004794:	2208      	movs	r2, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d013      	beq.n	80047ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f023 0307 	bic.w	r3, r3, #7
 80047ac:	3308      	adds	r3, #8
 80047ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <pvPortMalloc+0x6a>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e7fe      	b.n	80047cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d068      	beq.n	80048a6 <pvPortMalloc+0x142>
 80047d4:	4b41      	ldr	r3, [pc, #260]	; (80048dc <pvPortMalloc+0x178>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d863      	bhi.n	80048a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047de:	4b40      	ldr	r3, [pc, #256]	; (80048e0 <pvPortMalloc+0x17c>)
 80047e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047e2:	4b3f      	ldr	r3, [pc, #252]	; (80048e0 <pvPortMalloc+0x17c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047e8:	e004      	b.n	80047f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d903      	bls.n	8004806 <pvPortMalloc+0xa2>
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f1      	bne.n	80047ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004806:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <pvPortMalloc+0x170>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	429a      	cmp	r2, r3
 800480e:	d04a      	beq.n	80048a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2208      	movs	r2, #8
 8004816:	4413      	add	r3, r2
 8004818:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	1ad2      	subs	r2, r2, r3
 800482a:	2308      	movs	r3, #8
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	429a      	cmp	r2, r3
 8004830:	d91e      	bls.n	8004870 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <pvPortMalloc+0xf4>
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e7fe      	b.n	8004856 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800486a:	69b8      	ldr	r0, [r7, #24]
 800486c:	f000 f8f6 	bl	8004a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <pvPortMalloc+0x178>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <pvPortMalloc+0x178>)
 800487c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800487e:	4b17      	ldr	r3, [pc, #92]	; (80048dc <pvPortMalloc+0x178>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <pvPortMalloc+0x180>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d203      	bcs.n	8004892 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <pvPortMalloc+0x178>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <pvPortMalloc+0x180>)
 8004890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <pvPortMalloc+0x174>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	431a      	orrs	r2, r3
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048a6:	f7ff fa6d 	bl	8003d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <pvPortMalloc+0x164>
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e7fe      	b.n	80048c6 <pvPortMalloc+0x162>
	return pvReturn;
 80048c8:	69fb      	ldr	r3, [r7, #28]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3728      	adds	r7, #40	; 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20003dcc 	.word	0x20003dcc
 80048d8:	20003dd8 	.word	0x20003dd8
 80048dc:	20003dd0 	.word	0x20003dd0
 80048e0:	20003dc4 	.word	0x20003dc4
 80048e4:	20003dd4 	.word	0x20003dd4

080048e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d046      	beq.n	8004988 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048fa:	2308      	movs	r3, #8
 80048fc:	425b      	negs	r3, r3
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4413      	add	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	4b20      	ldr	r3, [pc, #128]	; (8004990 <vPortFree+0xa8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <vPortFree+0x42>
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e7fe      	b.n	8004928 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <vPortFree+0x5e>
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	e7fe      	b.n	8004944 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <vPortFree+0xa8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d019      	beq.n	8004988 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d115      	bne.n	8004988 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <vPortFree+0xa8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	43db      	mvns	r3, r3
 8004966:	401a      	ands	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800496c:	f7ff f9fc 	bl	8003d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <vPortFree+0xac>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4413      	add	r3, r2
 800497a:	4a06      	ldr	r2, [pc, #24]	; (8004994 <vPortFree+0xac>)
 800497c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800497e:	6938      	ldr	r0, [r7, #16]
 8004980:	f000 f86c 	bl	8004a5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004984:	f7ff f9fe 	bl	8003d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20003dd8 	.word	0x20003dd8
 8004994:	20003dd0 	.word	0x20003dd0

08004998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800499e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80049a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049a4:	4b27      	ldr	r3, [pc, #156]	; (8004a44 <prvHeapInit+0xac>)
 80049a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00c      	beq.n	80049cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3307      	adds	r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <prvHeapInit+0xac>)
 80049c8:	4413      	add	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <prvHeapInit+0xb0>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049d6:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <prvHeapInit+0xb0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049e4:	2208      	movs	r2, #8
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0307 	bic.w	r3, r3, #7
 80049f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <prvHeapInit+0xb4>)
 80049f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049fa:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <prvHeapInit+0xb4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a02:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <prvHeapInit+0xb4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	1ad2      	subs	r2, r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <prvHeapInit+0xb4>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <prvHeapInit+0xb8>)
 8004a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <prvHeapInit+0xbc>)
 8004a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <prvHeapInit+0xc0>)
 8004a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a36:	601a      	str	r2, [r3, #0]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	200001c4 	.word	0x200001c4
 8004a48:	20003dc4 	.word	0x20003dc4
 8004a4c:	20003dcc 	.word	0x20003dcc
 8004a50:	20003dd4 	.word	0x20003dd4
 8004a54:	20003dd0 	.word	0x20003dd0
 8004a58:	20003dd8 	.word	0x20003dd8

08004a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <prvInsertBlockIntoFreeList+0xac>)
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e002      	b.n	8004a70 <prvInsertBlockIntoFreeList+0x14>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d8f7      	bhi.n	8004a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4413      	add	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d108      	bne.n	8004a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	441a      	add	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	441a      	add	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d118      	bne.n	8004ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <prvInsertBlockIntoFreeList+0xb0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d00d      	beq.n	8004ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	441a      	add	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e008      	b.n	8004aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ada:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <prvInsertBlockIntoFreeList+0xb0>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e003      	b.n	8004aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d002      	beq.n	8004afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20003dc4 	.word	0x20003dc4
 8004b0c:	20003dcc 	.word	0x20003dcc

08004b10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a07      	ldr	r2, [pc, #28]	; (8004b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8004b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <vApplicationGetIdleTaskMemory+0x30>)
 8004b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2280      	movs	r2, #128	; 0x80
 8004b2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20003ddc 	.word	0x20003ddc
 8004b40:	20003e30 	.word	0x20003e30

08004b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b44:	b5b0      	push	{r4, r5, r7, lr}
 8004b46:	b090      	sub	sp, #64	; 0x40
 8004b48:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b4a:	f7fb ff05 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b4e:	f000 f873 	bl	8004c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b52:	f000 fac7 	bl	80050e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004b56:	f000 f8d7 	bl	8004d08 <MX_I2C1_Init>
  MX_SPI2_Init();
 8004b5a:	f000 f903 	bl	8004d64 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004b5e:	f000 f937 	bl	8004dd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004b62:	f000 f9c3 	bl	8004eec <MX_TIM2_Init>
  MX_TIM3_Init();
 8004b66:	f000 fa2f 	bl	8004fc8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004b6a:	f000 fa91 	bl	8005090 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
   tft_init();
 8004b6e:	f001 fc6d 	bl	800644c <tft_init>
   tft_puts_image(vht1);
 8004b72:	4825      	ldr	r0, [pc, #148]	; (8004c08 <main+0xc4>)
 8004b74:	f001 ff42 	bl	80069fc <tft_puts_image>
   HAL_Delay(3000);
 8004b78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004b7c:	f7fb ff2e 	bl	80009dc <HAL_Delay>
   tft_fill(0,0,320,240,BLACK);
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	23f0      	movs	r3, #240	; 0xf0
 8004b86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f001 feef 	bl	8006970 <tft_fill>
   HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8004b92:	2201      	movs	r2, #1
 8004b94:	491d      	ldr	r1, [pc, #116]	; (8004c0c <main+0xc8>)
 8004b96:	481e      	ldr	r0, [pc, #120]	; (8004c10 <main+0xcc>)
 8004b98:	f7fe f8bf 	bl	8002d1a <HAL_UART_Receive_IT>
   // set PWM cho tốc độ động cơ quạt là trung bình
      speed = 1;
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <main+0xd0>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
      power = 0;
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <main+0xd4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
      ctrmode = 0;
 8004ba8:	4b1c      	ldr	r3, [pc, #112]	; (8004c1c <main+0xd8>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
      filmode = 0;
 8004bae:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <main+0xdc>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
      nightmode = 0;
 8004bb4:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <main+0xe0>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <main+0xe4>)
 8004bbc:	f107 041c 	add.w	r4, r7, #28
 8004bc0:	461d      	mov	r5, r3
 8004bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8004bce:	f107 031c 	add.w	r3, r7, #28
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fe fd9a 	bl	800370e <osThreadCreate>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <main+0xe8>)
 8004bde:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask02, osPriorityIdle, 0, 128);
 8004be0:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <main+0xec>)
 8004be2:	463c      	mov	r4, r7
 8004be4:	461d      	mov	r5, r3
 8004be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe fd89 	bl	800370e <osThreadCreate>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <main+0xf0>)
 8004c00:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004c02:	f7fe fd7d 	bl	8003700 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004c06:	e7fe      	b.n	8004c06 <main+0xc2>
 8004c08:	08007900 	.word	0x08007900
 8004c0c:	20004148 	.word	0x20004148
 8004c10:	200041cc 	.word	0x200041cc
 8004c14:	20004304 	.word	0x20004304
 8004c18:	200040f0 	.word	0x200040f0
 8004c1c:	20004154 	.word	0x20004154
 8004c20:	20004380 	.word	0x20004380
 8004c24:	20004228 	.word	0x20004228
 8004c28:	0800783c 	.word	0x0800783c
 8004c2c:	200041a0 	.word	0x200041a0
 8004c30:	08007860 	.word	0x08007860
 8004c34:	20004308 	.word	0x20004308

08004c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b094      	sub	sp, #80	; 0x50
 8004c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c3e:	f107 0320 	add.w	r3, r7, #32
 8004c42:	2230      	movs	r2, #48	; 0x30
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 f957 	bl	8006efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c4c:	f107 030c 	add.w	r3, r7, #12
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	60da      	str	r2, [r3, #12]
 8004c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <SystemClock_Config+0xc8>)
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <SystemClock_Config+0xc8>)
 8004c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6c:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <SystemClock_Config+0xc8>)
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <SystemClock_Config+0xcc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <SystemClock_Config+0xcc>)
 8004c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <SystemClock_Config+0xcc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c94:	2302      	movs	r3, #2
 8004c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004ca8:	2310      	movs	r3, #16
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004cac:	23c0      	movs	r3, #192	; 0xc0
 8004cae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cb8:	f107 0320 	add.w	r3, r7, #32
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fc fa77 	bl	80011b0 <HAL_RCC_OscConfig>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004cc8:	f001 f89e 	bl	8005e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ccc:	230f      	movs	r3, #15
 8004cce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fc fca3 	bl	8001634 <HAL_RCC_ClockConfig>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004cf4:	f001 f888 	bl	8005e08 <Error_Handler>
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3750      	adds	r7, #80	; 0x50
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40023800 	.word	0x40023800
 8004d04:	40007000 	.word	0x40007000

08004d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d0e:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <MX_I2C1_Init+0x54>)
 8004d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d14:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <MX_I2C1_Init+0x58>)
 8004d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004d1e:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004d44:	4804      	ldr	r0, [pc, #16]	; (8004d58 <MX_I2C1_Init+0x50>)
 8004d46:	f7fc f90b 	bl	8000f60 <HAL_I2C_Init>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004d50:	f001 f85a 	bl	8005e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004d54:	bf00      	nop
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	200040f4 	.word	0x200040f4
 8004d5c:	40005400 	.word	0x40005400
 8004d60:	000186a0 	.word	0x000186a0

08004d64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004d68:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d6a:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <MX_SPI2_Init+0x68>)
 8004d6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004d6e:	4b16      	ldr	r3, [pc, #88]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d82:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004da2:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da8:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004db0:	220a      	movs	r2, #10
 8004db2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <MX_SPI2_Init+0x64>)
 8004db6:	f7fc fe37 	bl	8001a28 <HAL_SPI_Init>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004dc0:	f001 f822 	bl	8005e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004dc4:	bf00      	nop
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20004098 	.word	0x20004098
 8004dcc:	40003800 	.word	0x40003800

08004dd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b092      	sub	sp, #72	; 0x48
 8004dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	609a      	str	r2, [r3, #8]
 8004dec:	60da      	str	r2, [r3, #12]
 8004dee:	611a      	str	r2, [r3, #16]
 8004df0:	615a      	str	r2, [r3, #20]
 8004df2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	2220      	movs	r2, #32
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 f87d 	bl	8006efa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e00:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e02:	4a39      	ldr	r2, [pc, #228]	; (8004ee8 <MX_TIM1_Init+0x118>)
 8004e04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004e06:	4b37      	ldr	r3, [pc, #220]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e0c:	4b35      	ldr	r3, [pc, #212]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8004e12:	4b34      	ldr	r3, [pc, #208]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e18:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e24:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e2a:	482e      	ldr	r0, [pc, #184]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e2c:	f7fd f9b7 	bl	800219e <HAL_TIM_PWM_Init>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8004e36:	f000 ffe7 	bl	8005e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e46:	4619      	mov	r1, r3
 8004e48:	4826      	ldr	r0, [pc, #152]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e4a:	f7fd fdd5 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8004e54:	f000 ffd8 	bl	8005e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e58:	2360      	movs	r3, #96	; 0x60
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e64:	2300      	movs	r3, #0
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e70:	2300      	movs	r3, #0
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4819      	ldr	r0, [pc, #100]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e7e:	f7fd fac1 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8004e88:	f000 ffbe 	bl	8005e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e90:	220c      	movs	r2, #12
 8004e92:	4619      	mov	r1, r3
 8004e94:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004e96:	f7fd fab5 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8004ea0:	f000 ffb2 	bl	8005e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ebc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4807      	ldr	r0, [pc, #28]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004ec8:	f7fd fddb 	bl	8002a82 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004ed2:	f000 ff99 	bl	8005e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ed6:	4803      	ldr	r0, [pc, #12]	; (8004ee4 <MX_TIM1_Init+0x114>)
 8004ed8:	f001 f8dc 	bl	8006094 <HAL_TIM_MspPostInit>

}
 8004edc:	bf00      	nop
 8004ede:	3748      	adds	r7, #72	; 0x48
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	2000424c 	.word	0x2000424c
 8004ee8:	40010000 	.word	0x40010000

08004eec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ef2:	f107 0320 	add.w	r3, r7, #32
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004efc:	1d3b      	adds	r3, r7, #4
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	605a      	str	r2, [r3, #4]
 8004f04:	609a      	str	r2, [r3, #8]
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	611a      	str	r2, [r3, #16]
 8004f0a:	615a      	str	r2, [r3, #20]
 8004f0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f0e:	4b2d      	ldr	r3, [pc, #180]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f1c:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004f22:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f28:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f2e:	4b25      	ldr	r3, [pc, #148]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004f34:	4823      	ldr	r0, [pc, #140]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f36:	f7fd f932 	bl	800219e <HAL_TIM_PWM_Init>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004f40:	f000 ff62 	bl	8005e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f44:	2300      	movs	r3, #0
 8004f46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f4c:	f107 0320 	add.w	r3, r7, #32
 8004f50:	4619      	mov	r1, r3
 8004f52:	481c      	ldr	r0, [pc, #112]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f54:	f7fd fd50 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8004f5e:	f000 ff53 	bl	8005e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f62:	2360      	movs	r3, #96	; 0x60
 8004f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f72:	1d3b      	adds	r3, r7, #4
 8004f74:	2200      	movs	r2, #0
 8004f76:	4619      	mov	r1, r3
 8004f78:	4812      	ldr	r0, [pc, #72]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f7a:	f7fd fa43 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004f84:	f000 ff40 	bl	8005e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f88:	1d3b      	adds	r3, r7, #4
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	480d      	ldr	r0, [pc, #52]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004f90:	f7fd fa38 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004f9a:	f000 ff35 	bl	8005e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4807      	ldr	r0, [pc, #28]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004fa6:	f7fd fa2d 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8004fb0:	f000 ff2a 	bl	8005e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004fb4:	4803      	ldr	r0, [pc, #12]	; (8004fc4 <MX_TIM2_Init+0xd8>)
 8004fb6:	f001 f86d 	bl	8006094 <HAL_TIM_MspPostInit>

}
 8004fba:	bf00      	nop
 8004fbc:	3728      	adds	r7, #40	; 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	2000430c 	.word	0x2000430c

08004fc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fce:	f107 0320 	add.w	r3, r7, #32
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	609a      	str	r2, [r3, #8]
 8004fe2:	60da      	str	r2, [r3, #12]
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	615a      	str	r2, [r3, #20]
 8004fe8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <MX_TIM3_Init+0xc0>)
 8004fec:	4a27      	ldr	r2, [pc, #156]	; (800508c <MX_TIM3_Init+0xc4>)
 8004fee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004ff0:	4b25      	ldr	r3, [pc, #148]	; (8005088 <MX_TIM3_Init+0xc0>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <MX_TIM3_Init+0xc0>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8004ffc:	4b22      	ldr	r3, [pc, #136]	; (8005088 <MX_TIM3_Init+0xc0>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <MX_TIM3_Init+0xc0>)
 8005004:	2200      	movs	r2, #0
 8005006:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005008:	4b1f      	ldr	r3, [pc, #124]	; (8005088 <MX_TIM3_Init+0xc0>)
 800500a:	2200      	movs	r2, #0
 800500c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800500e:	481e      	ldr	r0, [pc, #120]	; (8005088 <MX_TIM3_Init+0xc0>)
 8005010:	f7fd f8c5 	bl	800219e <HAL_TIM_PWM_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800501a:	f000 fef5 	bl	8005e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005026:	f107 0320 	add.w	r3, r7, #32
 800502a:	4619      	mov	r1, r3
 800502c:	4816      	ldr	r0, [pc, #88]	; (8005088 <MX_TIM3_Init+0xc0>)
 800502e:	f7fd fce3 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8005038:	f000 fee6 	bl	8005e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800503c:	2360      	movs	r3, #96	; 0x60
 800503e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800504c:	1d3b      	adds	r3, r7, #4
 800504e:	2200      	movs	r2, #0
 8005050:	4619      	mov	r1, r3
 8005052:	480d      	ldr	r0, [pc, #52]	; (8005088 <MX_TIM3_Init+0xc0>)
 8005054:	f7fd f9d6 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800505e:	f000 fed3 	bl	8005e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005062:	1d3b      	adds	r3, r7, #4
 8005064:	2204      	movs	r2, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4807      	ldr	r0, [pc, #28]	; (8005088 <MX_TIM3_Init+0xc0>)
 800506a:	f7fd f9cb 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005074:	f000 fec8 	bl	8005e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005078:	4803      	ldr	r0, [pc, #12]	; (8005088 <MX_TIM3_Init+0xc0>)
 800507a:	f001 f80b 	bl	8006094 <HAL_TIM_MspPostInit>

}
 800507e:	bf00      	nop
 8005080:	3728      	adds	r7, #40	; 0x28
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20004158 	.word	0x20004158
 800508c:	40000400 	.word	0x40000400

08005090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005094:	4b11      	ldr	r3, [pc, #68]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 8005096:	4a12      	ldr	r2, [pc, #72]	; (80050e0 <MX_USART1_UART_Init+0x50>)
 8005098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 800509c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 80050b6:	220c      	movs	r2, #12
 80050b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 80050bc:	2200      	movs	r2, #0
 80050be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050c6:	4805      	ldr	r0, [pc, #20]	; (80050dc <MX_USART1_UART_Init+0x4c>)
 80050c8:	f7fd fd41 	bl	8002b4e <HAL_UART_Init>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80050d2:	f000 fe99 	bl	8005e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	200041cc 	.word	0x200041cc
 80050e0:	40011000 	.word	0x40011000

080050e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ea:	f107 0314 	add.w	r3, r7, #20
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	605a      	str	r2, [r3, #4]
 80050f4:	609a      	str	r2, [r3, #8]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	4b34      	ldr	r3, [pc, #208]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	4a33      	ldr	r2, [pc, #204]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005104:	f043 0304 	orr.w	r3, r3, #4
 8005108:	6313      	str	r3, [r2, #48]	; 0x30
 800510a:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <MX_GPIO_Init+0xec>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	4b2d      	ldr	r3, [pc, #180]	; (80051d0 <MX_GPIO_Init+0xec>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	4a2c      	ldr	r2, [pc, #176]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	6313      	str	r3, [r2, #48]	; 0x30
 8005126:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <MX_GPIO_Init+0xec>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6313      	str	r3, [r2, #48]	; 0x30
 8005142:	4b23      	ldr	r3, [pc, #140]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	6313      	str	r3, [r2, #48]	; 0x30
 800515e:	4b1c      	ldr	r3, [pc, #112]	; (80051d0 <MX_GPIO_Init+0xec>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	607b      	str	r3, [r7, #4]
 8005168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800516a:	2200      	movs	r2, #0
 800516c:	f242 0130 	movw	r1, #8240	; 0x2030
 8005170:	4818      	ldr	r0, [pc, #96]	; (80051d4 <MX_GPIO_Init+0xf0>)
 8005172:	f7fb fedb 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8005176:	2200      	movs	r2, #0
 8005178:	2103      	movs	r1, #3
 800517a:	4817      	ldr	r0, [pc, #92]	; (80051d8 <MX_GPIO_Init+0xf4>)
 800517c:	f7fb fed6 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_LED_Pin|LCD_DC_RS_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8005180:	2201      	movs	r2, #1
 8005182:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8005186:	4813      	ldr	r0, [pc, #76]	; (80051d4 <MX_GPIO_Init+0xf0>)
 8005188:	f7fb fed0 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 LCD_LED_Pin 
                           LCD_DC_RS_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|LCD_LED_Pin 
 800518c:	f242 33f0 	movw	r3, #9200	; 0x23f0
 8005190:	617b      	str	r3, [r7, #20]
                          |LCD_DC_RS_Pin|LCD_RESET_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005192:	2301      	movs	r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519a:	2300      	movs	r3, #0
 800519c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800519e:	f107 0314 	add.w	r3, r7, #20
 80051a2:	4619      	mov	r1, r3
 80051a4:	480b      	ldr	r0, [pc, #44]	; (80051d4 <MX_GPIO_Init+0xf0>)
 80051a6:	f7fb fd3f 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80051aa:	2303      	movs	r3, #3
 80051ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b6:	2300      	movs	r3, #0
 80051b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ba:	f107 0314 	add.w	r3, r7, #20
 80051be:	4619      	mov	r1, r3
 80051c0:	4805      	ldr	r0, [pc, #20]	; (80051d8 <MX_GPIO_Init+0xf4>)
 80051c2:	f7fb fd31 	bl	8000c28 <HAL_GPIO_Init>

}
 80051c6:	bf00      	nop
 80051c8:	3728      	adds	r7, #40	; 0x28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40020800 	.word	0x40020800
 80051d8:	40020400 	.word	0x40020400

080051dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART1)  //Xét UART nhận dữ liệu
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <HAL_UART_RxCpltCallback+0x78>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d12d      	bne.n	800524a <HAL_UART_RxCpltCallback+0x6e>
        {
        if (Rx_indx==0 && Transfer_cplt==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_buffer trước khi nhận dữ liệu mới
 80051ee:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HAL_UART_RxCpltCallback+0x7c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d110      	bne.n	8005218 <HAL_UART_RxCpltCallback+0x3c>
 80051f6:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_UART_RxCpltCallback+0x80>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10c      	bne.n	8005218 <HAL_UART_RxCpltCallback+0x3c>
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
 8005202:	e006      	b.n	8005212 <HAL_UART_RxCpltCallback+0x36>
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	4a16      	ldr	r2, [pc, #88]	; (8005260 <HAL_UART_RxCpltCallback+0x84>)
 8005208:	2100      	movs	r1, #0
 800520a:	54d1      	strb	r1, [r2, r3]
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	3301      	adds	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	2b63      	cmp	r3, #99	; 0x63
 8005216:	d9f5      	bls.n	8005204 <HAL_UART_RxCpltCallback+0x28>

        if (Rx_data[0]!='\n') //Nếu nhận dữ liệu là khác dấu xuống dòng
 8005218:	4b12      	ldr	r3, [pc, #72]	; (8005264 <HAL_UART_RxCpltCallback+0x88>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b0a      	cmp	r3, #10
 800521e:	d009      	beq.n	8005234 <HAL_UART_RxCpltCallback+0x58>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //thêm dữ liệu vào Rx_Buffer
 8005220:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <HAL_UART_RxCpltCallback+0x7c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	490c      	ldr	r1, [pc, #48]	; (8005258 <HAL_UART_RxCpltCallback+0x7c>)
 8005228:	600a      	str	r2, [r1, #0]
 800522a:	4a0e      	ldr	r2, [pc, #56]	; (8005264 <HAL_UART_RxCpltCallback+0x88>)
 800522c:	7811      	ldrb	r1, [r2, #0]
 800522e:	4a0c      	ldr	r2, [pc, #48]	; (8005260 <HAL_UART_RxCpltCallback+0x84>)
 8005230:	54d1      	strb	r1, [r2, r3]
 8005232:	e005      	b.n	8005240 <HAL_UART_RxCpltCallback+0x64>
            }
        else            //nếu là dấu xuống dòng \n thì hoàn thành việc đọc 1 khung truyền
            {
            Rx_indx=0;
 8005234:	4b08      	ldr	r3, [pc, #32]	; (8005258 <HAL_UART_RxCpltCallback+0x7c>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
            Transfer_cplt=1;//Cờ báo hiệu đã chuyển dữ liệu xong và tiến hành đọc dữ liệu
 800523a:	4b08      	ldr	r3, [pc, #32]	; (800525c <HAL_UART_RxCpltCallback+0x80>)
 800523c:	2201      	movs	r2, #1
 800523e:	701a      	strb	r2, [r3, #0]
            }

        HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //Kích hoạt ngắt UART mỗi data nhận được
 8005240:	2201      	movs	r2, #1
 8005242:	4908      	ldr	r1, [pc, #32]	; (8005264 <HAL_UART_RxCpltCallback+0x88>)
 8005244:	4808      	ldr	r0, [pc, #32]	; (8005268 <HAL_UART_RxCpltCallback+0x8c>)
 8005246:	f7fd fd68 	bl	8002d1a <HAL_UART_Receive_IT>
        }

}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40011000 	.word	0x40011000
 8005258:	20004074 	.word	0x20004074
 800525c:	20004091 	.word	0x20004091
 8005260:	2000428c 	.word	0x2000428c
 8005264:	20004148 	.word	0x20004148
 8005268:	200041cc 	.word	0x200041cc

0800526c <StartTask1>:




void StartTask1(void const * argument)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af02      	add	r7, sp, #8
 8005272:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	count++;
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <StartTask1+0x68>)
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <StartTask1+0x68>)
 800527e:	801a      	strh	r2, [r3, #0]
	sprintf(buffer5,"%d",count);
 8005280:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <StartTask1+0x68>)
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	4914      	ldr	r1, [pc, #80]	; (80052d8 <StartTask1+0x6c>)
 8005288:	4814      	ldr	r0, [pc, #80]	; (80052dc <StartTask1+0x70>)
 800528a:	f001 fe3f 	bl	8006f0c <siprintf>
	CheckUART();
 800528e:	f000 fc2d 	bl	8005aec <CheckUART>
	POINT_COLOR=CYAN;
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <StartTask1+0x74>)
 8005294:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005298:	801a      	strh	r2, [r3, #0]
	tft_fill(0,0,320,240,BLACK);
 800529a:	2300      	movs	r3, #0
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	23f0      	movs	r3, #240	; 0xf0
 80052a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052a4:	2100      	movs	r1, #0
 80052a6:	2000      	movs	r0, #0
 80052a8:	f001 fb62 	bl	8006970 <tft_fill>
	tft_puts26x48(58,3,(int8_t*)" Viettel",TFT_STRING_MODE_NO_BACKGROUND);
 80052ac:	2301      	movs	r3, #1
 80052ae:	4a0d      	ldr	r2, [pc, #52]	; (80052e4 <StartTask1+0x78>)
 80052b0:	2103      	movs	r1, #3
 80052b2:	203a      	movs	r0, #58	; 0x3a
 80052b4:	f001 fa54 	bl	8006760 <tft_puts26x48>
	tft_puts26x48(58,5,(int8_t*)" Viettel",TFT_STRING_MODE_NO_BACKGROUND);
 80052b8:	2301      	movs	r3, #1
 80052ba:	4a0a      	ldr	r2, [pc, #40]	; (80052e4 <StartTask1+0x78>)
 80052bc:	2105      	movs	r1, #5
 80052be:	203a      	movs	r0, #58	; 0x3a
 80052c0:	f001 fa4e 	bl	8006760 <tft_puts26x48>
	CheckUART();
 80052c4:	f000 fc12 	bl	8005aec <CheckUART>
    osDelay(1000);
 80052c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052cc:	f7fe fa6b 	bl	80037a6 <osDelay>
	count++;
 80052d0:	e7d0      	b.n	8005274 <StartTask1+0x8>
 80052d2:	bf00      	nop
 80052d4:	20004030 	.word	0x20004030
 80052d8:	0800787c 	.word	0x0800787c
 80052dc:	20004230 	.word	0x20004230
 80052e0:	200043c6 	.word	0x200043c6
 80052e4:	08007880 	.word	0x08007880

080052e8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	tft_fill(0,0,320,240,BLACK);
 80052f0:	2300      	movs	r3, #0
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	23f0      	movs	r3, #240	; 0xf0
 80052f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052fa:	2100      	movs	r1, #0
 80052fc:	2000      	movs	r0, #0
 80052fe:	f001 fb37 	bl	8006970 <tft_fill>
	POINT_COLOR=CYAN;
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <StartTask02+0x64>)
 8005304:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005308:	801a      	strh	r2, [r3, #0]
	IAQform();
 800530a:	f000 f829 	bl	8005360 <IAQform>
	tft_puts26x48(160,90,(int8_t*)buffer5,TFT_STRING_MODE_BACKGROUND);
 800530e:	2300      	movs	r3, #0
 8005310:	4a0f      	ldr	r2, [pc, #60]	; (8005350 <StartTask02+0x68>)
 8005312:	215a      	movs	r1, #90	; 0x5a
 8005314:	20a0      	movs	r0, #160	; 0xa0
 8005316:	f001 fa23 	bl	8006760 <tft_puts26x48>
	//tft_puts18x32(160,3,(int8_t*)"PRODUCTS",TFT_STRING_MODE_NO_BACKGROUND);
	if (count >= 50 && count < 60){
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <StartTask02+0x6c>)
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	2b31      	cmp	r3, #49	; 0x31
 8005320:	d90e      	bls.n	8005340 <StartTask02+0x58>
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <StartTask02+0x6c>)
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	2b3b      	cmp	r3, #59	; 0x3b
 8005328:	d80a      	bhi.n	8005340 <StartTask02+0x58>
		Convertvalue();
 800532a:	f000 f857 	bl	80053dc <Convertvalue>
		FrameUART();
 800532e:	f000 f92b 	bl	8005588 <FrameUART>
		HAL_UART_Transmit(&huart1, (char *) &frame, sizeof(frame), HAL_MAX_DELAY);
 8005332:	f04f 33ff 	mov.w	r3, #4294967295
 8005336:	223c      	movs	r2, #60	; 0x3c
 8005338:	4907      	ldr	r1, [pc, #28]	; (8005358 <StartTask02+0x70>)
 800533a:	4808      	ldr	r0, [pc, #32]	; (800535c <StartTask02+0x74>)
 800533c:	f7fd fc54 	bl	8002be8 <HAL_UART_Transmit>
	}
    osDelay(1000);
 8005340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005344:	f7fe fa2f 	bl	80037a6 <osDelay>
	tft_fill(0,0,320,240,BLACK);
 8005348:	e7d2      	b.n	80052f0 <StartTask02+0x8>
 800534a:	bf00      	nop
 800534c:	200043c6 	.word	0x200043c6
 8005350:	20004230 	.word	0x20004230
 8005354:	20004030 	.word	0x20004030
 8005358:	200042c8 	.word	0x200042c8
 800535c:	200041cc 	.word	0x200041cc

08005360 <IAQform>:
  }
  /* USER CODE END StartTask02 */
}

void IAQform(void){
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0

	  tft_draw_circle(150,119,87);
 8005364:	2257      	movs	r2, #87	; 0x57
 8005366:	2177      	movs	r1, #119	; 0x77
 8005368:	2096      	movs	r0, #150	; 0x96
 800536a:	f001 fa37 	bl	80067dc <tft_draw_circle>
	  tft_draw_circle(150,119,88);
 800536e:	2258      	movs	r2, #88	; 0x58
 8005370:	2177      	movs	r1, #119	; 0x77
 8005372:	2096      	movs	r0, #150	; 0x96
 8005374:	f001 fa32 	bl	80067dc <tft_draw_circle>
	  tft_draw_circle(150,119,89);
 8005378:	2259      	movs	r2, #89	; 0x59
 800537a:	2177      	movs	r1, #119	; 0x77
 800537c:	2096      	movs	r0, #150	; 0x96
 800537e:	f001 fa2d 	bl	80067dc <tft_draw_circle>
	  tft_draw_circle(150,119,90);
 8005382:	225a      	movs	r2, #90	; 0x5a
 8005384:	2177      	movs	r1, #119	; 0x77
 8005386:	2096      	movs	r0, #150	; 0x96
 8005388:	f001 fa28 	bl	80067dc <tft_draw_circle>
	  tft_draw_circle(150,119,91);
 800538c:	225b      	movs	r2, #91	; 0x5b
 800538e:	2177      	movs	r1, #119	; 0x77
 8005390:	2096      	movs	r0, #150	; 0x96
 8005392:	f001 fa23 	bl	80067dc <tft_draw_circle>
	  tft_draw_circle(150,119,92);
 8005396:	225c      	movs	r2, #92	; 0x5c
 8005398:	2177      	movs	r1, #119	; 0x77
 800539a:	2096      	movs	r0, #150	; 0x96
 800539c:	f001 fa1e 	bl	80067dc <tft_draw_circle>


	  tft_puts26x48(100,80,(int8_t*)"IAQ",TFT_STRING_MODE_NO_BACKGROUND);
 80053a0:	2301      	movs	r3, #1
 80053a2:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <IAQform+0x70>)
 80053a4:	2150      	movs	r1, #80	; 0x50
 80053a6:	2064      	movs	r0, #100	; 0x64
 80053a8:	f001 f9da 	bl	8006760 <tft_puts26x48>
	  tft_puts26x48(100,81,(int8_t*)"IAQ",TFT_STRING_MODE_NO_BACKGROUND);
 80053ac:	2301      	movs	r3, #1
 80053ae:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <IAQform+0x70>)
 80053b0:	2151      	movs	r1, #81	; 0x51
 80053b2:	2064      	movs	r0, #100	; 0x64
 80053b4:	f001 f9d4 	bl	8006760 <tft_puts26x48>

	  POINT_COLOR=GBLUE;
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <IAQform+0x74>)
 80053ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80053be:	801a      	strh	r2, [r3, #0]
	  tft_puts8x16(17,3,(int8_t*)"VIETTEL HIGH TECHNOLOGY",TFT_STRING_MODE_NO_BACKGROUND);
 80053c0:	2301      	movs	r3, #1
 80053c2:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <IAQform+0x78>)
 80053c4:	2103      	movs	r1, #3
 80053c6:	2011      	movs	r0, #17
 80053c8:	f001 f97c 	bl	80066c4 <tft_puts8x16>
}
 80053cc:	bf00      	nop
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	0800788c 	.word	0x0800788c
 80053d4:	200043c6 	.word	0x200043c6
 80053d8:	08007890 	.word	0x08007890

080053dc <Convertvalue>:
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void Convertvalue(void){
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0

	PM25 = 22.33;
 80053e2:	4b5b      	ldr	r3, [pc, #364]	; (8005550 <Convertvalue+0x174>)
 80053e4:	4a5b      	ldr	r2, [pc, #364]	; (8005554 <Convertvalue+0x178>)
 80053e6:	601a      	str	r2, [r3, #0]
	tmpIntPM1 = (int)PM25;
 80053e8:	4b59      	ldr	r3, [pc, #356]	; (8005550 <Convertvalue+0x174>)
 80053ea:	edd3 7a00 	vldr	s15, [r3]
 80053ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f2:	ee17 2a90 	vmov	r2, s15
 80053f6:	4b58      	ldr	r3, [pc, #352]	; (8005558 <Convertvalue+0x17c>)
 80053f8:	601a      	str	r2, [r3, #0]
	float tmpFPM = PM25 - tmpIntPM1;
 80053fa:	4b55      	ldr	r3, [pc, #340]	; (8005550 <Convertvalue+0x174>)
 80053fc:	ed93 7a00 	vldr	s14, [r3]
 8005400:	4b55      	ldr	r3, [pc, #340]	; (8005558 <Convertvalue+0x17c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800540c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005410:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpIntPM2 = trunc(tmpFPM * 100);
 8005414:	edd7 7a03 	vldr	s15, [r7, #12]
 8005418:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800555c <Convertvalue+0x180>
 800541c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005420:	ee17 0a90 	vmov	r0, s15
 8005424:	f7fb f898 	bl	8000558 <__aeabi_f2d>
 8005428:	4603      	mov	r3, r0
 800542a:	460c      	mov	r4, r1
 800542c:	ec44 3b10 	vmov	d0, r3, r4
 8005430:	f002 f9b6 	bl	80077a0 <trunc>
 8005434:	ec54 3b10 	vmov	r3, r4, d0
 8005438:	4618      	mov	r0, r3
 800543a:	4621      	mov	r1, r4
 800543c:	f7fb f8e4 	bl	8000608 <__aeabi_d2iz>
 8005440:	4602      	mov	r2, r0
 8005442:	4b47      	ldr	r3, [pc, #284]	; (8005560 <Convertvalue+0x184>)
 8005444:	601a      	str	r2, [r3, #0]
	temperature = 9977;
 8005446:	4b47      	ldr	r3, [pc, #284]	; (8005564 <Convertvalue+0x188>)
 8005448:	f242 62f9 	movw	r2, #9977	; 0x26f9
 800544c:	601a      	str	r2, [r3, #0]
	temp = (float)(temperature/1000.0f);
 800544e:	4b45      	ldr	r3, [pc, #276]	; (8005564 <Convertvalue+0x188>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800545a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8005568 <Convertvalue+0x18c>
 800545e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005462:	4b42      	ldr	r3, [pc, #264]	; (800556c <Convertvalue+0x190>)
 8005464:	edc3 7a00 	vstr	s15, [r3]
	tmpIntte1 = (int)temp;
 8005468:	4b40      	ldr	r3, [pc, #256]	; (800556c <Convertvalue+0x190>)
 800546a:	edd3 7a00 	vldr	s15, [r3]
 800546e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005472:	ee17 2a90 	vmov	r2, s15
 8005476:	4b3e      	ldr	r3, [pc, #248]	; (8005570 <Convertvalue+0x194>)
 8005478:	601a      	str	r2, [r3, #0]
	float tmpT = temp - tmpIntte1;
 800547a:	4b3c      	ldr	r3, [pc, #240]	; (800556c <Convertvalue+0x190>)
 800547c:	ed93 7a00 	vldr	s14, [r3]
 8005480:	4b3b      	ldr	r3, [pc, #236]	; (8005570 <Convertvalue+0x194>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800548c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005490:	edc7 7a02 	vstr	s15, [r7, #8]
	tmpIntte2 = trunc(tmpT * 100);
 8005494:	edd7 7a02 	vldr	s15, [r7, #8]
 8005498:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800555c <Convertvalue+0x180>
 800549c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054a0:	ee17 0a90 	vmov	r0, s15
 80054a4:	f7fb f858 	bl	8000558 <__aeabi_f2d>
 80054a8:	4603      	mov	r3, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	ec44 3b10 	vmov	d0, r3, r4
 80054b0:	f002 f976 	bl	80077a0 <trunc>
 80054b4:	ec54 3b10 	vmov	r3, r4, d0
 80054b8:	4618      	mov	r0, r3
 80054ba:	4621      	mov	r1, r4
 80054bc:	f7fb f8a4 	bl	8000608 <__aeabi_d2iz>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b2c      	ldr	r3, [pc, #176]	; (8005574 <Convertvalue+0x198>)
 80054c4:	601a      	str	r2, [r3, #0]
	humidity = 9876;
 80054c6:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <Convertvalue+0x19c>)
 80054c8:	f242 6294 	movw	r2, #9876	; 0x2694
 80054cc:	601a      	str	r2, [r3, #0]
	hum = (float)(humidity/1000.0f);
 80054ce:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <Convertvalue+0x19c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054da:	eddf 6a23 	vldr	s13, [pc, #140]	; 8005568 <Convertvalue+0x18c>
 80054de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054e2:	4b26      	ldr	r3, [pc, #152]	; (800557c <Convertvalue+0x1a0>)
 80054e4:	edc3 7a00 	vstr	s15, [r3]
	tmpInthu1 = (int) hum;
 80054e8:	4b24      	ldr	r3, [pc, #144]	; (800557c <Convertvalue+0x1a0>)
 80054ea:	edd3 7a00 	vldr	s15, [r3]
 80054ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f2:	ee17 2a90 	vmov	r2, s15
 80054f6:	4b22      	ldr	r3, [pc, #136]	; (8005580 <Convertvalue+0x1a4>)
 80054f8:	601a      	str	r2, [r3, #0]
	float tmpH = hum - tmpInthu1;
 80054fa:	4b20      	ldr	r3, [pc, #128]	; (800557c <Convertvalue+0x1a0>)
 80054fc:	ed93 7a00 	vldr	s14, [r3]
 8005500:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <Convertvalue+0x1a4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005510:	edc7 7a01 	vstr	s15, [r7, #4]
	tmpInthu2 = trunc(tmpH * 100);
 8005514:	edd7 7a01 	vldr	s15, [r7, #4]
 8005518:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800555c <Convertvalue+0x180>
 800551c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005520:	ee17 0a90 	vmov	r0, s15
 8005524:	f7fb f818 	bl	8000558 <__aeabi_f2d>
 8005528:	4603      	mov	r3, r0
 800552a:	460c      	mov	r4, r1
 800552c:	ec44 3b10 	vmov	d0, r3, r4
 8005530:	f002 f936 	bl	80077a0 <trunc>
 8005534:	ec54 3b10 	vmov	r3, r4, d0
 8005538:	4618      	mov	r0, r3
 800553a:	4621      	mov	r1, r4
 800553c:	f7fb f864 	bl	8000608 <__aeabi_d2iz>
 8005540:	4602      	mov	r2, r0
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <Convertvalue+0x1a8>)
 8005544:	601a      	str	r2, [r3, #0]
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	2000408c 	.word	0x2000408c
 8005554:	41b2a3d7 	.word	0x41b2a3d7
 8005558:	20004378 	.word	0x20004378
 800555c:	42c80000 	.word	0x42c80000
 8005560:	2000419c 	.word	0x2000419c
 8005564:	20004150 	.word	0x20004150
 8005568:	447a0000 	.word	0x447a0000
 800556c:	2000414c 	.word	0x2000414c
 8005570:	20004198 	.word	0x20004198
 8005574:	20004224 	.word	0x20004224
 8005578:	200041bc 	.word	0x200041bc
 800557c:	20004088 	.word	0x20004088
 8005580:	200041a4 	.word	0x200041a4
 8005584:	20004248 	.word	0x20004248

08005588 <FrameUART>:

/* Tạo Khung truyền với các giá trị lấy từ cảm biến và động cơ */
void FrameUART(void){
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
		itoa(tmpIntte1,(char*)tempe1,10);
 800558c:	4bbc      	ldr	r3, [pc, #752]	; (8005880 <FrameUART+0x2f8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	220a      	movs	r2, #10
 8005592:	49bc      	ldr	r1, [pc, #752]	; (8005884 <FrameUART+0x2fc>)
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fca3 	bl	8006ee0 <itoa>
		itoa(tmpIntte2,(char*)tempe2,10);
 800559a:	4bbb      	ldr	r3, [pc, #748]	; (8005888 <FrameUART+0x300>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	220a      	movs	r2, #10
 80055a0:	49ba      	ldr	r1, [pc, #744]	; (800588c <FrameUART+0x304>)
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fc9c 	bl	8006ee0 <itoa>
		itoa(tmpInthu1,(char*)humi1,10);
 80055a8:	4bb9      	ldr	r3, [pc, #740]	; (8005890 <FrameUART+0x308>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	220a      	movs	r2, #10
 80055ae:	49b9      	ldr	r1, [pc, #740]	; (8005894 <FrameUART+0x30c>)
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 fc95 	bl	8006ee0 <itoa>
		itoa(tmpInthu2,(char*)humi2,10);
 80055b6:	4bb8      	ldr	r3, [pc, #736]	; (8005898 <FrameUART+0x310>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	220a      	movs	r2, #10
 80055bc:	49b7      	ldr	r1, [pc, #732]	; (800589c <FrameUART+0x314>)
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fc8e 	bl	8006ee0 <itoa>
		itoa(co2_ppm,(char*)CO2,10);
 80055c4:	4bb6      	ldr	r3, [pc, #728]	; (80058a0 <FrameUART+0x318>)
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	220a      	movs	r2, #10
 80055ca:	49b6      	ldr	r1, [pc, #728]	; (80058a4 <FrameUART+0x31c>)
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 fc87 	bl	8006ee0 <itoa>
		itoa(tvoc_ppb,(char*)VOC,10);
 80055d2:	4bb5      	ldr	r3, [pc, #724]	; (80058a8 <FrameUART+0x320>)
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	220a      	movs	r2, #10
 80055d8:	49b4      	ldr	r1, [pc, #720]	; (80058ac <FrameUART+0x324>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fc80 	bl	8006ee0 <itoa>
		itoa(tmpIntPM1,(char*)PM251,10);
 80055e0:	4bb3      	ldr	r3, [pc, #716]	; (80058b0 <FrameUART+0x328>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	220a      	movs	r2, #10
 80055e6:	49b3      	ldr	r1, [pc, #716]	; (80058b4 <FrameUART+0x32c>)
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 fc79 	bl	8006ee0 <itoa>
		itoa(tmpIntPM2,(char*)PM252,10);
 80055ee:	4bb2      	ldr	r3, [pc, #712]	; (80058b8 <FrameUART+0x330>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	220a      	movs	r2, #10
 80055f4:	49b1      	ldr	r1, [pc, #708]	; (80058bc <FrameUART+0x334>)
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 fc72 	bl	8006ee0 <itoa>

	   strcpy((char *) frame, (char *) "TE");
 80055fc:	4bb0      	ldr	r3, [pc, #704]	; (80058c0 <FrameUART+0x338>)
 80055fe:	4ab1      	ldr	r2, [pc, #708]	; (80058c4 <FrameUART+0x33c>)
 8005600:	8811      	ldrh	r1, [r2, #0]
 8005602:	7892      	ldrb	r2, [r2, #2]
 8005604:	8019      	strh	r1, [r3, #0]
 8005606:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame,(char *) tempe1);
 8005608:	499e      	ldr	r1, [pc, #632]	; (8005884 <FrameUART+0x2fc>)
 800560a:	48ad      	ldr	r0, [pc, #692]	; (80058c0 <FrameUART+0x338>)
 800560c:	f001 fc9e 	bl	8006f4c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005610:	48ab      	ldr	r0, [pc, #684]	; (80058c0 <FrameUART+0x338>)
 8005612:	f7fa fde5 	bl	80001e0 <strlen>
 8005616:	4603      	mov	r3, r0
 8005618:	461a      	mov	r2, r3
 800561a:	4ba9      	ldr	r3, [pc, #676]	; (80058c0 <FrameUART+0x338>)
 800561c:	4413      	add	r3, r2
 800561e:	49aa      	ldr	r1, [pc, #680]	; (80058c8 <FrameUART+0x340>)
 8005620:	461a      	mov	r2, r3
 8005622:	460b      	mov	r3, r1
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "A");
 8005628:	48a5      	ldr	r0, [pc, #660]	; (80058c0 <FrameUART+0x338>)
 800562a:	f7fa fdd9 	bl	80001e0 <strlen>
 800562e:	4603      	mov	r3, r0
 8005630:	461a      	mov	r2, r3
 8005632:	4ba3      	ldr	r3, [pc, #652]	; (80058c0 <FrameUART+0x338>)
 8005634:	4413      	add	r3, r2
 8005636:	49a5      	ldr	r1, [pc, #660]	; (80058cc <FrameUART+0x344>)
 8005638:	461a      	mov	r2, r3
 800563a:	460b      	mov	r3, r1
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame,(char *) tempe2);
 8005640:	4992      	ldr	r1, [pc, #584]	; (800588c <FrameUART+0x304>)
 8005642:	489f      	ldr	r0, [pc, #636]	; (80058c0 <FrameUART+0x338>)
 8005644:	f001 fc82 	bl	8006f4c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005648:	489d      	ldr	r0, [pc, #628]	; (80058c0 <FrameUART+0x338>)
 800564a:	f7fa fdc9 	bl	80001e0 <strlen>
 800564e:	4603      	mov	r3, r0
 8005650:	461a      	mov	r2, r3
 8005652:	4b9b      	ldr	r3, [pc, #620]	; (80058c0 <FrameUART+0x338>)
 8005654:	4413      	add	r3, r2
 8005656:	499c      	ldr	r1, [pc, #624]	; (80058c8 <FrameUART+0x340>)
 8005658:	461a      	mov	r2, r3
 800565a:	460b      	mov	r3, r1
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "HU");
 8005660:	4897      	ldr	r0, [pc, #604]	; (80058c0 <FrameUART+0x338>)
 8005662:	f7fa fdbd 	bl	80001e0 <strlen>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	4b95      	ldr	r3, [pc, #596]	; (80058c0 <FrameUART+0x338>)
 800566c:	4413      	add	r3, r2
 800566e:	4a98      	ldr	r2, [pc, #608]	; (80058d0 <FrameUART+0x348>)
 8005670:	8811      	ldrh	r1, [r2, #0]
 8005672:	7892      	ldrb	r2, [r2, #2]
 8005674:	8019      	strh	r1, [r3, #0]
 8005676:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) humi1 );
 8005678:	4986      	ldr	r1, [pc, #536]	; (8005894 <FrameUART+0x30c>)
 800567a:	4891      	ldr	r0, [pc, #580]	; (80058c0 <FrameUART+0x338>)
 800567c:	f001 fc66 	bl	8006f4c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005680:	488f      	ldr	r0, [pc, #572]	; (80058c0 <FrameUART+0x338>)
 8005682:	f7fa fdad 	bl	80001e0 <strlen>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	4b8d      	ldr	r3, [pc, #564]	; (80058c0 <FrameUART+0x338>)
 800568c:	4413      	add	r3, r2
 800568e:	498e      	ldr	r1, [pc, #568]	; (80058c8 <FrameUART+0x340>)
 8005690:	461a      	mov	r2, r3
 8005692:	460b      	mov	r3, r1
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "Q");
 8005698:	4889      	ldr	r0, [pc, #548]	; (80058c0 <FrameUART+0x338>)
 800569a:	f7fa fda1 	bl	80001e0 <strlen>
 800569e:	4603      	mov	r3, r0
 80056a0:	461a      	mov	r2, r3
 80056a2:	4b87      	ldr	r3, [pc, #540]	; (80058c0 <FrameUART+0x338>)
 80056a4:	4413      	add	r3, r2
 80056a6:	498b      	ldr	r1, [pc, #556]	; (80058d4 <FrameUART+0x34c>)
 80056a8:	461a      	mov	r2, r3
 80056aa:	460b      	mov	r3, r1
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) humi2 );
 80056b0:	497a      	ldr	r1, [pc, #488]	; (800589c <FrameUART+0x314>)
 80056b2:	4883      	ldr	r0, [pc, #524]	; (80058c0 <FrameUART+0x338>)
 80056b4:	f001 fc4a 	bl	8006f4c <strcat>
	   strcat((char *) frame, (char *) ":");
 80056b8:	4881      	ldr	r0, [pc, #516]	; (80058c0 <FrameUART+0x338>)
 80056ba:	f7fa fd91 	bl	80001e0 <strlen>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b7f      	ldr	r3, [pc, #508]	; (80058c0 <FrameUART+0x338>)
 80056c4:	4413      	add	r3, r2
 80056c6:	4980      	ldr	r1, [pc, #512]	; (80058c8 <FrameUART+0x340>)
 80056c8:	461a      	mov	r2, r3
 80056ca:	460b      	mov	r3, r1
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "CO");
 80056d0:	487b      	ldr	r0, [pc, #492]	; (80058c0 <FrameUART+0x338>)
 80056d2:	f7fa fd85 	bl	80001e0 <strlen>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	4b79      	ldr	r3, [pc, #484]	; (80058c0 <FrameUART+0x338>)
 80056dc:	4413      	add	r3, r2
 80056de:	4a7e      	ldr	r2, [pc, #504]	; (80058d8 <FrameUART+0x350>)
 80056e0:	8811      	ldrh	r1, [r2, #0]
 80056e2:	7892      	ldrb	r2, [r2, #2]
 80056e4:	8019      	strh	r1, [r3, #0]
 80056e6:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) CO2 );
 80056e8:	496e      	ldr	r1, [pc, #440]	; (80058a4 <FrameUART+0x31c>)
 80056ea:	4875      	ldr	r0, [pc, #468]	; (80058c0 <FrameUART+0x338>)
 80056ec:	f001 fc2e 	bl	8006f4c <strcat>
	   strcat((char *) frame, (char *) ":");
 80056f0:	4873      	ldr	r0, [pc, #460]	; (80058c0 <FrameUART+0x338>)
 80056f2:	f7fa fd75 	bl	80001e0 <strlen>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b71      	ldr	r3, [pc, #452]	; (80058c0 <FrameUART+0x338>)
 80056fc:	4413      	add	r3, r2
 80056fe:	4972      	ldr	r1, [pc, #456]	; (80058c8 <FrameUART+0x340>)
 8005700:	461a      	mov	r2, r3
 8005702:	460b      	mov	r3, r1
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "VO");
 8005708:	486d      	ldr	r0, [pc, #436]	; (80058c0 <FrameUART+0x338>)
 800570a:	f7fa fd69 	bl	80001e0 <strlen>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	4b6b      	ldr	r3, [pc, #428]	; (80058c0 <FrameUART+0x338>)
 8005714:	4413      	add	r3, r2
 8005716:	4a71      	ldr	r2, [pc, #452]	; (80058dc <FrameUART+0x354>)
 8005718:	8811      	ldrh	r1, [r2, #0]
 800571a:	7892      	ldrb	r2, [r2, #2]
 800571c:	8019      	strh	r1, [r3, #0]
 800571e:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) VOC );
 8005720:	4962      	ldr	r1, [pc, #392]	; (80058ac <FrameUART+0x324>)
 8005722:	4867      	ldr	r0, [pc, #412]	; (80058c0 <FrameUART+0x338>)
 8005724:	f001 fc12 	bl	8006f4c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005728:	4865      	ldr	r0, [pc, #404]	; (80058c0 <FrameUART+0x338>)
 800572a:	f7fa fd59 	bl	80001e0 <strlen>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	4b63      	ldr	r3, [pc, #396]	; (80058c0 <FrameUART+0x338>)
 8005734:	4413      	add	r3, r2
 8005736:	4964      	ldr	r1, [pc, #400]	; (80058c8 <FrameUART+0x340>)
 8005738:	461a      	mov	r2, r3
 800573a:	460b      	mov	r3, r1
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "PM");
 8005740:	485f      	ldr	r0, [pc, #380]	; (80058c0 <FrameUART+0x338>)
 8005742:	f7fa fd4d 	bl	80001e0 <strlen>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	4b5d      	ldr	r3, [pc, #372]	; (80058c0 <FrameUART+0x338>)
 800574c:	4413      	add	r3, r2
 800574e:	4a64      	ldr	r2, [pc, #400]	; (80058e0 <FrameUART+0x358>)
 8005750:	8811      	ldrh	r1, [r2, #0]
 8005752:	7892      	ldrb	r2, [r2, #2]
 8005754:	8019      	strh	r1, [r3, #0]
 8005756:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) PM251 );
 8005758:	4956      	ldr	r1, [pc, #344]	; (80058b4 <FrameUART+0x32c>)
 800575a:	4859      	ldr	r0, [pc, #356]	; (80058c0 <FrameUART+0x338>)
 800575c:	f001 fbf6 	bl	8006f4c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005760:	4857      	ldr	r0, [pc, #348]	; (80058c0 <FrameUART+0x338>)
 8005762:	f7fa fd3d 	bl	80001e0 <strlen>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <FrameUART+0x338>)
 800576c:	4413      	add	r3, r2
 800576e:	4956      	ldr	r1, [pc, #344]	; (80058c8 <FrameUART+0x340>)
 8005770:	461a      	mov	r2, r3
 8005772:	460b      	mov	r3, r1
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "S");
 8005778:	4851      	ldr	r0, [pc, #324]	; (80058c0 <FrameUART+0x338>)
 800577a:	f7fa fd31 	bl	80001e0 <strlen>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	4b4f      	ldr	r3, [pc, #316]	; (80058c0 <FrameUART+0x338>)
 8005784:	4413      	add	r3, r2
 8005786:	4957      	ldr	r1, [pc, #348]	; (80058e4 <FrameUART+0x35c>)
 8005788:	461a      	mov	r2, r3
 800578a:	460b      	mov	r3, r1
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) PM252 );
 8005790:	494a      	ldr	r1, [pc, #296]	; (80058bc <FrameUART+0x334>)
 8005792:	484b      	ldr	r0, [pc, #300]	; (80058c0 <FrameUART+0x338>)
 8005794:	f001 fbda 	bl	8006f4c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005798:	4849      	ldr	r0, [pc, #292]	; (80058c0 <FrameUART+0x338>)
 800579a:	f7fa fd21 	bl	80001e0 <strlen>
 800579e:	4603      	mov	r3, r0
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b47      	ldr	r3, [pc, #284]	; (80058c0 <FrameUART+0x338>)
 80057a4:	4413      	add	r3, r2
 80057a6:	4948      	ldr	r1, [pc, #288]	; (80058c8 <FrameUART+0x340>)
 80057a8:	461a      	mov	r2, r3
 80057aa:	460b      	mov	r3, r1
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "PO");
 80057b0:	4843      	ldr	r0, [pc, #268]	; (80058c0 <FrameUART+0x338>)
 80057b2:	f7fa fd15 	bl	80001e0 <strlen>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b41      	ldr	r3, [pc, #260]	; (80058c0 <FrameUART+0x338>)
 80057bc:	4413      	add	r3, r2
 80057be:	4a4a      	ldr	r2, [pc, #296]	; (80058e8 <FrameUART+0x360>)
 80057c0:	8811      	ldrh	r1, [r2, #0]
 80057c2:	7892      	ldrb	r2, [r2, #2]
 80057c4:	8019      	strh	r1, [r3, #0]
 80057c6:	709a      	strb	r2, [r3, #2]
	   if (power == 1)
 80057c8:	4b48      	ldr	r3, [pc, #288]	; (80058ec <FrameUART+0x364>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10c      	bne.n	80057ea <FrameUART+0x262>
	   strcat((char *) frame, (char *) "1" );
 80057d0:	483b      	ldr	r0, [pc, #236]	; (80058c0 <FrameUART+0x338>)
 80057d2:	f7fa fd05 	bl	80001e0 <strlen>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	4b39      	ldr	r3, [pc, #228]	; (80058c0 <FrameUART+0x338>)
 80057dc:	4413      	add	r3, r2
 80057de:	4944      	ldr	r1, [pc, #272]	; (80058f0 <FrameUART+0x368>)
 80057e0:	461a      	mov	r2, r3
 80057e2:	460b      	mov	r3, r1
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	8013      	strh	r3, [r2, #0]
 80057e8:	e00f      	b.n	800580a <FrameUART+0x282>
	   else if (power == 0)
 80057ea:	4b40      	ldr	r3, [pc, #256]	; (80058ec <FrameUART+0x364>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <FrameUART+0x282>
	   strcat((char *) frame, (char *) "0" );
 80057f2:	4833      	ldr	r0, [pc, #204]	; (80058c0 <FrameUART+0x338>)
 80057f4:	f7fa fcf4 	bl	80001e0 <strlen>
 80057f8:	4603      	mov	r3, r0
 80057fa:	461a      	mov	r2, r3
 80057fc:	4b30      	ldr	r3, [pc, #192]	; (80058c0 <FrameUART+0x338>)
 80057fe:	4413      	add	r3, r2
 8005800:	493c      	ldr	r1, [pc, #240]	; (80058f4 <FrameUART+0x36c>)
 8005802:	461a      	mov	r2, r3
 8005804:	460b      	mov	r3, r1
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) ":");
 800580a:	482d      	ldr	r0, [pc, #180]	; (80058c0 <FrameUART+0x338>)
 800580c:	f7fa fce8 	bl	80001e0 <strlen>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	4b2a      	ldr	r3, [pc, #168]	; (80058c0 <FrameUART+0x338>)
 8005816:	4413      	add	r3, r2
 8005818:	492b      	ldr	r1, [pc, #172]	; (80058c8 <FrameUART+0x340>)
 800581a:	461a      	mov	r2, r3
 800581c:	460b      	mov	r3, r1
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "SP");
 8005822:	4827      	ldr	r0, [pc, #156]	; (80058c0 <FrameUART+0x338>)
 8005824:	f7fa fcdc 	bl	80001e0 <strlen>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	4b24      	ldr	r3, [pc, #144]	; (80058c0 <FrameUART+0x338>)
 800582e:	4413      	add	r3, r2
 8005830:	4a31      	ldr	r2, [pc, #196]	; (80058f8 <FrameUART+0x370>)
 8005832:	8811      	ldrh	r1, [r2, #0]
 8005834:	7892      	ldrb	r2, [r2, #2]
 8005836:	8019      	strh	r1, [r3, #0]
 8005838:	709a      	strb	r2, [r3, #2]
	   if(speed == 0)
 800583a:	4b30      	ldr	r3, [pc, #192]	; (80058fc <FrameUART+0x374>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10c      	bne.n	800585c <FrameUART+0x2d4>
		   strcat((char *) frame, (char *) "0" );
 8005842:	481f      	ldr	r0, [pc, #124]	; (80058c0 <FrameUART+0x338>)
 8005844:	f7fa fccc 	bl	80001e0 <strlen>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <FrameUART+0x338>)
 800584e:	4413      	add	r3, r2
 8005850:	4928      	ldr	r1, [pc, #160]	; (80058f4 <FrameUART+0x36c>)
 8005852:	461a      	mov	r2, r3
 8005854:	460b      	mov	r3, r1
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	8013      	strh	r3, [r2, #0]
 800585a:	e072      	b.n	8005942 <FrameUART+0x3ba>
	   else if(speed == 1)
 800585c:	4b27      	ldr	r3, [pc, #156]	; (80058fc <FrameUART+0x374>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d14d      	bne.n	8005900 <FrameUART+0x378>
		   strcat((char *) frame, (char *) "1" );
 8005864:	4816      	ldr	r0, [pc, #88]	; (80058c0 <FrameUART+0x338>)
 8005866:	f7fa fcbb 	bl	80001e0 <strlen>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <FrameUART+0x338>)
 8005870:	4413      	add	r3, r2
 8005872:	491f      	ldr	r1, [pc, #124]	; (80058f0 <FrameUART+0x368>)
 8005874:	461a      	mov	r2, r3
 8005876:	460b      	mov	r3, r1
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	8013      	strh	r3, [r2, #0]
 800587c:	e061      	b.n	8005942 <FrameUART+0x3ba>
 800587e:	bf00      	nop
 8005880:	20004198 	.word	0x20004198
 8005884:	20004034 	.word	0x20004034
 8005888:	20004224 	.word	0x20004224
 800588c:	2000403c 	.word	0x2000403c
 8005890:	200041a4 	.word	0x200041a4
 8005894:	20004044 	.word	0x20004044
 8005898:	20004248 	.word	0x20004248
 800589c:	2000404c 	.word	0x2000404c
 80058a0:	2000000a 	.word	0x2000000a
 80058a4:	20004054 	.word	0x20004054
 80058a8:	20000008 	.word	0x20000008
 80058ac:	2000405c 	.word	0x2000405c
 80058b0:	20004378 	.word	0x20004378
 80058b4:	20004064 	.word	0x20004064
 80058b8:	2000419c 	.word	0x2000419c
 80058bc:	2000406c 	.word	0x2000406c
 80058c0:	200042c8 	.word	0x200042c8
 80058c4:	080078a8 	.word	0x080078a8
 80058c8:	080078ac 	.word	0x080078ac
 80058cc:	080078b0 	.word	0x080078b0
 80058d0:	080078b4 	.word	0x080078b4
 80058d4:	080078b8 	.word	0x080078b8
 80058d8:	080078bc 	.word	0x080078bc
 80058dc:	080078c0 	.word	0x080078c0
 80058e0:	080078c4 	.word	0x080078c4
 80058e4:	080078c8 	.word	0x080078c8
 80058e8:	080078cc 	.word	0x080078cc
 80058ec:	200040f0 	.word	0x200040f0
 80058f0:	080078d0 	.word	0x080078d0
 80058f4:	080078d4 	.word	0x080078d4
 80058f8:	080078d8 	.word	0x080078d8
 80058fc:	20004304 	.word	0x20004304
	   else if(speed == 2)
 8005900:	4b6c      	ldr	r3, [pc, #432]	; (8005ab4 <FrameUART+0x52c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d10c      	bne.n	8005922 <FrameUART+0x39a>
		   strcat((char *) frame, (char *) "2" );
 8005908:	486b      	ldr	r0, [pc, #428]	; (8005ab8 <FrameUART+0x530>)
 800590a:	f7fa fc69 	bl	80001e0 <strlen>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	4b69      	ldr	r3, [pc, #420]	; (8005ab8 <FrameUART+0x530>)
 8005914:	4413      	add	r3, r2
 8005916:	4969      	ldr	r1, [pc, #420]	; (8005abc <FrameUART+0x534>)
 8005918:	461a      	mov	r2, r3
 800591a:	460b      	mov	r3, r1
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	8013      	strh	r3, [r2, #0]
 8005920:	e00f      	b.n	8005942 <FrameUART+0x3ba>
	   else if(speed == 3)
 8005922:	4b64      	ldr	r3, [pc, #400]	; (8005ab4 <FrameUART+0x52c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d10b      	bne.n	8005942 <FrameUART+0x3ba>
		   strcat((char *) frame, (char *) "3" );
 800592a:	4863      	ldr	r0, [pc, #396]	; (8005ab8 <FrameUART+0x530>)
 800592c:	f7fa fc58 	bl	80001e0 <strlen>
 8005930:	4603      	mov	r3, r0
 8005932:	461a      	mov	r2, r3
 8005934:	4b60      	ldr	r3, [pc, #384]	; (8005ab8 <FrameUART+0x530>)
 8005936:	4413      	add	r3, r2
 8005938:	4961      	ldr	r1, [pc, #388]	; (8005ac0 <FrameUART+0x538>)
 800593a:	461a      	mov	r2, r3
 800593c:	460b      	mov	r3, r1
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) ":");
 8005942:	485d      	ldr	r0, [pc, #372]	; (8005ab8 <FrameUART+0x530>)
 8005944:	f7fa fc4c 	bl	80001e0 <strlen>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	4b5a      	ldr	r3, [pc, #360]	; (8005ab8 <FrameUART+0x530>)
 800594e:	4413      	add	r3, r2
 8005950:	495c      	ldr	r1, [pc, #368]	; (8005ac4 <FrameUART+0x53c>)
 8005952:	461a      	mov	r2, r3
 8005954:	460b      	mov	r3, r1
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "NIGH");
 800595a:	4857      	ldr	r0, [pc, #348]	; (8005ab8 <FrameUART+0x530>)
 800595c:	f7fa fc40 	bl	80001e0 <strlen>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	4b54      	ldr	r3, [pc, #336]	; (8005ab8 <FrameUART+0x530>)
 8005966:	4413      	add	r3, r2
 8005968:	4a57      	ldr	r2, [pc, #348]	; (8005ac8 <FrameUART+0x540>)
 800596a:	6810      	ldr	r0, [r2, #0]
 800596c:	6018      	str	r0, [r3, #0]
 800596e:	7912      	ldrb	r2, [r2, #4]
 8005970:	711a      	strb	r2, [r3, #4]
	   if (nightmode ==0){
 8005972:	4b56      	ldr	r3, [pc, #344]	; (8005acc <FrameUART+0x544>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10c      	bne.n	8005994 <FrameUART+0x40c>
		   strcat((char *) frame, (char *) "0" );
 800597a:	484f      	ldr	r0, [pc, #316]	; (8005ab8 <FrameUART+0x530>)
 800597c:	f7fa fc30 	bl	80001e0 <strlen>
 8005980:	4603      	mov	r3, r0
 8005982:	461a      	mov	r2, r3
 8005984:	4b4c      	ldr	r3, [pc, #304]	; (8005ab8 <FrameUART+0x530>)
 8005986:	4413      	add	r3, r2
 8005988:	4951      	ldr	r1, [pc, #324]	; (8005ad0 <FrameUART+0x548>)
 800598a:	461a      	mov	r2, r3
 800598c:	460b      	mov	r3, r1
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	8013      	strh	r3, [r2, #0]
 8005992:	e00f      	b.n	80059b4 <FrameUART+0x42c>
	   }
	   else if (nightmode == 1){
 8005994:	4b4d      	ldr	r3, [pc, #308]	; (8005acc <FrameUART+0x544>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d10b      	bne.n	80059b4 <FrameUART+0x42c>
		   strcat((char *) frame, (char *) "1" );
 800599c:	4846      	ldr	r0, [pc, #280]	; (8005ab8 <FrameUART+0x530>)
 800599e:	f7fa fc1f 	bl	80001e0 <strlen>
 80059a2:	4603      	mov	r3, r0
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b44      	ldr	r3, [pc, #272]	; (8005ab8 <FrameUART+0x530>)
 80059a8:	4413      	add	r3, r2
 80059aa:	494a      	ldr	r1, [pc, #296]	; (8005ad4 <FrameUART+0x54c>)
 80059ac:	461a      	mov	r2, r3
 80059ae:	460b      	mov	r3, r1
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	8013      	strh	r3, [r2, #0]
	   }
	   strcat((char *) frame, (char *) ":");
 80059b4:	4840      	ldr	r0, [pc, #256]	; (8005ab8 <FrameUART+0x530>)
 80059b6:	f7fa fc13 	bl	80001e0 <strlen>
 80059ba:	4603      	mov	r3, r0
 80059bc:	461a      	mov	r2, r3
 80059be:	4b3e      	ldr	r3, [pc, #248]	; (8005ab8 <FrameUART+0x530>)
 80059c0:	4413      	add	r3, r2
 80059c2:	4940      	ldr	r1, [pc, #256]	; (8005ac4 <FrameUART+0x53c>)
 80059c4:	461a      	mov	r2, r3
 80059c6:	460b      	mov	r3, r1
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "FILT");
 80059cc:	483a      	ldr	r0, [pc, #232]	; (8005ab8 <FrameUART+0x530>)
 80059ce:	f7fa fc07 	bl	80001e0 <strlen>
 80059d2:	4603      	mov	r3, r0
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <FrameUART+0x530>)
 80059d8:	4413      	add	r3, r2
 80059da:	4a3f      	ldr	r2, [pc, #252]	; (8005ad8 <FrameUART+0x550>)
 80059dc:	6810      	ldr	r0, [r2, #0]
 80059de:	6018      	str	r0, [r3, #0]
 80059e0:	7912      	ldrb	r2, [r2, #4]
 80059e2:	711a      	strb	r2, [r3, #4]
	   if (filmode ==0){
 80059e4:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <FrameUART+0x554>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10c      	bne.n	8005a06 <FrameUART+0x47e>
			strcat((char *) frame, (char *) "0" );
 80059ec:	4832      	ldr	r0, [pc, #200]	; (8005ab8 <FrameUART+0x530>)
 80059ee:	f7fa fbf7 	bl	80001e0 <strlen>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <FrameUART+0x530>)
 80059f8:	4413      	add	r3, r2
 80059fa:	4935      	ldr	r1, [pc, #212]	; (8005ad0 <FrameUART+0x548>)
 80059fc:	461a      	mov	r2, r3
 80059fe:	460b      	mov	r3, r1
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	8013      	strh	r3, [r2, #0]
 8005a04:	e00f      	b.n	8005a26 <FrameUART+0x49e>
		   }
	   else if (filmode == 1){
 8005a06:	4b35      	ldr	r3, [pc, #212]	; (8005adc <FrameUART+0x554>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d10b      	bne.n	8005a26 <FrameUART+0x49e>
			strcat((char *) frame, (char *) "1" );
 8005a0e:	482a      	ldr	r0, [pc, #168]	; (8005ab8 <FrameUART+0x530>)
 8005a10:	f7fa fbe6 	bl	80001e0 <strlen>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <FrameUART+0x530>)
 8005a1a:	4413      	add	r3, r2
 8005a1c:	492d      	ldr	r1, [pc, #180]	; (8005ad4 <FrameUART+0x54c>)
 8005a1e:	461a      	mov	r2, r3
 8005a20:	460b      	mov	r3, r1
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	8013      	strh	r3, [r2, #0]
		   }
	   strcat((char *) frame, (char *) ":");
 8005a26:	4824      	ldr	r0, [pc, #144]	; (8005ab8 <FrameUART+0x530>)
 8005a28:	f7fa fbda 	bl	80001e0 <strlen>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4b21      	ldr	r3, [pc, #132]	; (8005ab8 <FrameUART+0x530>)
 8005a32:	4413      	add	r3, r2
 8005a34:	4923      	ldr	r1, [pc, #140]	; (8005ac4 <FrameUART+0x53c>)
 8005a36:	461a      	mov	r2, r3
 8005a38:	460b      	mov	r3, r1
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	8013      	strh	r3, [r2, #0]
		   strcat((char *) frame, (char *) "CTRL");
 8005a3e:	481e      	ldr	r0, [pc, #120]	; (8005ab8 <FrameUART+0x530>)
 8005a40:	f7fa fbce 	bl	80001e0 <strlen>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <FrameUART+0x530>)
 8005a4a:	4413      	add	r3, r2
 8005a4c:	4a24      	ldr	r2, [pc, #144]	; (8005ae0 <FrameUART+0x558>)
 8005a4e:	6810      	ldr	r0, [r2, #0]
 8005a50:	6018      	str	r0, [r3, #0]
 8005a52:	7912      	ldrb	r2, [r2, #4]
 8005a54:	711a      	strb	r2, [r3, #4]
		   if (ctrmode ==0){
 8005a56:	4b23      	ldr	r3, [pc, #140]	; (8005ae4 <FrameUART+0x55c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10c      	bne.n	8005a78 <FrameUART+0x4f0>
				strcat((char *) frame, (char *) "0" );
 8005a5e:	4816      	ldr	r0, [pc, #88]	; (8005ab8 <FrameUART+0x530>)
 8005a60:	f7fa fbbe 	bl	80001e0 <strlen>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <FrameUART+0x530>)
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4918      	ldr	r1, [pc, #96]	; (8005ad0 <FrameUART+0x548>)
 8005a6e:	461a      	mov	r2, r3
 8005a70:	460b      	mov	r3, r1
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	8013      	strh	r3, [r2, #0]
 8005a76:	e00f      	b.n	8005a98 <FrameUART+0x510>
			   }
		   else if (ctrmode == 1){
 8005a78:	4b1a      	ldr	r3, [pc, #104]	; (8005ae4 <FrameUART+0x55c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d10b      	bne.n	8005a98 <FrameUART+0x510>
				strcat((char *) frame, (char *) "1" );
 8005a80:	480d      	ldr	r0, [pc, #52]	; (8005ab8 <FrameUART+0x530>)
 8005a82:	f7fa fbad 	bl	80001e0 <strlen>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <FrameUART+0x530>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	4911      	ldr	r1, [pc, #68]	; (8005ad4 <FrameUART+0x54c>)
 8005a90:	461a      	mov	r2, r3
 8005a92:	460b      	mov	r3, r1
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	8013      	strh	r3, [r2, #0]
			   }
	   strcat((char *) frame, (char *) "\n");
 8005a98:	4807      	ldr	r0, [pc, #28]	; (8005ab8 <FrameUART+0x530>)
 8005a9a:	f7fa fba1 	bl	80001e0 <strlen>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <FrameUART+0x530>)
 8005aa4:	4413      	add	r3, r2
 8005aa6:	4910      	ldr	r1, [pc, #64]	; (8005ae8 <FrameUART+0x560>)
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	460b      	mov	r3, r1
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	8013      	strh	r3, [r2, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20004304 	.word	0x20004304
 8005ab8:	200042c8 	.word	0x200042c8
 8005abc:	080078dc 	.word	0x080078dc
 8005ac0:	080078e0 	.word	0x080078e0
 8005ac4:	080078ac 	.word	0x080078ac
 8005ac8:	080078e4 	.word	0x080078e4
 8005acc:	20004228 	.word	0x20004228
 8005ad0:	080078d4 	.word	0x080078d4
 8005ad4:	080078d0 	.word	0x080078d0
 8005ad8:	080078ec 	.word	0x080078ec
 8005adc:	20004380 	.word	0x20004380
 8005ae0:	080078f4 	.word	0x080078f4
 8005ae4:	20004154 	.word	0x20004154
 8005ae8:	080078fc 	.word	0x080078fc

08005aec <CheckUART>:

void CheckUART(void){
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
	if(Transfer_cplt){
 8005af2:	4b97      	ldr	r3, [pc, #604]	; (8005d50 <CheckUART+0x264>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 8168 	beq.w	8005dcc <CheckUART+0x2e0>

	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8005afc:	2300      	movs	r3, #0
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	e11b      	b.n	8005d3a <CheckUART+0x24e>
		  if(Rx_Buffer[i] =='h' && Rx_Buffer[i+1]=='i'){ // Nhận nút điều khiển động cơ hight từ App
 8005b02:	4a94      	ldr	r2, [pc, #592]	; (8005d54 <CheckUART+0x268>)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b68      	cmp	r3, #104	; 0x68
 8005b0c:	d10d      	bne.n	8005b2a <CheckUART+0x3e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a90      	ldr	r2, [pc, #576]	; (8005d54 <CheckUART+0x268>)
 8005b14:	5cd3      	ldrb	r3, [r2, r3]
 8005b16:	2b69      	cmp	r3, #105	; 0x69
 8005b18:	d107      	bne.n	8005b2a <CheckUART+0x3e>

			  speed = 3;
 8005b1a:	4b8f      	ldr	r3, [pc, #572]	; (8005d58 <CheckUART+0x26c>)
 8005b1c:	2203      	movs	r2, #3
 8005b1e:	601a      	str	r2, [r3, #0]
			 // fan_1_run(hightspeed);
			 // fan_2_run(hightspeed);
			 // num = SPEED_HIGHT;
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005b20:	4b8e      	ldr	r3, [pc, #568]	; (8005d5c <CheckUART+0x270>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24
 8005b28:	e032      	b.n	8005b90 <CheckUART+0xa4>
			 // FLAG2=1;
			//  FLAG3=1;
			//  FLAG4=1;
			  // Set tốc độ động cơ PWM ở đây
		  }
		  else if(Rx_Buffer[i] =='l' && Rx_Buffer[i+1]=='o'&& Rx_Buffer[i+2]=='w'){ // Nhận nút điều khiển động cơ low từ app
 8005b2a:	4a8a      	ldr	r2, [pc, #552]	; (8005d54 <CheckUART+0x268>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b6c      	cmp	r3, #108	; 0x6c
 8005b34:	d113      	bne.n	8005b5e <CheckUART+0x72>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a86      	ldr	r2, [pc, #536]	; (8005d54 <CheckUART+0x268>)
 8005b3c:	5cd3      	ldrb	r3, [r2, r3]
 8005b3e:	2b6f      	cmp	r3, #111	; 0x6f
 8005b40:	d10d      	bne.n	8005b5e <CheckUART+0x72>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3302      	adds	r3, #2
 8005b46:	4a83      	ldr	r2, [pc, #524]	; (8005d54 <CheckUART+0x268>)
 8005b48:	5cd3      	ldrb	r3, [r2, r3]
 8005b4a:	2b77      	cmp	r3, #119	; 0x77
 8005b4c:	d107      	bne.n	8005b5e <CheckUART+0x72>


			  speed = 1;
 8005b4e:	4b82      	ldr	r3, [pc, #520]	; (8005d58 <CheckUART+0x26c>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
			 // fan_1_run(lowspeed);
			 // fan_2_run(lowspeed);
			 // num = SPEED_LOW;
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005b54:	4b81      	ldr	r3, [pc, #516]	; (8005d5c <CheckUART+0x270>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b5c:	e018      	b.n	8005b90 <CheckUART+0xa4>
			 // FLAG2=1;
			 // FLAG3=1;
			 // FLAG4=1;
			 // Set tốc độ động cơ PWM ở đây
		 }
		  else if(Rx_Buffer[i] =='m' && Rx_Buffer[i+1]=='e'&& Rx_Buffer[i+2]=='d'){ // Nhận nút điều khiển động cơ med từ app
 8005b5e:	4a7d      	ldr	r2, [pc, #500]	; (8005d54 <CheckUART+0x268>)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b6d      	cmp	r3, #109	; 0x6d
 8005b68:	d112      	bne.n	8005b90 <CheckUART+0xa4>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a79      	ldr	r2, [pc, #484]	; (8005d54 <CheckUART+0x268>)
 8005b70:	5cd3      	ldrb	r3, [r2, r3]
 8005b72:	2b65      	cmp	r3, #101	; 0x65
 8005b74:	d10c      	bne.n	8005b90 <CheckUART+0xa4>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3302      	adds	r3, #2
 8005b7a:	4a76      	ldr	r2, [pc, #472]	; (8005d54 <CheckUART+0x268>)
 8005b7c:	5cd3      	ldrb	r3, [r2, r3]
 8005b7e:	2b64      	cmp	r3, #100	; 0x64
 8005b80:	d106      	bne.n	8005b90 <CheckUART+0xa4>

			  speed = 2;
 8005b82:	4b75      	ldr	r3, [pc, #468]	; (8005d58 <CheckUART+0x26c>)
 8005b84:	2202      	movs	r2, #2
 8005b86:	601a      	str	r2, [r3, #0]
			 // fan_1_run(medspeed);
			 // fan_2_run(medspeed);
			  //num = SPEED_MEDIUM;
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005b88:	4b74      	ldr	r3, [pc, #464]	; (8005d5c <CheckUART+0x270>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24
			 // FLAG4=1;
			 // Set tốc độ động cơ PWM ở đây
		 }
	  //}
	 //for (int i =0; i<=strlen(Rx_Buffer); i++){
		 if(Rx_Buffer[i] =='P' && Rx_Buffer[i+1]=='O'&& Rx_Buffer[i+2]=='N'){
 8005b90:	4a70      	ldr	r2, [pc, #448]	; (8005d54 <CheckUART+0x268>)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b50      	cmp	r3, #80	; 0x50
 8005b9a:	d116      	bne.n	8005bca <CheckUART+0xde>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	4a6c      	ldr	r2, [pc, #432]	; (8005d54 <CheckUART+0x268>)
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	2b4f      	cmp	r3, #79	; 0x4f
 8005ba6:	d110      	bne.n	8005bca <CheckUART+0xde>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3302      	adds	r3, #2
 8005bac:	4a69      	ldr	r2, [pc, #420]	; (8005d54 <CheckUART+0x268>)
 8005bae:	5cd3      	ldrb	r3, [r2, r3]
 8005bb0:	2b4e      	cmp	r3, #78	; 0x4e
 8005bb2:	d10a      	bne.n	8005bca <CheckUART+0xde>

			 power = 1;
 8005bb4:	4b6a      	ldr	r3, [pc, #424]	; (8005d60 <CheckUART+0x274>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
			 speed = 2;
 8005bba:	4b67      	ldr	r3, [pc, #412]	; (8005d58 <CheckUART+0x26c>)
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	601a      	str	r2, [r3, #0]
			// fan_1_run(medspeed);
			// fan_2_run(medspeed);
			// num = POWER_ON;
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005bc0:	4b66      	ldr	r3, [pc, #408]	; (8005d5c <CheckUART+0x270>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24
 8005bc8:	e01b      	b.n	8005c02 <CheckUART+0x116>
			 // FLAG3=1;
			 // FLAG4=1;
			 // Set tốc độ động cơ PWM ở đây
			 // Set van khí ở đây
		 }
		 else if(Rx_Buffer[i] =='P' && Rx_Buffer[i+1]=='O'&& Rx_Buffer[i+2]=='F'){
 8005bca:	4a62      	ldr	r2, [pc, #392]	; (8005d54 <CheckUART+0x268>)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b50      	cmp	r3, #80	; 0x50
 8005bd4:	d115      	bne.n	8005c02 <CheckUART+0x116>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	4a5e      	ldr	r2, [pc, #376]	; (8005d54 <CheckUART+0x268>)
 8005bdc:	5cd3      	ldrb	r3, [r2, r3]
 8005bde:	2b4f      	cmp	r3, #79	; 0x4f
 8005be0:	d10f      	bne.n	8005c02 <CheckUART+0x116>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3302      	adds	r3, #2
 8005be6:	4a5b      	ldr	r2, [pc, #364]	; (8005d54 <CheckUART+0x268>)
 8005be8:	5cd3      	ldrb	r3, [r2, r3]
 8005bea:	2b46      	cmp	r3, #70	; 0x46
 8005bec:	d109      	bne.n	8005c02 <CheckUART+0x116>


			 power = 0;
 8005bee:	4b5c      	ldr	r3, [pc, #368]	; (8005d60 <CheckUART+0x274>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
			 speed = 0;
 8005bf4:	4b58      	ldr	r3, [pc, #352]	; (8005d58 <CheckUART+0x26c>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
			// fan_1_run(100);
			// fan_2_run(100);
			// num = POWER_OFF;
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005bfa:	4b58      	ldr	r3, [pc, #352]	; (8005d5c <CheckUART+0x270>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
			//  FLAG4=1;
			 //Tắt động cơ và đóng van khí ở đây
		 }
	// }
	// for (int i =0; i<=strlen(Rx_Buffer); i++){
	 		 if(Rx_Buffer[i] =='n' && Rx_Buffer[i+1]=='i'&& Rx_Buffer[i+2]=='g'){
 8005c02:	4a54      	ldr	r2, [pc, #336]	; (8005d54 <CheckUART+0x268>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b6e      	cmp	r3, #110	; 0x6e
 8005c0c:	d113      	bne.n	8005c36 <CheckUART+0x14a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3301      	adds	r3, #1
 8005c12:	4a50      	ldr	r2, [pc, #320]	; (8005d54 <CheckUART+0x268>)
 8005c14:	5cd3      	ldrb	r3, [r2, r3]
 8005c16:	2b69      	cmp	r3, #105	; 0x69
 8005c18:	d10d      	bne.n	8005c36 <CheckUART+0x14a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	4a4d      	ldr	r2, [pc, #308]	; (8005d54 <CheckUART+0x268>)
 8005c20:	5cd3      	ldrb	r3, [r2, r3]
 8005c22:	2b67      	cmp	r3, #103	; 0x67
 8005c24:	d107      	bne.n	8005c36 <CheckUART+0x14a>

	 			 nightmode = 1;
 8005c26:	4b4f      	ldr	r3, [pc, #316]	; (8005d64 <CheckUART+0x278>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
	 			// fan_1_run(lowspeed);
	 			// fan_2_run(lowspeed);
	 			// num = NIGHT_ON;
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005c2c:	4b4b      	ldr	r3, [pc, #300]	; (8005d5c <CheckUART+0x270>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2200      	movs	r2, #0
 8005c32:	625a      	str	r2, [r3, #36]	; 0x24
 8005c34:	e018      	b.n	8005c68 <CheckUART+0x17c>
				//  FLAG1=1;
				//  FLAG2=1;
				//  FLAG3=1;
				//  FLAG4=1;
	 		 }
	 		 else if(Rx_Buffer[i] =='d' && Rx_Buffer[i+1]=='a'&& Rx_Buffer[i+2]=='y'){
 8005c36:	4a47      	ldr	r2, [pc, #284]	; (8005d54 <CheckUART+0x268>)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b64      	cmp	r3, #100	; 0x64
 8005c40:	d112      	bne.n	8005c68 <CheckUART+0x17c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3301      	adds	r3, #1
 8005c46:	4a43      	ldr	r2, [pc, #268]	; (8005d54 <CheckUART+0x268>)
 8005c48:	5cd3      	ldrb	r3, [r2, r3]
 8005c4a:	2b61      	cmp	r3, #97	; 0x61
 8005c4c:	d10c      	bne.n	8005c68 <CheckUART+0x17c>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3302      	adds	r3, #2
 8005c52:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <CheckUART+0x268>)
 8005c54:	5cd3      	ldrb	r3, [r2, r3]
 8005c56:	2b79      	cmp	r3, #121	; 0x79
 8005c58:	d106      	bne.n	8005c68 <CheckUART+0x17c>

	 			nightmode = 0;
 8005c5a:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <CheckUART+0x278>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
	 			//fan_1_run(medspeed);
	 			//fan_2_run(medspeed);
	 			//num = NIGHT_OFF;
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005c60:	4b3e      	ldr	r3, [pc, #248]	; (8005d5c <CheckUART+0x270>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2200      	movs	r2, #0
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24
				//  FLAG3=1;
				 // FLAG4=1;
	 		 }
	 	//}
	 	//for (int i =0; i<=strlen(Rx_Buffer); i++){
	 		if(Rx_Buffer[i] =='f' && Rx_Buffer[i+1]=='r'&& Rx_Buffer[i+2]=='e'){
 8005c68:	4a3a      	ldr	r2, [pc, #232]	; (8005d54 <CheckUART+0x268>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b66      	cmp	r3, #102	; 0x66
 8005c72:	d113      	bne.n	8005c9c <CheckUART+0x1b0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3301      	adds	r3, #1
 8005c78:	4a36      	ldr	r2, [pc, #216]	; (8005d54 <CheckUART+0x268>)
 8005c7a:	5cd3      	ldrb	r3, [r2, r3]
 8005c7c:	2b72      	cmp	r3, #114	; 0x72
 8005c7e:	d10d      	bne.n	8005c9c <CheckUART+0x1b0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3302      	adds	r3, #2
 8005c84:	4a33      	ldr	r2, [pc, #204]	; (8005d54 <CheckUART+0x268>)
 8005c86:	5cd3      	ldrb	r3, [r2, r3]
 8005c88:	2b65      	cmp	r3, #101	; 0x65
 8005c8a:	d107      	bne.n	8005c9c <CheckUART+0x1b0>

	 			filmode = 1;
 8005c8c:	4b36      	ldr	r3, [pc, #216]	; (8005d68 <CheckUART+0x27c>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
	 			//num = FRESH_AIR;
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005c92:	4b32      	ldr	r3, [pc, #200]	; (8005d5c <CheckUART+0x270>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24
 8005c9a:	e018      	b.n	8005cce <CheckUART+0x1e2>
				//  FLAG4=1;
				//  Vanst = 1;

	 			//đk van mở van
	 		 }
	 		else if(Rx_Buffer[i] =='i' && Rx_Buffer[i+1]=='n'&& Rx_Buffer[i+2]=='d'){
 8005c9c:	4a2d      	ldr	r2, [pc, #180]	; (8005d54 <CheckUART+0x268>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b69      	cmp	r3, #105	; 0x69
 8005ca6:	d112      	bne.n	8005cce <CheckUART+0x1e2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3301      	adds	r3, #1
 8005cac:	4a29      	ldr	r2, [pc, #164]	; (8005d54 <CheckUART+0x268>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	2b6e      	cmp	r3, #110	; 0x6e
 8005cb2:	d10c      	bne.n	8005cce <CheckUART+0x1e2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3302      	adds	r3, #2
 8005cb8:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <CheckUART+0x268>)
 8005cba:	5cd3      	ldrb	r3, [r2, r3]
 8005cbc:	2b64      	cmp	r3, #100	; 0x64
 8005cbe:	d106      	bne.n	8005cce <CheckUART+0x1e2>

	 			filmode = 0;
 8005cc0:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <CheckUART+0x27c>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
	 			//num = INDOOR;
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005cc6:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <CheckUART+0x270>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24
				//  Vanst = 0;
	 			//đk van đóng
	 		}
	 	//}
	 	//for (int i =0; i<=strlen(Rx_Buffer); i++){ // chế độ auto
	 		if(Rx_Buffer[i] =='m' && Rx_Buffer[i+1]=='a'&& Rx_Buffer[i+2]=='n'){
 8005cce:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <CheckUART+0x268>)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b6d      	cmp	r3, #109	; 0x6d
 8005cd8:	d113      	bne.n	8005d02 <CheckUART+0x216>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <CheckUART+0x268>)
 8005ce0:	5cd3      	ldrb	r3, [r2, r3]
 8005ce2:	2b61      	cmp	r3, #97	; 0x61
 8005ce4:	d10d      	bne.n	8005d02 <CheckUART+0x216>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	4a1a      	ldr	r2, [pc, #104]	; (8005d54 <CheckUART+0x268>)
 8005cec:	5cd3      	ldrb	r3, [r2, r3]
 8005cee:	2b6e      	cmp	r3, #110	; 0x6e
 8005cf0:	d107      	bne.n	8005d02 <CheckUART+0x216>

	 			ctrmode = 1;
 8005cf2:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <CheckUART+0x280>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
	 			//num = MANUAL;
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005cf8:	4b18      	ldr	r3, [pc, #96]	; (8005d5c <CheckUART+0x270>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
 8005d00:	e018      	b.n	8005d34 <CheckUART+0x248>
				//  FLAG1=1;
				//  FLAG2=1;
				//  FLAG3=1;
				//  FLAG4=1;
	 		}
	 		else if(Rx_Buffer[i] =='a' && Rx_Buffer[i+1]=='u'&& Rx_Buffer[i+2]=='t'){ // chế độ manual
 8005d02:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <CheckUART+0x268>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4413      	add	r3, r2
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b61      	cmp	r3, #97	; 0x61
 8005d0c:	d112      	bne.n	8005d34 <CheckUART+0x248>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3301      	adds	r3, #1
 8005d12:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <CheckUART+0x268>)
 8005d14:	5cd3      	ldrb	r3, [r2, r3]
 8005d16:	2b75      	cmp	r3, #117	; 0x75
 8005d18:	d10c      	bne.n	8005d34 <CheckUART+0x248>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	4a0d      	ldr	r2, [pc, #52]	; (8005d54 <CheckUART+0x268>)
 8005d20:	5cd3      	ldrb	r3, [r2, r3]
 8005d22:	2b74      	cmp	r3, #116	; 0x74
 8005d24:	d106      	bne.n	8005d34 <CheckUART+0x248>

	 			ctrmode = 0;
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <CheckUART+0x280>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
	 			//num = AUTO;
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <CheckUART+0x270>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2200      	movs	r2, #0
 8005d32:	625a      	str	r2, [r3, #36]	; 0x24
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3301      	adds	r3, #1
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	4806      	ldr	r0, [pc, #24]	; (8005d54 <CheckUART+0x268>)
 8005d3c:	f7fa fa50 	bl	80001e0 <strlen>
 8005d40:	4602      	mov	r2, r0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	f4bf aedc 	bcs.w	8005b02 <CheckUART+0x16>
				//  FLAG2=1;
				//  FLAG3=1;
				//  FLAG4=1;
	 		}
	 	}
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	e02f      	b.n	8005db0 <CheckUART+0x2c4>
 8005d50:	20004091 	.word	0x20004091
 8005d54:	2000428c 	.word	0x2000428c
 8005d58:	20004304 	.word	0x20004304
 8005d5c:	2000430c 	.word	0x2000430c
 8005d60:	200040f0 	.word	0x200040f0
 8005d64:	20004228 	.word	0x20004228
 8005d68:	20004380 	.word	0x20004380
 8005d6c:	20004154 	.word	0x20004154
		  if(Rx_Buffer[i] =='s' && Rx_Buffer[i+1]=='t'&& Rx_Buffer[i+2]=='a'){
 8005d70:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <CheckUART+0x2e8>)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	4413      	add	r3, r2
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b73      	cmp	r3, #115	; 0x73
 8005d7a:	d116      	bne.n	8005daa <CheckUART+0x2be>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	4a14      	ldr	r2, [pc, #80]	; (8005dd4 <CheckUART+0x2e8>)
 8005d82:	5cd3      	ldrb	r3, [r2, r3]
 8005d84:	2b74      	cmp	r3, #116	; 0x74
 8005d86:	d110      	bne.n	8005daa <CheckUART+0x2be>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	4a11      	ldr	r2, [pc, #68]	; (8005dd4 <CheckUART+0x2e8>)
 8005d8e:	5cd3      	ldrb	r3, [r2, r3]
 8005d90:	2b61      	cmp	r3, #97	; 0x61
 8005d92:	d10a      	bne.n	8005daa <CheckUART+0x2be>
				//	humidity = humidity;
				//	tvoc_ppb = tvoc_ppb;
					//khong the doc tu cam bien
			  //}

			  Convertvalue();
 8005d94:	f7ff fb22 	bl	80053dc <Convertvalue>
			  FrameUART();
 8005d98:	f7ff fbf6 	bl	8005588 <FrameUART>
			  HAL_UART_Transmit(&huart1, (char *) &frame, sizeof(frame), HAL_MAX_DELAY);
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	223c      	movs	r2, #60	; 0x3c
 8005da2:	490d      	ldr	r1, [pc, #52]	; (8005dd8 <CheckUART+0x2ec>)
 8005da4:	480d      	ldr	r0, [pc, #52]	; (8005ddc <CheckUART+0x2f0>)
 8005da6:	f7fc ff1f 	bl	8002be8 <HAL_UART_Transmit>
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	3301      	adds	r3, #1
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	4808      	ldr	r0, [pc, #32]	; (8005dd4 <CheckUART+0x2e8>)
 8005db2:	f7fa fa15 	bl	80001e0 <strlen>
 8005db6:	4602      	mov	r2, r0
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d2d8      	bcs.n	8005d70 <CheckUART+0x284>
		   }
	  }

	  Transfer_cplt = 0;
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <CheckUART+0x2f4>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(400);
 8005dc4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005dc8:	f7fa fe08 	bl	80009dc <HAL_Delay>
  }
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	2000428c 	.word	0x2000428c
 8005dd8:	200042c8 	.word	0x200042c8
 8005ddc:	200041cc 	.word	0x200041cc
 8005de0:	20004091 	.word	0x20004091

08005de4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a04      	ldr	r2, [pc, #16]	; (8005e04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005df6:	f7fa fdd1 	bl	800099c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40000800 	.word	0x40000800

08005e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e1e:	2300      	movs	r3, #0
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_MspInit+0x54>)
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	4a11      	ldr	r2, [pc, #68]	; (8005e6c <HAL_MspInit+0x54>)
 8005e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <HAL_MspInit+0x54>)
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e36:	607b      	str	r3, [r7, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <HAL_MspInit+0x54>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <HAL_MspInit+0x54>)
 8005e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e48:	6413      	str	r3, [r2, #64]	; 0x40
 8005e4a:	4b08      	ldr	r3, [pc, #32]	; (8005e6c <HAL_MspInit+0x54>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005e56:	2200      	movs	r2, #0
 8005e58:	210f      	movs	r1, #15
 8005e5a:	f06f 0001 	mvn.w	r0, #1
 8005e5e:	f7fa fe97 	bl	8000b90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800

08005e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a19      	ldr	r2, [pc, #100]	; (8005ef4 <HAL_I2C_MspInit+0x84>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d12b      	bne.n	8005eea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <HAL_I2C_MspInit+0x88>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <HAL_I2C_MspInit+0x88>)
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <HAL_I2C_MspInit+0x88>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005eae:	23c0      	movs	r3, #192	; 0xc0
 8005eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005eb2:	2312      	movs	r3, #18
 8005eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ec2:	f107 0314 	add.w	r3, r7, #20
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	480c      	ldr	r0, [pc, #48]	; (8005efc <HAL_I2C_MspInit+0x8c>)
 8005eca:	f7fa fead 	bl	8000c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <HAL_I2C_MspInit+0x88>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <HAL_I2C_MspInit+0x88>)
 8005ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005edc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_I2C_MspInit+0x88>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005eea:	bf00      	nop
 8005eec:	3728      	adds	r7, #40	; 0x28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40005400 	.word	0x40005400
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40020400 	.word	0x40020400

08005f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f08:	f107 0314 	add.w	r3, r7, #20
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2c      	ldr	r2, [pc, #176]	; (8005fd0 <HAL_SPI_MspInit+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d152      	bne.n	8005fc8 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f30:	6413      	str	r3, [r2, #64]	; 0x40
 8005f32:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f48:	f043 0304 	orr.w	r3, r3, #4
 8005f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4e:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60bb      	str	r3, [r7, #8]
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <HAL_SPI_MspInit+0xd4>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	60bb      	str	r3, [r7, #8]
 8005f74:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005f76:	230c      	movs	r3, #12
 8005f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f82:	2303      	movs	r3, #3
 8005f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005f86:	2305      	movs	r3, #5
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f8a:	f107 0314 	add.w	r3, r7, #20
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4811      	ldr	r0, [pc, #68]	; (8005fd8 <HAL_SPI_MspInit+0xd8>)
 8005f92:	f7fa fe49 	bl	8000c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005fa8:	2305      	movs	r3, #5
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fac:	f107 0314 	add.w	r3, r7, #20
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	480a      	ldr	r0, [pc, #40]	; (8005fdc <HAL_SPI_MspInit+0xdc>)
 8005fb4:	f7fa fe38 	bl	8000c28 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2105      	movs	r1, #5
 8005fbc:	2024      	movs	r0, #36	; 0x24
 8005fbe:	f7fa fde7 	bl	8000b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005fc2:	2024      	movs	r0, #36	; 0x24
 8005fc4:	f7fa fe00 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005fc8:	bf00      	nop
 8005fca:	3728      	adds	r7, #40	; 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40003800 	.word	0x40003800
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	40020800 	.word	0x40020800
 8005fdc:	40020400 	.word	0x40020400

08005fe0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <HAL_TIM_PWM_MspInit+0xa8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10e      	bne.n	8006010 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	4b25      	ldr	r3, [pc, #148]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	4a24      	ldr	r2, [pc, #144]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	6453      	str	r3, [r2, #68]	; 0x44
 8006002:	4b22      	ldr	r3, [pc, #136]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800600e:	e036      	b.n	800607e <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006018:	d116      	bne.n	8006048 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	4b1b      	ldr	r3, [pc, #108]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	4a1a      	ldr	r2, [pc, #104]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	6413      	str	r3, [r2, #64]	; 0x40
 800602a:	4b18      	ldr	r3, [pc, #96]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8006036:	2200      	movs	r2, #0
 8006038:	2105      	movs	r1, #5
 800603a:	201c      	movs	r0, #28
 800603c:	f7fa fda8 	bl	8000b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006040:	201c      	movs	r0, #28
 8006042:	f7fa fdc1 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
}
 8006046:	e01a      	b.n	800607e <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM3)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a10      	ldr	r2, [pc, #64]	; (8006090 <HAL_TIM_PWM_MspInit+0xb0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d115      	bne.n	800607e <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	4b0d      	ldr	r3, [pc, #52]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	4a0c      	ldr	r2, [pc, #48]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	6413      	str	r3, [r2, #64]	; 0x40
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <HAL_TIM_PWM_MspInit+0xac>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800606e:	2200      	movs	r2, #0
 8006070:	2105      	movs	r1, #5
 8006072:	201d      	movs	r0, #29
 8006074:	f7fa fd8c 	bl	8000b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006078:	201d      	movs	r0, #29
 800607a:	f7fa fda5 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
}
 800607e:	bf00      	nop
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40010000 	.word	0x40010000
 800608c:	40023800 	.word	0x40023800
 8006090:	40000400 	.word	0x40000400

08006094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800609c:	f107 0314 	add.w	r3, r7, #20
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a36      	ldr	r2, [pc, #216]	; (800618c <HAL_TIM_MspPostInit+0xf8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d11f      	bne.n	80060f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	4b35      	ldr	r3, [pc, #212]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	4a34      	ldr	r2, [pc, #208]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	6313      	str	r3, [r2, #48]	; 0x30
 80060c6:	4b32      	ldr	r3, [pc, #200]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80060d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80060d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d8:	2302      	movs	r3, #2
 80060da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060e0:	2300      	movs	r3, #0
 80060e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80060e4:	2301      	movs	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060e8:	f107 0314 	add.w	r3, r7, #20
 80060ec:	4619      	mov	r1, r3
 80060ee:	4829      	ldr	r0, [pc, #164]	; (8006194 <HAL_TIM_MspPostInit+0x100>)
 80060f0:	f7fa fd9a 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80060f4:	e046      	b.n	8006184 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fe:	d11e      	bne.n	800613e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	4b22      	ldr	r3, [pc, #136]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	4a21      	ldr	r2, [pc, #132]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	6313      	str	r3, [r2, #48]	; 0x30
 8006110:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800611c:	2307      	movs	r3, #7
 800611e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006120:	2302      	movs	r3, #2
 8006122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006128:	2300      	movs	r3, #0
 800612a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800612c:	2301      	movs	r3, #1
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006130:	f107 0314 	add.w	r3, r7, #20
 8006134:	4619      	mov	r1, r3
 8006136:	4817      	ldr	r0, [pc, #92]	; (8006194 <HAL_TIM_MspPostInit+0x100>)
 8006138:	f7fa fd76 	bl	8000c28 <HAL_GPIO_Init>
}
 800613c:	e022      	b.n	8006184 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <HAL_TIM_MspPostInit+0x104>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d11d      	bne.n	8006184 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006148:	2300      	movs	r3, #0
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6313      	str	r3, [r2, #48]	; 0x30
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <HAL_TIM_MspPostInit+0xfc>)
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006164:	23c0      	movs	r3, #192	; 0xc0
 8006166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006168:	2302      	movs	r3, #2
 800616a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616c:	2300      	movs	r3, #0
 800616e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006170:	2300      	movs	r3, #0
 8006172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006174:	2302      	movs	r3, #2
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	4619      	mov	r1, r3
 800617e:	4805      	ldr	r0, [pc, #20]	; (8006194 <HAL_TIM_MspPostInit+0x100>)
 8006180:	f7fa fd52 	bl	8000c28 <HAL_GPIO_Init>
}
 8006184:	bf00      	nop
 8006186:	3728      	adds	r7, #40	; 0x28
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40010000 	.word	0x40010000
 8006190:	40023800 	.word	0x40023800
 8006194:	40020000 	.word	0x40020000
 8006198:	40000400 	.word	0x40000400

0800619c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	; 0x28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a4:	f107 0314 	add.w	r3, r7, #20
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	609a      	str	r2, [r3, #8]
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a1d      	ldr	r2, [pc, #116]	; (8006230 <HAL_UART_MspInit+0x94>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d134      	bne.n	8006228 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	4b1c      	ldr	r3, [pc, #112]	; (8006234 <HAL_UART_MspInit+0x98>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	4a1b      	ldr	r2, [pc, #108]	; (8006234 <HAL_UART_MspInit+0x98>)
 80061c8:	f043 0310 	orr.w	r3, r3, #16
 80061cc:	6453      	str	r3, [r2, #68]	; 0x44
 80061ce:	4b19      	ldr	r3, [pc, #100]	; (8006234 <HAL_UART_MspInit+0x98>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	4b15      	ldr	r3, [pc, #84]	; (8006234 <HAL_UART_MspInit+0x98>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	4a14      	ldr	r2, [pc, #80]	; (8006234 <HAL_UART_MspInit+0x98>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ea:	4b12      	ldr	r3, [pc, #72]	; (8006234 <HAL_UART_MspInit+0x98>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80061f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fc:	2302      	movs	r3, #2
 80061fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006200:	2301      	movs	r3, #1
 8006202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006204:	2303      	movs	r3, #3
 8006206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006208:	2307      	movs	r3, #7
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	4619      	mov	r1, r3
 8006212:	4809      	ldr	r0, [pc, #36]	; (8006238 <HAL_UART_MspInit+0x9c>)
 8006214:	f7fa fd08 	bl	8000c28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006218:	2200      	movs	r2, #0
 800621a:	2105      	movs	r1, #5
 800621c:	2025      	movs	r0, #37	; 0x25
 800621e:	f7fa fcb7 	bl	8000b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006222:	2025      	movs	r0, #37	; 0x25
 8006224:	f7fa fcd0 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006228:	bf00      	nop
 800622a:	3728      	adds	r7, #40	; 0x28
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40011000 	.word	0x40011000
 8006234:	40023800 	.word	0x40023800
 8006238:	40020000 	.word	0x40020000

0800623c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	; 0x30
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800624c:	2200      	movs	r2, #0
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	201e      	movs	r0, #30
 8006252:	f7fa fc9d 	bl	8000b90 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8006256:	201e      	movs	r0, #30
 8006258:	f7fa fcb6 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	4b1f      	ldr	r3, [pc, #124]	; (80062e0 <HAL_InitTick+0xa4>)
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <HAL_InitTick+0xa4>)
 8006266:	f043 0304 	orr.w	r3, r3, #4
 800626a:	6413      	str	r3, [r2, #64]	; 0x40
 800626c:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <HAL_InitTick+0xa4>)
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006278:	f107 0210 	add.w	r2, r7, #16
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f7fb fb9e 	bl	80019c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006288:	f7fb fb74 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 800628c:	4603      	mov	r3, r0
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <HAL_InitTick+0xa8>)
 8006296:	fba2 2303 	umull	r2, r3, r2, r3
 800629a:	0c9b      	lsrs	r3, r3, #18
 800629c:	3b01      	subs	r3, #1
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <HAL_InitTick+0xac>)
 80062a2:	4a12      	ldr	r2, [pc, #72]	; (80062ec <HAL_InitTick+0xb0>)
 80062a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80062a6:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <HAL_InitTick+0xac>)
 80062a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80062ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80062ae:	4a0e      	ldr	r2, [pc, #56]	; (80062e8 <HAL_InitTick+0xac>)
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80062b4:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <HAL_InitTick+0xac>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <HAL_InitTick+0xac>)
 80062bc:	2200      	movs	r2, #0
 80062be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80062c0:	4809      	ldr	r0, [pc, #36]	; (80062e8 <HAL_InitTick+0xac>)
 80062c2:	f7fb ff13 	bl	80020ec <HAL_TIM_Base_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80062cc:	4806      	ldr	r0, [pc, #24]	; (80062e8 <HAL_InitTick+0xac>)
 80062ce:	f7fb ff42 	bl	8002156 <HAL_TIM_Base_Start_IT>
 80062d2:	4603      	mov	r3, r0
 80062d4:	e000      	b.n	80062d8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3730      	adds	r7, #48	; 0x30
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40023800 	.word	0x40023800
 80062e4:	431bde83 	.word	0x431bde83
 80062e8:	20004384 	.word	0x20004384
 80062ec:	40000800 	.word	0x40000800

080062f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80062f4:	bf00      	nop
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006302:	e7fe      	b.n	8006302 <HardFault_Handler+0x4>

08006304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006308:	e7fe      	b.n	8006308 <MemManage_Handler+0x4>

0800630a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800630a:	b480      	push	{r7}
 800630c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800630e:	e7fe      	b.n	800630e <BusFault_Handler+0x4>

08006310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006314:	e7fe      	b.n	8006314 <UsageFault_Handler+0x4>

08006316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006316:	b480      	push	{r7}
 8006318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800631a:	bf00      	nop
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006328:	4802      	ldr	r0, [pc, #8]	; (8006334 <TIM2_IRQHandler+0x10>)
 800632a:	f7fb ff63 	bl	80021f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800632e:	bf00      	nop
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2000430c 	.word	0x2000430c

08006338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800633c:	4802      	ldr	r0, [pc, #8]	; (8006348 <TIM3_IRQHandler+0x10>)
 800633e:	f7fb ff59 	bl	80021f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20004158 	.word	0x20004158

0800634c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006350:	4802      	ldr	r0, [pc, #8]	; (800635c <TIM4_IRQHandler+0x10>)
 8006352:	f7fb ff4f 	bl	80021f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006356:	bf00      	nop
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20004384 	.word	0x20004384

08006360 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006364:	4802      	ldr	r0, [pc, #8]	; (8006370 <SPI2_IRQHandler+0x10>)
 8006366:	f7fb fcf7 	bl	8001d58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20004098 	.word	0x20004098

08006374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006378:	4802      	ldr	r0, [pc, #8]	; (8006384 <USART1_IRQHandler+0x10>)
 800637a:	f7fc fd23 	bl	8002dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	200041cc 	.word	0x200041cc

08006388 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <_sbrk+0x50>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d102      	bne.n	800639e <_sbrk+0x16>
		heap_end = &end;
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <_sbrk+0x50>)
 800639a:	4a10      	ldr	r2, [pc, #64]	; (80063dc <_sbrk+0x54>)
 800639c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <_sbrk+0x50>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80063a4:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <_sbrk+0x50>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4413      	add	r3, r2
 80063ac:	466a      	mov	r2, sp
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d907      	bls.n	80063c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80063b2:	f000 fd53 	bl	8006e5c <__errno>
 80063b6:	4602      	mov	r2, r0
 80063b8:	230c      	movs	r3, #12
 80063ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80063bc:	f04f 33ff 	mov.w	r3, #4294967295
 80063c0:	e006      	b.n	80063d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <_sbrk+0x50>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4413      	add	r3, r2
 80063ca:	4a03      	ldr	r2, [pc, #12]	; (80063d8 <_sbrk+0x50>)
 80063cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80063ce:	68fb      	ldr	r3, [r7, #12]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20004078 	.word	0x20004078
 80063dc:	200043d0 	.word	0x200043d0

080063e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063e4:	4b16      	ldr	r3, [pc, #88]	; (8006440 <SystemInit+0x60>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ea:	4a15      	ldr	r2, [pc, #84]	; (8006440 <SystemInit+0x60>)
 80063ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80063f4:	4b13      	ldr	r3, [pc, #76]	; (8006444 <SystemInit+0x64>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a12      	ldr	r2, [pc, #72]	; (8006444 <SystemInit+0x64>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006400:	4b10      	ldr	r3, [pc, #64]	; (8006444 <SystemInit+0x64>)
 8006402:	2200      	movs	r2, #0
 8006404:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006406:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <SystemInit+0x64>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a0e      	ldr	r2, [pc, #56]	; (8006444 <SystemInit+0x64>)
 800640c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006414:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006416:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <SystemInit+0x64>)
 8006418:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <SystemInit+0x68>)
 800641a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800641c:	4b09      	ldr	r3, [pc, #36]	; (8006444 <SystemInit+0x64>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a08      	ldr	r2, [pc, #32]	; (8006444 <SystemInit+0x64>)
 8006422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006426:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <SystemInit+0x64>)
 800642a:	2200      	movs	r2, #0
 800642c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800642e:	4b04      	ldr	r3, [pc, #16]	; (8006440 <SystemInit+0x60>)
 8006430:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006434:	609a      	str	r2, [r3, #8]
#endif
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	e000ed00 	.word	0xe000ed00
 8006444:	40023800 	.word	0x40023800
 8006448:	24003010 	.word	0x24003010

0800644c <tft_init>:
/********************************************************************************************************************************/
/********************************************************************************************************************************/
/********************************************************************************************************************************/

void tft_init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_SET);
 8006450:	2201      	movs	r2, #1
 8006452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006456:	489a      	ldr	r0, [pc, #616]	; (80066c0 <tft_init+0x274>)
 8006458:	f7fa fd68 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800645c:	2005      	movs	r0, #5
 800645e:	f7fa fabd 	bl	80009dc <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_RESET);
 8006462:	2200      	movs	r2, #0
 8006464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006468:	4895      	ldr	r0, [pc, #596]	; (80066c0 <tft_init+0x274>)
 800646a:	f7fa fd5f 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800646e:	2005      	movs	r0, #5
 8006470:	f7fa fab4 	bl	80009dc <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_SET);
 8006474:	2201      	movs	r2, #1
 8006476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800647a:	4891      	ldr	r0, [pc, #580]	; (80066c0 <tft_init+0x274>)
 800647c:	f7fa fd56 	bl	8000f2c <HAL_GPIO_WritePin>

	SPI_ENABLE;
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006486:	488e      	ldr	r0, [pc, #568]	; (80066c0 <tft_init+0x274>)
 8006488:	f7fa fd50 	bl	8000f2c <HAL_GPIO_WritePin>
 800648c:	2001      	movs	r0, #1
 800648e:	f7fa faa5 	bl	80009dc <HAL_Delay>
	
		tft_write_register(0xCB);
 8006492:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8006496:	f000 fb35 	bl	8006b04 <tft_write_register>
		tft_write_data_8bit(0x39);
 800649a:	2039      	movs	r0, #57	; 0x39
 800649c:	f000 faf4 	bl	8006a88 <tft_write_data_8bit>
		tft_write_data_8bit(0x2C);
 80064a0:	202c      	movs	r0, #44	; 0x2c
 80064a2:	f000 faf1 	bl	8006a88 <tft_write_data_8bit>
		tft_write_data_8bit(0x00);
 80064a6:	2000      	movs	r0, #0
 80064a8:	f000 faee 	bl	8006a88 <tft_write_data_8bit>
		tft_write_data_8bit(0x34);
 80064ac:	2034      	movs	r0, #52	; 0x34
 80064ae:	f000 faeb 	bl	8006a88 <tft_write_data_8bit>
		tft_write_data_8bit(0x02);
 80064b2:	2002      	movs	r0, #2
 80064b4:	f000 fae8 	bl	8006a88 <tft_write_data_8bit>

        tft_write_register(0xCF);  
 80064b8:	f06f 0030 	mvn.w	r0, #48	; 0x30
 80064bc:	f000 fb22 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x00); 
 80064c0:	2000      	movs	r0, #0
 80064c2:	f000 fae1 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0XC1); 
 80064c6:	20c1      	movs	r0, #193	; 0xc1
 80064c8:	f000 fade 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0X30); 
 80064cc:	2030      	movs	r0, #48	; 0x30
 80064ce:	f000 fadb 	bl	8006a88 <tft_write_data_8bit>
 //1
        tft_write_register(0xE8);  
 80064d2:	f06f 0017 	mvn.w	r0, #23
 80064d6:	f000 fb15 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x85); 
 80064da:	2085      	movs	r0, #133	; 0x85
 80064dc:	f000 fad4 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 80064e0:	2000      	movs	r0, #0
 80064e2:	f000 fad1 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x78); 
 80064e6:	2078      	movs	r0, #120	; 0x78
 80064e8:	f000 face 	bl	8006a88 <tft_write_data_8bit>
 //2
        tft_write_register(0xEA);  
 80064ec:	f06f 0015 	mvn.w	r0, #21
 80064f0:	f000 fb08 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x00); 
 80064f4:	2000      	movs	r0, #0
 80064f6:	f000 fac7 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 80064fa:	2000      	movs	r0, #0
 80064fc:	f000 fac4 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0xED);  
 8006500:	f06f 0012 	mvn.w	r0, #18
 8006504:	f000 fafe 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x64); 
 8006508:	2064      	movs	r0, #100	; 0x64
 800650a:	f000 fabd 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 800650e:	2003      	movs	r0, #3
 8006510:	f000 faba 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0X12); 
 8006514:	2012      	movs	r0, #18
 8006516:	f000 fab7 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0X81); 
 800651a:	2081      	movs	r0, #129	; 0x81
 800651c:	f000 fab4 	bl	8006a88 <tft_write_data_8bit>

        tft_write_register(0xF7);  
 8006520:	f06f 0008 	mvn.w	r0, #8
 8006524:	f000 faee 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x20); 
 8006528:	2020      	movs	r0, #32
 800652a:	f000 faad 	bl	8006a88 <tft_write_data_8bit>
  
        tft_write_register(0xC0);    
 800652e:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 8006532:	f000 fae7 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x23);   
 8006536:	2023      	movs	r0, #35	; 0x23
 8006538:	f000 faa6 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0xC1);   
 800653c:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 8006540:	f000 fae0 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x10);   
 8006544:	2010      	movs	r0, #16
 8006546:	f000 fa9f 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0xC5);    
 800654a:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 800654e:	f000 fad9 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x3e); 
 8006552:	203e      	movs	r0, #62	; 0x3e
 8006554:	f000 fa98 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x28); 
 8006558:	2028      	movs	r0, #40	; 0x28
 800655a:	f000 fa95 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0xC7);    
 800655e:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8006562:	f000 facf 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x86);  
 8006566:	2086      	movs	r0, #134	; 0x86
 8006568:	f000 fa8e 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0x36);    
 800656c:	2036      	movs	r0, #54	; 0x36
 800656e:	f000 fac9 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x48); 
 8006572:	2048      	movs	r0, #72	; 0x48
 8006574:	f000 fa88 	bl	8006a88 <tft_write_data_8bit>

        tft_write_register(0x3A);    
 8006578:	203a      	movs	r0, #58	; 0x3a
 800657a:	f000 fac3 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x55); 
 800657e:	2055      	movs	r0, #85	; 0x55
 8006580:	f000 fa82 	bl	8006a88 <tft_write_data_8bit>

        tft_write_register(0xB1);    
 8006584:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 8006588:	f000 fabc 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x00);  
 800658c:	2000      	movs	r0, #0
 800658e:	f000 fa7b 	bl	8006a88 <tft_write_data_8bit>
        //tft_write_data_8bit(0x18);
        //tft_write_data_8bit(0x1B);
        tft_write_data_8bit(0x13);
 8006592:	2013      	movs	r0, #19
 8006594:	f000 fa78 	bl	8006a88 <tft_write_data_8bit>

        tft_write_register(0xB6);    
 8006598:	f06f 0049 	mvn.w	r0, #73	; 0x49
 800659c:	f000 fab2 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x08); 
 80065a0:	2008      	movs	r0, #8
 80065a2:	f000 fa71 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x82);
 80065a6:	2082      	movs	r0, #130	; 0x82
 80065a8:	f000 fa6e 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x27);  
 80065ac:	2027      	movs	r0, #39	; 0x27
 80065ae:	f000 fa6b 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0xF2);    
 80065b2:	f06f 000d 	mvn.w	r0, #13
 80065b6:	f000 faa5 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x00); 
 80065ba:	2000      	movs	r0, #0
 80065bc:	f000 fa64 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0x26);    
 80065c0:	2026      	movs	r0, #38	; 0x26
 80065c2:	f000 fa9f 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x01); 
 80065c6:	2001      	movs	r0, #1
 80065c8:	f000 fa5e 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0xE0);    
 80065cc:	f06f 001f 	mvn.w	r0, #31
 80065d0:	f000 fa98 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x0F); 
 80065d4:	200f      	movs	r0, #15
 80065d6:	f000 fa57 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 80065da:	2031      	movs	r0, #49	; 0x31
 80065dc:	f000 fa54 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x2B); 
 80065e0:	202b      	movs	r0, #43	; 0x2b
 80065e2:	f000 fa51 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x0C); 
 80065e6:	200c      	movs	r0, #12
 80065e8:	f000 fa4e 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 80065ec:	200e      	movs	r0, #14
 80065ee:	f000 fa4b 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x08); 
 80065f2:	2008      	movs	r0, #8
 80065f4:	f000 fa48 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x4E); 
 80065f8:	204e      	movs	r0, #78	; 0x4e
 80065fa:	f000 fa45 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0xF1); 
 80065fe:	20f1      	movs	r0, #241	; 0xf1
 8006600:	f000 fa42 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x37); 
 8006604:	2037      	movs	r0, #55	; 0x37
 8006606:	f000 fa3f 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x07); 
 800660a:	2007      	movs	r0, #7
 800660c:	f000 fa3c 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x10); 
 8006610:	2010      	movs	r0, #16
 8006612:	f000 fa39 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 8006616:	2003      	movs	r0, #3
 8006618:	f000 fa36 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 800661c:	200e      	movs	r0, #14
 800661e:	f000 fa33 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x09); 
 8006622:	2009      	movs	r0, #9
 8006624:	f000 fa30 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 8006628:	2000      	movs	r0, #0
 800662a:	f000 fa2d 	bl	8006a88 <tft_write_data_8bit>

        tft_write_register(0XE1);     
 800662e:	f06f 001e 	mvn.w	r0, #30
 8006632:	f000 fa67 	bl	8006b04 <tft_write_register>
        tft_write_data_8bit(0x00); 
 8006636:	2000      	movs	r0, #0
 8006638:	f000 fa26 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 800663c:	200e      	movs	r0, #14
 800663e:	f000 fa23 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x14); 
 8006642:	2014      	movs	r0, #20
 8006644:	f000 fa20 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 8006648:	2003      	movs	r0, #3
 800664a:	f000 fa1d 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x11); 
 800664e:	2011      	movs	r0, #17
 8006650:	f000 fa1a 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x07); 
 8006654:	2007      	movs	r0, #7
 8006656:	f000 fa17 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 800665a:	2031      	movs	r0, #49	; 0x31
 800665c:	f000 fa14 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0xC1); 
 8006660:	20c1      	movs	r0, #193	; 0xc1
 8006662:	f000 fa11 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x48); 
 8006666:	2048      	movs	r0, #72	; 0x48
 8006668:	f000 fa0e 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x08); 
 800666c:	2008      	movs	r0, #8
 800666e:	f000 fa0b 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x0F); 
 8006672:	200f      	movs	r0, #15
 8006674:	f000 fa08 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x0C); 
 8006678:	200c      	movs	r0, #12
 800667a:	f000 fa05 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 800667e:	2031      	movs	r0, #49	; 0x31
 8006680:	f000 fa02 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x36); 
 8006684:	2036      	movs	r0, #54	; 0x36
 8006686:	f000 f9ff 	bl	8006a88 <tft_write_data_8bit>
        tft_write_data_8bit(0x0F); 
 800668a:	200f      	movs	r0, #15
 800668c:	f000 f9fc 	bl	8006a88 <tft_write_data_8bit>
 
        tft_write_register(0x11);    
 8006690:	2011      	movs	r0, #17
 8006692:	f000 fa37 	bl	8006b04 <tft_write_register>
        HAL_Delay(120); 
 8006696:	2078      	movs	r0, #120	; 0x78
 8006698:	f7fa f9a0 	bl	80009dc <HAL_Delay>
				
        tft_write_register(0x29);    
 800669c:	2029      	movs	r0, #41	; 0x29
 800669e:	f000 fa31 	bl	8006b04 <tft_write_register>
        tft_write_register(0x2c); 
 80066a2:	202c      	movs	r0, #44	; 0x2c
 80066a4:	f000 fa2e 	bl	8006b04 <tft_write_register>
				
				
				SPI_DISABLE;
 80066a8:	2201      	movs	r2, #1
 80066aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066ae:	4804      	ldr	r0, [pc, #16]	; (80066c0 <tft_init+0x274>)
 80066b0:	f7fa fc3c 	bl	8000f2c <HAL_GPIO_WritePin>
 80066b4:	2001      	movs	r0, #1
 80066b6:	f7fa f991 	bl	80009dc <HAL_Delay>
}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40020800 	.word	0x40020800

080066c4 <tft_puts8x16>:

void tft_puts8x16(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60ba      	str	r2, [r7, #8]
 80066cc:	461a      	mov	r2, r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	81fb      	strh	r3, [r7, #14]
 80066d2:	460b      	mov	r3, r1
 80066d4:	81bb      	strh	r3, [r7, #12]
 80066d6:	4613      	mov	r3, r2
 80066d8:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 80066de:	2200      	movs	r2, #0
 80066e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066e4:	481d      	ldr	r0, [pc, #116]	; (800675c <tft_puts8x16+0x98>)
 80066e6:	f7fa fc21 	bl	8000f2c <HAL_GPIO_WritePin>
 80066ea:	2001      	movs	r0, #1
 80066ec:	f7fa f976 	bl	80009dc <HAL_Delay>
	  while(*(string+i)!='\0')
 80066f0:	e020      	b.n	8006734 <tft_puts8x16+0x70>
    {       
        if(column>LCD_W-16){column=0;row+=16;}
 80066f2:	89bb      	ldrh	r3, [r7, #12]
 80066f4:	2be0      	cmp	r3, #224	; 0xe0
 80066f6:	d904      	bls.n	8006702 <tft_puts8x16+0x3e>
 80066f8:	2300      	movs	r3, #0
 80066fa:	81bb      	strh	r3, [r7, #12]
 80066fc:	89fb      	ldrh	r3, [r7, #14]
 80066fe:	3310      	adds	r3, #16
 8006700:	81fb      	strh	r3, [r7, #14]
        if(row>LCD_H-16){row=column=0;}
 8006702:	89fb      	ldrh	r3, [r7, #14]
 8006704:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006708:	d903      	bls.n	8006712 <tft_puts8x16+0x4e>
 800670a:	2300      	movs	r3, #0
 800670c:	81bb      	strh	r3, [r7, #12]
 800670e:	89bb      	ldrh	r3, [r7, #12]
 8006710:	81fb      	strh	r3, [r7, #14]
        tft_putchar(column,row,*(string+i),TFT_STRING_MODE);
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	4413      	add	r3, r2
 8006718:	f993 3000 	ldrsb.w	r3, [r3]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	89f9      	ldrh	r1, [r7, #14]
 8006722:	89b8      	ldrh	r0, [r7, #12]
 8006724:	f000 fa54 	bl	8006bd0 <tft_putchar>
        column+=8;
 8006728:	89bb      	ldrh	r3, [r7, #12]
 800672a:	3308      	adds	r3, #8
 800672c:	81bb      	strh	r3, [r7, #12]
        i++;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	3301      	adds	r3, #1
 8006732:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 8006734:	7dfb      	ldrb	r3, [r7, #23]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	4413      	add	r3, r2
 800673a:	f993 3000 	ldrsb.w	r3, [r3]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1d7      	bne.n	80066f2 <tft_puts8x16+0x2e>
    }  
	SPI_DISABLE;
 8006742:	2201      	movs	r2, #1
 8006744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006748:	4804      	ldr	r0, [pc, #16]	; (800675c <tft_puts8x16+0x98>)
 800674a:	f7fa fbef 	bl	8000f2c <HAL_GPIO_WritePin>
 800674e:	2001      	movs	r0, #1
 8006750:	f7fa f944 	bl	80009dc <HAL_Delay>
}
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40020800 	.word	0x40020800

08006760 <tft_puts26x48>:
        i++;
    }  
	SPI_DISABLE;
}
void tft_puts26x48(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60ba      	str	r2, [r7, #8]
 8006768:	461a      	mov	r2, r3
 800676a:	4603      	mov	r3, r0
 800676c:	81fb      	strh	r3, [r7, #14]
 800676e:	460b      	mov	r3, r1
 8006770:	81bb      	strh	r3, [r7, #12]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 800677a:	2200      	movs	r2, #0
 800677c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006780:	4815      	ldr	r0, [pc, #84]	; (80067d8 <tft_puts26x48+0x78>)
 8006782:	f7fa fbd3 	bl	8000f2c <HAL_GPIO_WritePin>
 8006786:	2001      	movs	r0, #1
 8006788:	f7fa f928 	bl	80009dc <HAL_Delay>
	  while(*(string+i)!='\0')
 800678c:	e010      	b.n	80067b0 <tft_puts26x48+0x50>
    {       
				tft_putchar26x48(column,row,*(string+i),TFT_STRING_MODE);
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	4413      	add	r3, r2
 8006794:	f993 3000 	ldrsb.w	r3, [r3]
 8006798:	b2da      	uxtb	r2, r3
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	89f9      	ldrh	r1, [r7, #14]
 800679e:	89b8      	ldrh	r0, [r7, #12]
 80067a0:	f000 faaa 	bl	8006cf8 <tft_putchar26x48>
        column+=26;
 80067a4:	89bb      	ldrh	r3, [r7, #12]
 80067a6:	331a      	adds	r3, #26
 80067a8:	81bb      	strh	r3, [r7, #12]
        i++;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	3301      	adds	r3, #1
 80067ae:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4413      	add	r3, r2
 80067b6:	f993 3000 	ldrsb.w	r3, [r3]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e7      	bne.n	800678e <tft_puts26x48+0x2e>
    }  
	SPI_DISABLE;
 80067be:	2201      	movs	r2, #1
 80067c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067c4:	4804      	ldr	r0, [pc, #16]	; (80067d8 <tft_puts26x48+0x78>)
 80067c6:	f7fa fbb1 	bl	8000f2c <HAL_GPIO_WritePin>
 80067ca:	2001      	movs	r0, #1
 80067cc:	f7fa f906 	bl	80009dc <HAL_Delay>
}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40020800 	.word	0x40020800

080067dc <tft_draw_circle>:
	tft_draw_line(row2,column2,row1,column2);
	SPI_DISABLE;
}

void tft_draw_circle(uint16_t row,uint16_t column,uint8_t radian)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	80fb      	strh	r3, [r7, #6]
 80067e6:	460b      	mov	r3, r1
 80067e8:	80bb      	strh	r3, [r7, #4]
 80067ea:	4613      	mov	r3, r2
 80067ec:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=radian;	  
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	613b      	str	r3, [r7, #16]
	di=3-(radian<<1);
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	f1c3 0303 	rsb	r3, r3, #3
 80067fe:	60fb      	str	r3, [r7, #12]
	SPI_ENABLE;
 8006800:	2200      	movs	r2, #0
 8006802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006806:	4859      	ldr	r0, [pc, #356]	; (800696c <tft_draw_circle+0x190>)
 8006808:	f7fa fb90 	bl	8000f2c <HAL_GPIO_WritePin>
 800680c:	2001      	movs	r0, #1
 800680e:	f7fa f8e5 	bl	80009dc <HAL_Delay>
	while(a<=b)
 8006812:	e099      	b.n	8006948 <tft_draw_circle+0x16c>
	{
		tft_draw_point(column-b,row-a);                     
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	b29b      	uxth	r3, r3
 8006818:	88ba      	ldrh	r2, [r7, #4]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	b298      	uxth	r0, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	b29b      	uxth	r3, r3
 8006822:	88fa      	ldrh	r2, [r7, #6]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	b29b      	uxth	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	f000 f9b7 	bl	8006b9c <tft_draw_point>
		tft_draw_point(column+b,row-a);                       
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	b29a      	uxth	r2, r3
 8006832:	88bb      	ldrh	r3, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	b298      	uxth	r0, r3
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	b29b      	uxth	r3, r3
 800683c:	88fa      	ldrh	r2, [r7, #6]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	b29b      	uxth	r3, r3
 8006842:	4619      	mov	r1, r3
 8006844:	f000 f9aa 	bl	8006b9c <tft_draw_point>
		tft_draw_point(column-a,row+b);                 
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	b29b      	uxth	r3, r3
 800684c:	88ba      	ldrh	r2, [r7, #4]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	b298      	uxth	r0, r3
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	b29a      	uxth	r2, r3
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	4413      	add	r3, r2
 800685a:	b29b      	uxth	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	f000 f99d 	bl	8006b9c <tft_draw_point>
		tft_draw_point(column-b,row-a);                    
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	b29b      	uxth	r3, r3
 8006866:	88ba      	ldrh	r2, [r7, #4]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	b298      	uxth	r0, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	b29b      	uxth	r3, r3
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	b29b      	uxth	r3, r3
 8006876:	4619      	mov	r1, r3
 8006878:	f000 f990 	bl	8006b9c <tft_draw_point>
		tft_draw_point(column-a,row-b);                       
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	b29b      	uxth	r3, r3
 8006880:	88ba      	ldrh	r2, [r7, #4]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	b298      	uxth	r0, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	b29b      	uxth	r3, r3
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	b29b      	uxth	r3, r3
 8006890:	4619      	mov	r1, r3
 8006892:	f000 f983 	bl	8006b9c <tft_draw_point>
		tft_draw_point(column+b,row+a);                        
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	b29a      	uxth	r2, r3
 800689a:	88bb      	ldrh	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	b298      	uxth	r0, r3
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	4413      	add	r3, r2
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	f000 f976 	bl	8006b9c <tft_draw_point>
		tft_draw_point(column+a,row-b);             
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	88bb      	ldrh	r3, [r7, #4]
 80068b6:	4413      	add	r3, r2
 80068b8:	b298      	uxth	r0, r3
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	88fa      	ldrh	r2, [r7, #6]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4619      	mov	r1, r3
 80068c6:	f000 f969 	bl	8006b9c <tft_draw_point>
		tft_draw_point(column+a,row+b);             
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	88bb      	ldrh	r3, [r7, #4]
 80068d0:	4413      	add	r3, r2
 80068d2:	b298      	uxth	r0, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	4413      	add	r3, r2
 80068dc:	b29b      	uxth	r3, r3
 80068de:	4619      	mov	r1, r3
 80068e0:	f000 f95c 	bl	8006b9c <tft_draw_point>
		tft_draw_point(column-b,row+a);             
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	88ba      	ldrh	r2, [r7, #4]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	b298      	uxth	r0, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	4413      	add	r3, r2
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	f000 f94f 	bl	8006b9c <tft_draw_point>
		a++;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	3301      	adds	r3, #1
 8006902:	617b      	str	r3, [r7, #20]
		    
		if(di<0)di +=4*a+6;	  
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	da06      	bge.n	8006918 <tft_draw_circle+0x13c>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	3306      	adds	r3, #6
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e00a      	b.n	800692e <tft_draw_circle+0x152>
		else
		{
			di+=10+4*(a-b);   
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	330a      	adds	r3, #10
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
			b--;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	3b01      	subs	r3, #1
 800692c:	613b      	str	r3, [r7, #16]
		} 
		tft_draw_point(column+a,row+b);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	b29a      	uxth	r2, r3
 8006932:	88bb      	ldrh	r3, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	b298      	uxth	r0, r3
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	b29a      	uxth	r2, r3
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	4413      	add	r3, r2
 8006940:	b29b      	uxth	r3, r3
 8006942:	4619      	mov	r1, r3
 8006944:	f000 f92a 	bl	8006b9c <tft_draw_point>
	while(a<=b)
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	429a      	cmp	r2, r3
 800694e:	f77f af61 	ble.w	8006814 <tft_draw_circle+0x38>
	}
	SPI_DISABLE;
 8006952:	2201      	movs	r2, #1
 8006954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006958:	4804      	ldr	r0, [pc, #16]	; (800696c <tft_draw_circle+0x190>)
 800695a:	f7fa fae7 	bl	8000f2c <HAL_GPIO_WritePin>
 800695e:	2001      	movs	r0, #1
 8006960:	f7fa f83c 	bl	80009dc <HAL_Delay>
}
 8006964:	bf00      	nop
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40020800 	.word	0x40020800

08006970 <tft_fill>:

void tft_fill(uint16_t row1,uint16_t column1,uint16_t row2,uint16_t column2,uint16_t color)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	4611      	mov	r1, r2
 800697c:	461a      	mov	r2, r3
 800697e:	4623      	mov	r3, r4
 8006980:	80fb      	strh	r3, [r7, #6]
 8006982:	4603      	mov	r3, r0
 8006984:	80bb      	strh	r3, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	807b      	strh	r3, [r7, #2]
 800698a:	4613      	mov	r3, r2
 800698c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j; 
	SPI_ENABLE;
 800698e:	2200      	movs	r2, #0
 8006990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006994:	4818      	ldr	r0, [pc, #96]	; (80069f8 <tft_fill+0x88>)
 8006996:	f7fa fac9 	bl	8000f2c <HAL_GPIO_WritePin>
 800699a:	2001      	movs	r0, #1
 800699c:	f7fa f81e 	bl	80009dc <HAL_Delay>
	tft_add_set(column1,row1,column2,row2);   
 80069a0:	887b      	ldrh	r3, [r7, #2]
 80069a2:	883a      	ldrh	r2, [r7, #0]
 80069a4:	88f9      	ldrh	r1, [r7, #6]
 80069a6:	88b8      	ldrh	r0, [r7, #4]
 80069a8:	f000 f8c8 	bl	8006b3c <tft_add_set>
	for(i=row1;i<=row2;i++)
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	81fb      	strh	r3, [r7, #14]
 80069b0:	e010      	b.n	80069d4 <tft_fill+0x64>
	{													   	 	
		for(j=column1;j<=column2;j++)
 80069b2:	88bb      	ldrh	r3, [r7, #4]
 80069b4:	81bb      	strh	r3, [r7, #12]
 80069b6:	e006      	b.n	80069c6 <tft_fill+0x56>
		{
			tft_write_data(color);
 80069b8:	8c3b      	ldrh	r3, [r7, #32]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f880 	bl	8006ac0 <tft_write_data>
		for(j=column1;j<=column2;j++)
 80069c0:	89bb      	ldrh	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	81bb      	strh	r3, [r7, #12]
 80069c6:	89ba      	ldrh	r2, [r7, #12]
 80069c8:	883b      	ldrh	r3, [r7, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d9f4      	bls.n	80069b8 <tft_fill+0x48>
	for(i=row1;i<=row2;i++)
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	3301      	adds	r3, #1
 80069d2:	81fb      	strh	r3, [r7, #14]
 80069d4:	89fa      	ldrh	r2, [r7, #14]
 80069d6:	887b      	ldrh	r3, [r7, #2]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d9ea      	bls.n	80069b2 <tft_fill+0x42>
		}
	} 	
	SPI_DISABLE;
 80069dc:	2201      	movs	r2, #1
 80069de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069e2:	4805      	ldr	r0, [pc, #20]	; (80069f8 <tft_fill+0x88>)
 80069e4:	f7fa faa2 	bl	8000f2c <HAL_GPIO_WritePin>
 80069e8:	2001      	movs	r0, #1
 80069ea:	f7f9 fff7 	bl	80009dc <HAL_Delay>
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd90      	pop	{r4, r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40020800 	.word	0x40020800

080069fc <tft_puts_image>:
	}
	SPI_DISABLE;
}

void tft_puts_image(const unsigned char* image_arr)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t temp;
	uint8_t high_byte,low_byte;
	
	SPI_ENABLE;
 8006a04:	2200      	movs	r2, #0
 8006a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a0a:	481e      	ldr	r0, [pc, #120]	; (8006a84 <tft_puts_image+0x88>)
 8006a0c:	f7fa fa8e 	bl	8000f2c <HAL_GPIO_WritePin>
 8006a10:	2001      	movs	r0, #1
 8006a12:	f7f9 ffe3 	bl	80009dc <HAL_Delay>
	tft_add_set(0,0,240-1,320-1);
 8006a16:	f240 133f 	movw	r3, #319	; 0x13f
 8006a1a:	22ef      	movs	r2, #239	; 0xef
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	2000      	movs	r0, #0
 8006a20:	f000 f88c 	bl	8006b3c <tft_add_set>

	for(i=0;i<(240*320);i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e01b      	b.n	8006a62 <tft_puts_image+0x66>
	{ 
		low_byte=*(image_arr+i*2);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	72fb      	strb	r3, [r7, #11]
		high_byte=*(image_arr+i*2+1);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	72bb      	strb	r3, [r7, #10]
		temp=((high_byte)<<8|(low_byte));
 8006a44:	7abb      	ldrb	r3, [r7, #10]
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	b21a      	sxth	r2, r3
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	b21b      	sxth	r3, r3
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	b21b      	sxth	r3, r3
 8006a52:	813b      	strh	r3, [r7, #8]
		tft_write_data(temp);
 8006a54:	893b      	ldrh	r3, [r7, #8]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f832 	bl	8006ac0 <tft_write_data>
	for(i=0;i<(240*320);i++)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8006a68:	d3df      	bcc.n	8006a2a <tft_puts_image+0x2e>
	}	
	
	SPI_DISABLE;
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a70:	4804      	ldr	r0, [pc, #16]	; (8006a84 <tft_puts_image+0x88>)
 8006a72:	f7fa fa5b 	bl	8000f2c <HAL_GPIO_WritePin>
 8006a76:	2001      	movs	r0, #1
 8006a78:	f7f9 ffb0 	bl	80009dc <HAL_Delay>
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40020800 	.word	0x40020800

08006a88 <tft_write_data_8bit>:
/********************************************************************************************************************************/
/********************************************************************************************************************************/
/********************************************************************************************************************************/

void tft_write_data_8bit(uint8_t data)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	71fb      	strb	r3, [r7, #7]
	uint8_t send_data =data;
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_SET);
 8006a96:	2201      	movs	r2, #1
 8006a98:	2180      	movs	r1, #128	; 0x80
 8006a9a:	4807      	ldr	r0, [pc, #28]	; (8006ab8 <tft_write_data_8bit+0x30>)
 8006a9c:	f7fa fa46 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,&send_data,1,500);
 8006aa0:	f107 010f 	add.w	r1, r7, #15
 8006aa4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4804      	ldr	r0, [pc, #16]	; (8006abc <tft_write_data_8bit+0x34>)
 8006aac:	f7fb f820 	bl	8001af0 <HAL_SPI_Transmit>
}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40020800 	.word	0x40020800
 8006abc:	20004098 	.word	0x20004098

08006ac0 <tft_write_data>:

void tft_write_data(uint16_t data)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	80fb      	strh	r3, [r7, #6]
	uint8_t send_data[2];
	send_data[0]=data >> 8;
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	0a1b      	lsrs	r3, r3, #8
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	733b      	strb	r3, [r7, #12]
	send_data[1]=data & 0x00ff;
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_SET);
 8006ada:	2201      	movs	r2, #1
 8006adc:	2180      	movs	r1, #128	; 0x80
 8006ade:	4807      	ldr	r0, [pc, #28]	; (8006afc <tft_write_data+0x3c>)
 8006ae0:	f7fa fa24 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,send_data,2,500);
 8006ae4:	f107 010c 	add.w	r1, r7, #12
 8006ae8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006aec:	2202      	movs	r2, #2
 8006aee:	4804      	ldr	r0, [pc, #16]	; (8006b00 <tft_write_data+0x40>)
 8006af0:	f7fa fffe 	bl	8001af0 <HAL_SPI_Transmit>
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40020800 	.word	0x40020800
 8006b00:	20004098 	.word	0x20004098

08006b04 <tft_write_register>:

void tft_write_register(int8_t data)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t register_value=data;
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_RESET);
 8006b12:	2200      	movs	r2, #0
 8006b14:	2180      	movs	r1, #128	; 0x80
 8006b16:	4807      	ldr	r0, [pc, #28]	; (8006b34 <tft_write_register+0x30>)
 8006b18:	f7fa fa08 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,&register_value,1,500);
 8006b1c:	f107 010f 	add.w	r1, r7, #15
 8006b20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006b24:	2201      	movs	r2, #1
 8006b26:	4804      	ldr	r0, [pc, #16]	; (8006b38 <tft_write_register+0x34>)
 8006b28:	f7fa ffe2 	bl	8001af0 <HAL_SPI_Transmit>
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40020800 	.word	0x40020800
 8006b38:	20004098 	.word	0x20004098

08006b3c <tft_add_set>:


void tft_add_set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4623      	mov	r3, r4
 8006b4c:	80fb      	strh	r3, [r7, #6]
 8006b4e:	4603      	mov	r3, r0
 8006b50:	80bb      	strh	r3, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	807b      	strh	r3, [r7, #2]
 8006b56:	4613      	mov	r3, r2
 8006b58:	803b      	strh	r3, [r7, #0]
   tft_write_register(0x2a);
 8006b5a:	202a      	movs	r0, #42	; 0x2a
 8006b5c:	f7ff ffd2 	bl	8006b04 <tft_write_register>
   tft_write_data(x1);
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff ffac 	bl	8006ac0 <tft_write_data>
   tft_write_data(x2);
 8006b68:	887b      	ldrh	r3, [r7, #2]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff ffa8 	bl	8006ac0 <tft_write_data>
  
   tft_write_register(0x2b);
 8006b70:	202b      	movs	r0, #43	; 0x2b
 8006b72:	f7ff ffc7 	bl	8006b04 <tft_write_register>
   tft_write_data(y1);
 8006b76:	88bb      	ldrh	r3, [r7, #4]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff ffa1 	bl	8006ac0 <tft_write_data>
   tft_write_data(y2);
 8006b7e:	883b      	ldrh	r3, [r7, #0]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff ff9d 	bl	8006ac0 <tft_write_data>

   tft_write_register(0x2C);
 8006b86:	202c      	movs	r0, #44	; 0x2c
 8006b88:	f7ff ffbc 	bl	8006b04 <tft_write_register>
   tft_write_register(0X3C);
 8006b8c:	203c      	movs	r0, #60	; 0x3c
 8006b8e:	f7ff ffb9 	bl	8006b04 <tft_write_register>
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd90      	pop	{r4, r7, pc}
	...

08006b9c <tft_draw_point>:

void tft_draw_point(uint16_t x,uint16_t y)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	460a      	mov	r2, r1
 8006ba6:	80fb      	strh	r3, [r7, #6]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	80bb      	strh	r3, [r7, #4]
	tft_add_set(x,y,x,y);
 8006bac:	88bb      	ldrh	r3, [r7, #4]
 8006bae:	88fa      	ldrh	r2, [r7, #6]
 8006bb0:	88b9      	ldrh	r1, [r7, #4]
 8006bb2:	88f8      	ldrh	r0, [r7, #6]
 8006bb4:	f7ff ffc2 	bl	8006b3c <tft_add_set>
	tft_write_data(POINT_COLOR); 	
 8006bb8:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <tft_draw_point+0x30>)
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff ff7f 	bl	8006ac0 <tft_write_data>
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	200043c6 	.word	0x200043c6

08006bd0 <tft_putchar>:
		tft_fill(x-1,y-1,x+1,y+1,POINT_COLOR);
}


void tft_putchar(uint16_t x,uint16_t y,uint8_t num,uint8_t mode)
{
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	4608      	mov	r0, r1
 8006bda:	4611      	mov	r1, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4623      	mov	r3, r4
 8006be0:	80fb      	strh	r3, [r7, #6]
 8006be2:	4603      	mov	r3, r0
 8006be4:	80bb      	strh	r3, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
 8006bea:	4613      	mov	r3, r2
 8006bec:	70bb      	strb	r3, [r7, #2]
	uint8_t temp;
  uint8_t pos,t;
	//uint16_t x0=x;
	uint16_t colortemp=POINT_COLOR;      
 8006bee:	4b3f      	ldr	r3, [pc, #252]	; (8006cec <tft_putchar+0x11c>)
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	817b      	strh	r3, [r7, #10]
  if(x>LCD_W-16||y>LCD_H-16)return;	    		   
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	2be0      	cmp	r3, #224	; 0xe0
 8006bf8:	d874      	bhi.n	8006ce4 <tft_putchar+0x114>
 8006bfa:	88bb      	ldrh	r3, [r7, #4]
 8006bfc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006c00:	d870      	bhi.n	8006ce4 <tft_putchar+0x114>
	num=num-' ';
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	3b20      	subs	r3, #32
 8006c06:	70fb      	strb	r3, [r7, #3]
	
	tft_add_set(x,y,x+8-1,y+16-1);      
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	3307      	adds	r3, #7
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	88bb      	ldrh	r3, [r7, #4]
 8006c10:	330f      	adds	r3, #15
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	88b9      	ldrh	r1, [r7, #4]
 8006c16:	88f8      	ldrh	r0, [r7, #6]
 8006c18:	f7ff ff90 	bl	8006b3c <tft_add_set>
	if(!mode) 
 8006c1c:	78bb      	ldrb	r3, [r7, #2]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d12e      	bne.n	8006c80 <tft_putchar+0xb0>
	{
		for(pos=0;pos<16;pos++)
 8006c22:	2300      	movs	r3, #0
 8006c24:	73bb      	strb	r3, [r7, #14]
 8006c26:	e027      	b.n	8006c78 <tft_putchar+0xa8>
		{ 
			temp=asc2_1608[(uint16_t)num*16+pos];		 
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	011a      	lsls	r2, r3, #4
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	4413      	add	r3, r2
 8006c30:	4a2f      	ldr	r2, [pc, #188]	; (8006cf0 <tft_putchar+0x120>)
 8006c32:	5cd3      	ldrb	r3, [r2, r3]
 8006c34:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<8;t++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	737b      	strb	r3, [r7, #13]
 8006c3a:	e017      	b.n	8006c6c <tft_putchar+0x9c>
		  {                 
		        if(temp&0x01)POINT_COLOR=colortemp;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <tft_putchar+0x7e>
 8006c46:	4a29      	ldr	r2, [pc, #164]	; (8006cec <tft_putchar+0x11c>)
 8006c48:	897b      	ldrh	r3, [r7, #10]
 8006c4a:	8013      	strh	r3, [r2, #0]
 8006c4c:	e003      	b.n	8006c56 <tft_putchar+0x86>
						else POINT_COLOR=BACK_COLOR;
 8006c4e:	4b29      	ldr	r3, [pc, #164]	; (8006cf4 <tft_putchar+0x124>)
 8006c50:	881a      	ldrh	r2, [r3, #0]
 8006c52:	4b26      	ldr	r3, [pc, #152]	; (8006cec <tft_putchar+0x11c>)
 8006c54:	801a      	strh	r2, [r3, #0]
						tft_write_data(POINT_COLOR);	
 8006c56:	4b25      	ldr	r3, [pc, #148]	; (8006cec <tft_putchar+0x11c>)
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff ff30 	bl	8006ac0 <tft_write_data>
						temp>>=1; 
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<8;t++)
 8006c66:	7b7b      	ldrb	r3, [r7, #13]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	737b      	strb	r3, [r7, #13]
 8006c6c:	7b7b      	ldrb	r3, [r7, #13]
 8006c6e:	2b07      	cmp	r3, #7
 8006c70:	d9e4      	bls.n	8006c3c <tft_putchar+0x6c>
		for(pos=0;pos<16;pos++)
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	3301      	adds	r3, #1
 8006c76:	73bb      	strb	r3, [r7, #14]
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d9d4      	bls.n	8006c28 <tft_putchar+0x58>
 8006c7e:	e02d      	b.n	8006cdc <tft_putchar+0x10c>
		  }
		}	
	}
	else
	{
		for(pos=0;pos<16;pos++)
 8006c80:	2300      	movs	r3, #0
 8006c82:	73bb      	strb	r3, [r7, #14]
 8006c84:	e027      	b.n	8006cd6 <tft_putchar+0x106>
		{
		    temp=asc2_1608[(uint16_t)num*16+pos];		 
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	011a      	lsls	r2, r3, #4
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <tft_putchar+0x120>)
 8006c90:	5cd3      	ldrb	r3, [r2, r3]
 8006c92:	73fb      	strb	r3, [r7, #15]
				for(t=0;t<8;t++)
 8006c94:	2300      	movs	r3, #0
 8006c96:	737b      	strb	r3, [r7, #13]
 8006c98:	e017      	b.n	8006cca <tft_putchar+0xfa>
		    {                 
		        if(temp&0x01)tft_draw_point(x+t,y+pos);
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00c      	beq.n	8006cbe <tft_putchar+0xee>
 8006ca4:	7b7b      	ldrb	r3, [r7, #13]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	4413      	add	r3, r2
 8006cac:	b298      	uxth	r0, r3
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	88bb      	ldrh	r3, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7ff ff6f 	bl	8006b9c <tft_draw_point>
		        temp>>=1; 
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
				for(t=0;t<8;t++)
 8006cc4:	7b7b      	ldrb	r3, [r7, #13]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	737b      	strb	r3, [r7, #13]
 8006cca:	7b7b      	ldrb	r3, [r7, #13]
 8006ccc:	2b07      	cmp	r3, #7
 8006cce:	d9e4      	bls.n	8006c9a <tft_putchar+0xca>
		for(pos=0;pos<16;pos++)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	73bb      	strb	r3, [r7, #14]
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b0f      	cmp	r3, #15
 8006cda:	d9d4      	bls.n	8006c86 <tft_putchar+0xb6>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 8006cdc:	4a03      	ldr	r2, [pc, #12]	; (8006cec <tft_putchar+0x11c>)
 8006cde:	897b      	ldrh	r3, [r7, #10]
 8006ce0:	8013      	strh	r3, [r2, #0]
 8006ce2:	e000      	b.n	8006ce6 <tft_putchar+0x116>
  if(x>LCD_W-16||y>LCD_H-16)return;	    		   
 8006ce4:	bf00      	nop
}
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd90      	pop	{r4, r7, pc}
 8006cec:	200043c6 	.word	0x200043c6
 8006cf0:	0802d118 	.word	0x0802d118
 8006cf4:	200043c4 	.word	0x200043c4

08006cf8 <tft_putchar26x48>:

//x is column
//y is row
void tft_putchar26x48(uint16_t x,uint16_t y,uint8_t data,uint8_t mode)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	4623      	mov	r3, r4
 8006d08:	80fb      	strh	r3, [r7, #6]
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	80bb      	strh	r3, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	70fb      	strb	r3, [r7, #3]
 8006d12:	4613      	mov	r3, r2
 8006d14:	70bb      	strb	r3, [r7, #2]
	if((x>LCD_H-48)||(y>LCD_W-26)) return;
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8006d1c:	d86a      	bhi.n	8006df4 <tft_putchar26x48+0xfc>
 8006d1e:	88bb      	ldrh	r3, [r7, #4]
 8006d20:	2bd6      	cmp	r3, #214	; 0xd6
 8006d22:	d867      	bhi.n	8006df4 <tft_putchar26x48+0xfc>
	uint8_t i,j,k,temp;
	
	tft_add_set(x,y,x+26-1,y+48-1); 
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	3319      	adds	r3, #25
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	88bb      	ldrh	r3, [r7, #4]
 8006d2c:	332f      	adds	r3, #47	; 0x2f
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	88b9      	ldrh	r1, [r7, #4]
 8006d32:	88f8      	ldrh	r0, [r7, #6]
 8006d34:	f7ff ff02 	bl	8006b3c <tft_add_set>
	
	for(i=0;i<48/8;i++)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	e056      	b.n	8006dec <tft_putchar26x48+0xf4>
	{
		for(j=0;j<8;j++)
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73bb      	strb	r3, [r7, #14]
 8006d42:	e04d      	b.n	8006de0 <tft_putchar26x48+0xe8>
		{
			for(k=0;k<26;k++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	737b      	strb	r3, [r7, #13]
 8006d48:	e044      	b.n	8006dd4 <tft_putchar26x48+0xdc>
			{
				temp=Consolas26x48[(data-' ')*(48/8)*26+k*(48/8)+i];
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	3b20      	subs	r3, #32
 8006d4e:	229c      	movs	r2, #156	; 0x9c
 8006d50:	fb02 f103 	mul.w	r1, r2, r3
 8006d54:	7b7a      	ldrb	r2, [r7, #13]
 8006d56:	4613      	mov	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	18ca      	adds	r2, r1, r3
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	4413      	add	r3, r2
 8006d64:	4a25      	ldr	r2, [pc, #148]	; (8006dfc <tft_putchar26x48+0x104>)
 8006d66:	5cd3      	ldrb	r3, [r2, r3]
 8006d68:	733b      	strb	r3, [r7, #12]
				if(mode==TFT_STRING_MODE_BACKGROUND)
 8006d6a:	78bb      	ldrb	r3, [r7, #2]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d113      	bne.n	8006d98 <tft_putchar26x48+0xa0>
				{
					if(temp&(0x01<<j))
 8006d70:	7b3a      	ldrb	r2, [r7, #12]
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	fa42 f303 	asr.w	r3, r2, r3
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <tft_putchar26x48+0x94>
					{
						tft_write_data(POINT_COLOR);
 8006d80:	4b1f      	ldr	r3, [pc, #124]	; (8006e00 <tft_putchar26x48+0x108>)
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fe9b 	bl	8006ac0 <tft_write_data>
 8006d8a:	e020      	b.n	8006dce <tft_putchar26x48+0xd6>
					}
					else
					{
						tft_write_data(BACK_COLOR);
 8006d8c:	4b1d      	ldr	r3, [pc, #116]	; (8006e04 <tft_putchar26x48+0x10c>)
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fe95 	bl	8006ac0 <tft_write_data>
 8006d96:	e01a      	b.n	8006dce <tft_putchar26x48+0xd6>
					}
				}
				else
				{
					if(temp&(0x01<<j))
 8006d98:	7b3a      	ldrb	r2, [r7, #12]
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	fa42 f303 	asr.w	r3, r2, r3
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d012      	beq.n	8006dce <tft_putchar26x48+0xd6>
					{
						tft_draw_point(x+k,y+(8*i+j));
 8006da8:	7b7b      	ldrb	r3, [r7, #13]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	4413      	add	r3, r2
 8006db0:	b298      	uxth	r0, r3
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	88bb      	ldrh	r3, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f7ff fee7 	bl	8006b9c <tft_draw_point>
			for(k=0;k<26;k++)
 8006dce:	7b7b      	ldrb	r3, [r7, #13]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	737b      	strb	r3, [r7, #13]
 8006dd4:	7b7b      	ldrb	r3, [r7, #13]
 8006dd6:	2b19      	cmp	r3, #25
 8006dd8:	d9b7      	bls.n	8006d4a <tft_putchar26x48+0x52>
		for(j=0;j<8;j++)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	73bb      	strb	r3, [r7, #14]
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	2b07      	cmp	r3, #7
 8006de4:	d9ae      	bls.n	8006d44 <tft_putchar26x48+0x4c>
	for(i=0;i<48/8;i++)
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	3301      	adds	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d9a5      	bls.n	8006d3e <tft_putchar26x48+0x46>
 8006df2:	e000      	b.n	8006df6 <tft_putchar26x48+0xfe>
	if((x>LCD_H-48)||(y>LCD_W-26)) return;
 8006df4:	bf00      	nop
					}
				}
			}
		}
	}
}
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}
 8006dfc:	0802d708 	.word	0x0802d708
 8006e00:	200043c6 	.word	0x200043c6
 8006e04:	200043c4 	.word	0x200043c4

08006e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e0e:	e003      	b.n	8006e18 <LoopCopyDataInit>

08006e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e10:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e16:	3104      	adds	r1, #4

08006e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e18:	480b      	ldr	r0, [pc, #44]	; (8006e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e20:	d3f6      	bcc.n	8006e10 <CopyDataInit>
  ldr  r2, =_sbss
 8006e22:	4a0b      	ldr	r2, [pc, #44]	; (8006e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e24:	e002      	b.n	8006e2c <LoopFillZerobss>

08006e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e28:	f842 3b04 	str.w	r3, [r2], #4

08006e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006e30:	d3f9      	bcc.n	8006e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e32:	f7ff fad5 	bl	80063e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e36:	f000 f817 	bl	8006e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e3a:	f7fd fe83 	bl	8004b44 <main>
  bx  lr    
 8006e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006e40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006e44:	080311f0 	.word	0x080311f0
  ldr  r0, =_sdata
 8006e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006e4c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8006e50:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8006e54:	200043cc 	.word	0x200043cc

08006e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e58:	e7fe      	b.n	8006e58 <ADC_IRQHandler>
	...

08006e5c <__errno>:
 8006e5c:	4b01      	ldr	r3, [pc, #4]	; (8006e64 <__errno+0x8>)
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20000010 	.word	0x20000010

08006e68 <__libc_init_array>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	4e0d      	ldr	r6, [pc, #52]	; (8006ea0 <__libc_init_array+0x38>)
 8006e6c:	4c0d      	ldr	r4, [pc, #52]	; (8006ea4 <__libc_init_array+0x3c>)
 8006e6e:	1ba4      	subs	r4, r4, r6
 8006e70:	10a4      	asrs	r4, r4, #2
 8006e72:	2500      	movs	r5, #0
 8006e74:	42a5      	cmp	r5, r4
 8006e76:	d109      	bne.n	8006e8c <__libc_init_array+0x24>
 8006e78:	4e0b      	ldr	r6, [pc, #44]	; (8006ea8 <__libc_init_array+0x40>)
 8006e7a:	4c0c      	ldr	r4, [pc, #48]	; (8006eac <__libc_init_array+0x44>)
 8006e7c:	f000 fcca 	bl	8007814 <_init>
 8006e80:	1ba4      	subs	r4, r4, r6
 8006e82:	10a4      	asrs	r4, r4, #2
 8006e84:	2500      	movs	r5, #0
 8006e86:	42a5      	cmp	r5, r4
 8006e88:	d105      	bne.n	8006e96 <__libc_init_array+0x2e>
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
 8006e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e90:	4798      	blx	r3
 8006e92:	3501      	adds	r5, #1
 8006e94:	e7ee      	b.n	8006e74 <__libc_init_array+0xc>
 8006e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e9a:	4798      	blx	r3
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	e7f2      	b.n	8006e86 <__libc_init_array+0x1e>
 8006ea0:	080311e8 	.word	0x080311e8
 8006ea4:	080311e8 	.word	0x080311e8
 8006ea8:	080311e8 	.word	0x080311e8
 8006eac:	080311ec 	.word	0x080311ec

08006eb0 <__itoa>:
 8006eb0:	1e93      	subs	r3, r2, #2
 8006eb2:	2b22      	cmp	r3, #34	; 0x22
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	d904      	bls.n	8006ec4 <__itoa+0x14>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	700b      	strb	r3, [r1, #0]
 8006ebe:	461c      	mov	r4, r3
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	bd10      	pop	{r4, pc}
 8006ec4:	2a0a      	cmp	r2, #10
 8006ec6:	d109      	bne.n	8006edc <__itoa+0x2c>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	da07      	bge.n	8006edc <__itoa+0x2c>
 8006ecc:	232d      	movs	r3, #45	; 0x2d
 8006ece:	700b      	strb	r3, [r1, #0]
 8006ed0:	4240      	negs	r0, r0
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	4421      	add	r1, r4
 8006ed6:	f000 f849 	bl	8006f6c <__utoa>
 8006eda:	e7f1      	b.n	8006ec0 <__itoa+0x10>
 8006edc:	2100      	movs	r1, #0
 8006ede:	e7f9      	b.n	8006ed4 <__itoa+0x24>

08006ee0 <itoa>:
 8006ee0:	f7ff bfe6 	b.w	8006eb0 <__itoa>

08006ee4 <memcpy>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	1e43      	subs	r3, r0, #1
 8006ee8:	440a      	add	r2, r1
 8006eea:	4291      	cmp	r1, r2
 8006eec:	d100      	bne.n	8006ef0 <memcpy+0xc>
 8006eee:	bd10      	pop	{r4, pc}
 8006ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef8:	e7f7      	b.n	8006eea <memcpy+0x6>

08006efa <memset>:
 8006efa:	4402      	add	r2, r0
 8006efc:	4603      	mov	r3, r0
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d100      	bne.n	8006f04 <memset+0xa>
 8006f02:	4770      	bx	lr
 8006f04:	f803 1b01 	strb.w	r1, [r3], #1
 8006f08:	e7f9      	b.n	8006efe <memset+0x4>
	...

08006f0c <siprintf>:
 8006f0c:	b40e      	push	{r1, r2, r3}
 8006f0e:	b500      	push	{lr}
 8006f10:	b09c      	sub	sp, #112	; 0x70
 8006f12:	ab1d      	add	r3, sp, #116	; 0x74
 8006f14:	9002      	str	r0, [sp, #8]
 8006f16:	9006      	str	r0, [sp, #24]
 8006f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f1c:	4809      	ldr	r0, [pc, #36]	; (8006f44 <siprintf+0x38>)
 8006f1e:	9107      	str	r1, [sp, #28]
 8006f20:	9104      	str	r1, [sp, #16]
 8006f22:	4909      	ldr	r1, [pc, #36]	; (8006f48 <siprintf+0x3c>)
 8006f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f28:	9105      	str	r1, [sp, #20]
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	a902      	add	r1, sp, #8
 8006f30:	f000 f8b4 	bl	800709c <_svfiprintf_r>
 8006f34:	9b02      	ldr	r3, [sp, #8]
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	b01c      	add	sp, #112	; 0x70
 8006f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f40:	b003      	add	sp, #12
 8006f42:	4770      	bx	lr
 8006f44:	20000010 	.word	0x20000010
 8006f48:	ffff0208 	.word	0xffff0208

08006f4c <strcat>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4603      	mov	r3, r0
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	1c5c      	adds	r4, r3, #1
 8006f54:	b93a      	cbnz	r2, 8006f66 <strcat+0x1a>
 8006f56:	3b01      	subs	r3, #1
 8006f58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d1f9      	bne.n	8006f58 <strcat+0xc>
 8006f64:	bd10      	pop	{r4, pc}
 8006f66:	4623      	mov	r3, r4
 8006f68:	e7f2      	b.n	8006f50 <strcat+0x4>
	...

08006f6c <__utoa>:
 8006f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6e:	4b1d      	ldr	r3, [pc, #116]	; (8006fe4 <__utoa+0x78>)
 8006f70:	b08b      	sub	sp, #44	; 0x2c
 8006f72:	4605      	mov	r5, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	466e      	mov	r6, sp
 8006f78:	f103 0c20 	add.w	ip, r3, #32
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	4637      	mov	r7, r6
 8006f82:	c703      	stmia	r7!, {r0, r1}
 8006f84:	3308      	adds	r3, #8
 8006f86:	4563      	cmp	r3, ip
 8006f88:	463e      	mov	r6, r7
 8006f8a:	d1f7      	bne.n	8006f7c <__utoa+0x10>
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	791b      	ldrb	r3, [r3, #4]
 8006f90:	713b      	strb	r3, [r7, #4]
 8006f92:	1e93      	subs	r3, r2, #2
 8006f94:	2b22      	cmp	r3, #34	; 0x22
 8006f96:	6038      	str	r0, [r7, #0]
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	d904      	bls.n	8006fa8 <__utoa+0x3c>
 8006f9e:	7023      	strb	r3, [r4, #0]
 8006fa0:	461c      	mov	r4, r3
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	b00b      	add	sp, #44	; 0x2c
 8006fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa8:	1e66      	subs	r6, r4, #1
 8006faa:	fbb5 f0f2 	udiv	r0, r5, r2
 8006fae:	af0a      	add	r7, sp, #40	; 0x28
 8006fb0:	fb02 5510 	mls	r5, r2, r0, r5
 8006fb4:	443d      	add	r5, r7
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8006fbc:	f806 5f01 	strb.w	r5, [r6, #1]!
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	b968      	cbnz	r0, 8006fe0 <__utoa+0x74>
 8006fc4:	5460      	strb	r0, [r4, r1]
 8006fc6:	4423      	add	r3, r4
 8006fc8:	4622      	mov	r2, r4
 8006fca:	1b19      	subs	r1, r3, r4
 8006fcc:	1b10      	subs	r0, r2, r4
 8006fce:	4281      	cmp	r1, r0
 8006fd0:	dde7      	ble.n	8006fa2 <__utoa+0x36>
 8006fd2:	7811      	ldrb	r1, [r2, #0]
 8006fd4:	7818      	ldrb	r0, [r3, #0]
 8006fd6:	f802 0b01 	strb.w	r0, [r2], #1
 8006fda:	f803 1901 	strb.w	r1, [r3], #-1
 8006fde:	e7f4      	b.n	8006fca <__utoa+0x5e>
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	e7e2      	b.n	8006faa <__utoa+0x3e>
 8006fe4:	08031188 	.word	0x08031188

08006fe8 <__ssputs_r>:
 8006fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	688e      	ldr	r6, [r1, #8]
 8006fee:	429e      	cmp	r6, r3
 8006ff0:	4682      	mov	sl, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	4690      	mov	r8, r2
 8006ff6:	4699      	mov	r9, r3
 8006ff8:	d837      	bhi.n	800706a <__ssputs_r+0x82>
 8006ffa:	898a      	ldrh	r2, [r1, #12]
 8006ffc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007000:	d031      	beq.n	8007066 <__ssputs_r+0x7e>
 8007002:	6825      	ldr	r5, [r4, #0]
 8007004:	6909      	ldr	r1, [r1, #16]
 8007006:	1a6f      	subs	r7, r5, r1
 8007008:	6965      	ldr	r5, [r4, #20]
 800700a:	2302      	movs	r3, #2
 800700c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007010:	fb95 f5f3 	sdiv	r5, r5, r3
 8007014:	f109 0301 	add.w	r3, r9, #1
 8007018:	443b      	add	r3, r7
 800701a:	429d      	cmp	r5, r3
 800701c:	bf38      	it	cc
 800701e:	461d      	movcc	r5, r3
 8007020:	0553      	lsls	r3, r2, #21
 8007022:	d530      	bpl.n	8007086 <__ssputs_r+0x9e>
 8007024:	4629      	mov	r1, r5
 8007026:	f000 fb21 	bl	800766c <_malloc_r>
 800702a:	4606      	mov	r6, r0
 800702c:	b950      	cbnz	r0, 8007044 <__ssputs_r+0x5c>
 800702e:	230c      	movs	r3, #12
 8007030:	f8ca 3000 	str.w	r3, [sl]
 8007034:	89a3      	ldrh	r3, [r4, #12]
 8007036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007044:	463a      	mov	r2, r7
 8007046:	6921      	ldr	r1, [r4, #16]
 8007048:	f7ff ff4c 	bl	8006ee4 <memcpy>
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007056:	81a3      	strh	r3, [r4, #12]
 8007058:	6126      	str	r6, [r4, #16]
 800705a:	6165      	str	r5, [r4, #20]
 800705c:	443e      	add	r6, r7
 800705e:	1bed      	subs	r5, r5, r7
 8007060:	6026      	str	r6, [r4, #0]
 8007062:	60a5      	str	r5, [r4, #8]
 8007064:	464e      	mov	r6, r9
 8007066:	454e      	cmp	r6, r9
 8007068:	d900      	bls.n	800706c <__ssputs_r+0x84>
 800706a:	464e      	mov	r6, r9
 800706c:	4632      	mov	r2, r6
 800706e:	4641      	mov	r1, r8
 8007070:	6820      	ldr	r0, [r4, #0]
 8007072:	f000 fa93 	bl	800759c <memmove>
 8007076:	68a3      	ldr	r3, [r4, #8]
 8007078:	1b9b      	subs	r3, r3, r6
 800707a:	60a3      	str	r3, [r4, #8]
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	441e      	add	r6, r3
 8007080:	6026      	str	r6, [r4, #0]
 8007082:	2000      	movs	r0, #0
 8007084:	e7dc      	b.n	8007040 <__ssputs_r+0x58>
 8007086:	462a      	mov	r2, r5
 8007088:	f000 fb4a 	bl	8007720 <_realloc_r>
 800708c:	4606      	mov	r6, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	d1e2      	bne.n	8007058 <__ssputs_r+0x70>
 8007092:	6921      	ldr	r1, [r4, #16]
 8007094:	4650      	mov	r0, sl
 8007096:	f000 fa9b 	bl	80075d0 <_free_r>
 800709a:	e7c8      	b.n	800702e <__ssputs_r+0x46>

0800709c <_svfiprintf_r>:
 800709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	461d      	mov	r5, r3
 80070a2:	898b      	ldrh	r3, [r1, #12]
 80070a4:	061f      	lsls	r7, r3, #24
 80070a6:	b09d      	sub	sp, #116	; 0x74
 80070a8:	4680      	mov	r8, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	4616      	mov	r6, r2
 80070ae:	d50f      	bpl.n	80070d0 <_svfiprintf_r+0x34>
 80070b0:	690b      	ldr	r3, [r1, #16]
 80070b2:	b96b      	cbnz	r3, 80070d0 <_svfiprintf_r+0x34>
 80070b4:	2140      	movs	r1, #64	; 0x40
 80070b6:	f000 fad9 	bl	800766c <_malloc_r>
 80070ba:	6020      	str	r0, [r4, #0]
 80070bc:	6120      	str	r0, [r4, #16]
 80070be:	b928      	cbnz	r0, 80070cc <_svfiprintf_r+0x30>
 80070c0:	230c      	movs	r3, #12
 80070c2:	f8c8 3000 	str.w	r3, [r8]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	e0c8      	b.n	800725e <_svfiprintf_r+0x1c2>
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	6163      	str	r3, [r4, #20]
 80070d0:	2300      	movs	r3, #0
 80070d2:	9309      	str	r3, [sp, #36]	; 0x24
 80070d4:	2320      	movs	r3, #32
 80070d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070da:	2330      	movs	r3, #48	; 0x30
 80070dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070e0:	9503      	str	r5, [sp, #12]
 80070e2:	f04f 0b01 	mov.w	fp, #1
 80070e6:	4637      	mov	r7, r6
 80070e8:	463d      	mov	r5, r7
 80070ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80070ee:	b10b      	cbz	r3, 80070f4 <_svfiprintf_r+0x58>
 80070f0:	2b25      	cmp	r3, #37	; 0x25
 80070f2:	d13e      	bne.n	8007172 <_svfiprintf_r+0xd6>
 80070f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80070f8:	d00b      	beq.n	8007112 <_svfiprintf_r+0x76>
 80070fa:	4653      	mov	r3, sl
 80070fc:	4632      	mov	r2, r6
 80070fe:	4621      	mov	r1, r4
 8007100:	4640      	mov	r0, r8
 8007102:	f7ff ff71 	bl	8006fe8 <__ssputs_r>
 8007106:	3001      	adds	r0, #1
 8007108:	f000 80a4 	beq.w	8007254 <_svfiprintf_r+0x1b8>
 800710c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710e:	4453      	add	r3, sl
 8007110:	9309      	str	r3, [sp, #36]	; 0x24
 8007112:	783b      	ldrb	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 809d 	beq.w	8007254 <_svfiprintf_r+0x1b8>
 800711a:	2300      	movs	r3, #0
 800711c:	f04f 32ff 	mov.w	r2, #4294967295
 8007120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	9307      	str	r3, [sp, #28]
 8007128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800712c:	931a      	str	r3, [sp, #104]	; 0x68
 800712e:	462f      	mov	r7, r5
 8007130:	2205      	movs	r2, #5
 8007132:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007136:	4850      	ldr	r0, [pc, #320]	; (8007278 <_svfiprintf_r+0x1dc>)
 8007138:	f7f9 f85a 	bl	80001f0 <memchr>
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	b9d0      	cbnz	r0, 8007176 <_svfiprintf_r+0xda>
 8007140:	06d9      	lsls	r1, r3, #27
 8007142:	bf44      	itt	mi
 8007144:	2220      	movmi	r2, #32
 8007146:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800714a:	071a      	lsls	r2, r3, #28
 800714c:	bf44      	itt	mi
 800714e:	222b      	movmi	r2, #43	; 0x2b
 8007150:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007154:	782a      	ldrb	r2, [r5, #0]
 8007156:	2a2a      	cmp	r2, #42	; 0x2a
 8007158:	d015      	beq.n	8007186 <_svfiprintf_r+0xea>
 800715a:	9a07      	ldr	r2, [sp, #28]
 800715c:	462f      	mov	r7, r5
 800715e:	2000      	movs	r0, #0
 8007160:	250a      	movs	r5, #10
 8007162:	4639      	mov	r1, r7
 8007164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007168:	3b30      	subs	r3, #48	; 0x30
 800716a:	2b09      	cmp	r3, #9
 800716c:	d94d      	bls.n	800720a <_svfiprintf_r+0x16e>
 800716e:	b1b8      	cbz	r0, 80071a0 <_svfiprintf_r+0x104>
 8007170:	e00f      	b.n	8007192 <_svfiprintf_r+0xf6>
 8007172:	462f      	mov	r7, r5
 8007174:	e7b8      	b.n	80070e8 <_svfiprintf_r+0x4c>
 8007176:	4a40      	ldr	r2, [pc, #256]	; (8007278 <_svfiprintf_r+0x1dc>)
 8007178:	1a80      	subs	r0, r0, r2
 800717a:	fa0b f000 	lsl.w	r0, fp, r0
 800717e:	4318      	orrs	r0, r3
 8007180:	9004      	str	r0, [sp, #16]
 8007182:	463d      	mov	r5, r7
 8007184:	e7d3      	b.n	800712e <_svfiprintf_r+0x92>
 8007186:	9a03      	ldr	r2, [sp, #12]
 8007188:	1d11      	adds	r1, r2, #4
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	9103      	str	r1, [sp, #12]
 800718e:	2a00      	cmp	r2, #0
 8007190:	db01      	blt.n	8007196 <_svfiprintf_r+0xfa>
 8007192:	9207      	str	r2, [sp, #28]
 8007194:	e004      	b.n	80071a0 <_svfiprintf_r+0x104>
 8007196:	4252      	negs	r2, r2
 8007198:	f043 0302 	orr.w	r3, r3, #2
 800719c:	9207      	str	r2, [sp, #28]
 800719e:	9304      	str	r3, [sp, #16]
 80071a0:	783b      	ldrb	r3, [r7, #0]
 80071a2:	2b2e      	cmp	r3, #46	; 0x2e
 80071a4:	d10c      	bne.n	80071c0 <_svfiprintf_r+0x124>
 80071a6:	787b      	ldrb	r3, [r7, #1]
 80071a8:	2b2a      	cmp	r3, #42	; 0x2a
 80071aa:	d133      	bne.n	8007214 <_svfiprintf_r+0x178>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	1d1a      	adds	r2, r3, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	9203      	str	r2, [sp, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bfb8      	it	lt
 80071b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80071bc:	3702      	adds	r7, #2
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	4d2e      	ldr	r5, [pc, #184]	; (800727c <_svfiprintf_r+0x1e0>)
 80071c2:	7839      	ldrb	r1, [r7, #0]
 80071c4:	2203      	movs	r2, #3
 80071c6:	4628      	mov	r0, r5
 80071c8:	f7f9 f812 	bl	80001f0 <memchr>
 80071cc:	b138      	cbz	r0, 80071de <_svfiprintf_r+0x142>
 80071ce:	2340      	movs	r3, #64	; 0x40
 80071d0:	1b40      	subs	r0, r0, r5
 80071d2:	fa03 f000 	lsl.w	r0, r3, r0
 80071d6:	9b04      	ldr	r3, [sp, #16]
 80071d8:	4303      	orrs	r3, r0
 80071da:	3701      	adds	r7, #1
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	7839      	ldrb	r1, [r7, #0]
 80071e0:	4827      	ldr	r0, [pc, #156]	; (8007280 <_svfiprintf_r+0x1e4>)
 80071e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071e6:	2206      	movs	r2, #6
 80071e8:	1c7e      	adds	r6, r7, #1
 80071ea:	f7f9 f801 	bl	80001f0 <memchr>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d038      	beq.n	8007264 <_svfiprintf_r+0x1c8>
 80071f2:	4b24      	ldr	r3, [pc, #144]	; (8007284 <_svfiprintf_r+0x1e8>)
 80071f4:	bb13      	cbnz	r3, 800723c <_svfiprintf_r+0x1a0>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	3307      	adds	r3, #7
 80071fa:	f023 0307 	bic.w	r3, r3, #7
 80071fe:	3308      	adds	r3, #8
 8007200:	9303      	str	r3, [sp, #12]
 8007202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007204:	444b      	add	r3, r9
 8007206:	9309      	str	r3, [sp, #36]	; 0x24
 8007208:	e76d      	b.n	80070e6 <_svfiprintf_r+0x4a>
 800720a:	fb05 3202 	mla	r2, r5, r2, r3
 800720e:	2001      	movs	r0, #1
 8007210:	460f      	mov	r7, r1
 8007212:	e7a6      	b.n	8007162 <_svfiprintf_r+0xc6>
 8007214:	2300      	movs	r3, #0
 8007216:	3701      	adds	r7, #1
 8007218:	9305      	str	r3, [sp, #20]
 800721a:	4619      	mov	r1, r3
 800721c:	250a      	movs	r5, #10
 800721e:	4638      	mov	r0, r7
 8007220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007224:	3a30      	subs	r2, #48	; 0x30
 8007226:	2a09      	cmp	r2, #9
 8007228:	d903      	bls.n	8007232 <_svfiprintf_r+0x196>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0c8      	beq.n	80071c0 <_svfiprintf_r+0x124>
 800722e:	9105      	str	r1, [sp, #20]
 8007230:	e7c6      	b.n	80071c0 <_svfiprintf_r+0x124>
 8007232:	fb05 2101 	mla	r1, r5, r1, r2
 8007236:	2301      	movs	r3, #1
 8007238:	4607      	mov	r7, r0
 800723a:	e7f0      	b.n	800721e <_svfiprintf_r+0x182>
 800723c:	ab03      	add	r3, sp, #12
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	4622      	mov	r2, r4
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <_svfiprintf_r+0x1ec>)
 8007244:	a904      	add	r1, sp, #16
 8007246:	4640      	mov	r0, r8
 8007248:	f3af 8000 	nop.w
 800724c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007250:	4681      	mov	r9, r0
 8007252:	d1d6      	bne.n	8007202 <_svfiprintf_r+0x166>
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	065b      	lsls	r3, r3, #25
 8007258:	f53f af35 	bmi.w	80070c6 <_svfiprintf_r+0x2a>
 800725c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800725e:	b01d      	add	sp, #116	; 0x74
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	ab03      	add	r3, sp, #12
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	4622      	mov	r2, r4
 800726a:	4b07      	ldr	r3, [pc, #28]	; (8007288 <_svfiprintf_r+0x1ec>)
 800726c:	a904      	add	r1, sp, #16
 800726e:	4640      	mov	r0, r8
 8007270:	f000 f882 	bl	8007378 <_printf_i>
 8007274:	e7ea      	b.n	800724c <_svfiprintf_r+0x1b0>
 8007276:	bf00      	nop
 8007278:	080311ad 	.word	0x080311ad
 800727c:	080311b3 	.word	0x080311b3
 8007280:	080311b7 	.word	0x080311b7
 8007284:	00000000 	.word	0x00000000
 8007288:	08006fe9 	.word	0x08006fe9

0800728c <_printf_common>:
 800728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	4691      	mov	r9, r2
 8007292:	461f      	mov	r7, r3
 8007294:	688a      	ldr	r2, [r1, #8]
 8007296:	690b      	ldr	r3, [r1, #16]
 8007298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800729c:	4293      	cmp	r3, r2
 800729e:	bfb8      	it	lt
 80072a0:	4613      	movlt	r3, r2
 80072a2:	f8c9 3000 	str.w	r3, [r9]
 80072a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072aa:	4606      	mov	r6, r0
 80072ac:	460c      	mov	r4, r1
 80072ae:	b112      	cbz	r2, 80072b6 <_printf_common+0x2a>
 80072b0:	3301      	adds	r3, #1
 80072b2:	f8c9 3000 	str.w	r3, [r9]
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	0699      	lsls	r1, r3, #26
 80072ba:	bf42      	ittt	mi
 80072bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072c0:	3302      	addmi	r3, #2
 80072c2:	f8c9 3000 	strmi.w	r3, [r9]
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	f015 0506 	ands.w	r5, r5, #6
 80072cc:	d107      	bne.n	80072de <_printf_common+0x52>
 80072ce:	f104 0a19 	add.w	sl, r4, #25
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	f8d9 2000 	ldr.w	r2, [r9]
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	42ab      	cmp	r3, r5
 80072dc:	dc28      	bgt.n	8007330 <_printf_common+0xa4>
 80072de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	3300      	adds	r3, #0
 80072e6:	bf18      	it	ne
 80072e8:	2301      	movne	r3, #1
 80072ea:	0692      	lsls	r2, r2, #26
 80072ec:	d42d      	bmi.n	800734a <_printf_common+0xbe>
 80072ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f2:	4639      	mov	r1, r7
 80072f4:	4630      	mov	r0, r6
 80072f6:	47c0      	blx	r8
 80072f8:	3001      	adds	r0, #1
 80072fa:	d020      	beq.n	800733e <_printf_common+0xb2>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	68e5      	ldr	r5, [r4, #12]
 8007300:	f8d9 2000 	ldr.w	r2, [r9]
 8007304:	f003 0306 	and.w	r3, r3, #6
 8007308:	2b04      	cmp	r3, #4
 800730a:	bf08      	it	eq
 800730c:	1aad      	subeq	r5, r5, r2
 800730e:	68a3      	ldr	r3, [r4, #8]
 8007310:	6922      	ldr	r2, [r4, #16]
 8007312:	bf0c      	ite	eq
 8007314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007318:	2500      	movne	r5, #0
 800731a:	4293      	cmp	r3, r2
 800731c:	bfc4      	itt	gt
 800731e:	1a9b      	subgt	r3, r3, r2
 8007320:	18ed      	addgt	r5, r5, r3
 8007322:	f04f 0900 	mov.w	r9, #0
 8007326:	341a      	adds	r4, #26
 8007328:	454d      	cmp	r5, r9
 800732a:	d11a      	bne.n	8007362 <_printf_common+0xd6>
 800732c:	2000      	movs	r0, #0
 800732e:	e008      	b.n	8007342 <_printf_common+0xb6>
 8007330:	2301      	movs	r3, #1
 8007332:	4652      	mov	r2, sl
 8007334:	4639      	mov	r1, r7
 8007336:	4630      	mov	r0, r6
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d103      	bne.n	8007346 <_printf_common+0xba>
 800733e:	f04f 30ff 	mov.w	r0, #4294967295
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	3501      	adds	r5, #1
 8007348:	e7c3      	b.n	80072d2 <_printf_common+0x46>
 800734a:	18e1      	adds	r1, r4, r3
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	2030      	movs	r0, #48	; 0x30
 8007350:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007354:	4422      	add	r2, r4
 8007356:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800735a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800735e:	3302      	adds	r3, #2
 8007360:	e7c5      	b.n	80072ee <_printf_common+0x62>
 8007362:	2301      	movs	r3, #1
 8007364:	4622      	mov	r2, r4
 8007366:	4639      	mov	r1, r7
 8007368:	4630      	mov	r0, r6
 800736a:	47c0      	blx	r8
 800736c:	3001      	adds	r0, #1
 800736e:	d0e6      	beq.n	800733e <_printf_common+0xb2>
 8007370:	f109 0901 	add.w	r9, r9, #1
 8007374:	e7d8      	b.n	8007328 <_printf_common+0x9c>
	...

08007378 <_printf_i>:
 8007378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800737c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007380:	460c      	mov	r4, r1
 8007382:	7e09      	ldrb	r1, [r1, #24]
 8007384:	b085      	sub	sp, #20
 8007386:	296e      	cmp	r1, #110	; 0x6e
 8007388:	4617      	mov	r7, r2
 800738a:	4606      	mov	r6, r0
 800738c:	4698      	mov	r8, r3
 800738e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007390:	f000 80b3 	beq.w	80074fa <_printf_i+0x182>
 8007394:	d822      	bhi.n	80073dc <_printf_i+0x64>
 8007396:	2963      	cmp	r1, #99	; 0x63
 8007398:	d036      	beq.n	8007408 <_printf_i+0x90>
 800739a:	d80a      	bhi.n	80073b2 <_printf_i+0x3a>
 800739c:	2900      	cmp	r1, #0
 800739e:	f000 80b9 	beq.w	8007514 <_printf_i+0x19c>
 80073a2:	2958      	cmp	r1, #88	; 0x58
 80073a4:	f000 8083 	beq.w	80074ae <_printf_i+0x136>
 80073a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073b0:	e032      	b.n	8007418 <_printf_i+0xa0>
 80073b2:	2964      	cmp	r1, #100	; 0x64
 80073b4:	d001      	beq.n	80073ba <_printf_i+0x42>
 80073b6:	2969      	cmp	r1, #105	; 0x69
 80073b8:	d1f6      	bne.n	80073a8 <_printf_i+0x30>
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	6813      	ldr	r3, [r2, #0]
 80073be:	0605      	lsls	r5, r0, #24
 80073c0:	f103 0104 	add.w	r1, r3, #4
 80073c4:	d52a      	bpl.n	800741c <_printf_i+0xa4>
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6011      	str	r1, [r2, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	da03      	bge.n	80073d6 <_printf_i+0x5e>
 80073ce:	222d      	movs	r2, #45	; 0x2d
 80073d0:	425b      	negs	r3, r3
 80073d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80073d6:	486f      	ldr	r0, [pc, #444]	; (8007594 <_printf_i+0x21c>)
 80073d8:	220a      	movs	r2, #10
 80073da:	e039      	b.n	8007450 <_printf_i+0xd8>
 80073dc:	2973      	cmp	r1, #115	; 0x73
 80073de:	f000 809d 	beq.w	800751c <_printf_i+0x1a4>
 80073e2:	d808      	bhi.n	80073f6 <_printf_i+0x7e>
 80073e4:	296f      	cmp	r1, #111	; 0x6f
 80073e6:	d020      	beq.n	800742a <_printf_i+0xb2>
 80073e8:	2970      	cmp	r1, #112	; 0x70
 80073ea:	d1dd      	bne.n	80073a8 <_printf_i+0x30>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	f043 0320 	orr.w	r3, r3, #32
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	e003      	b.n	80073fe <_printf_i+0x86>
 80073f6:	2975      	cmp	r1, #117	; 0x75
 80073f8:	d017      	beq.n	800742a <_printf_i+0xb2>
 80073fa:	2978      	cmp	r1, #120	; 0x78
 80073fc:	d1d4      	bne.n	80073a8 <_printf_i+0x30>
 80073fe:	2378      	movs	r3, #120	; 0x78
 8007400:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007404:	4864      	ldr	r0, [pc, #400]	; (8007598 <_printf_i+0x220>)
 8007406:	e055      	b.n	80074b4 <_printf_i+0x13c>
 8007408:	6813      	ldr	r3, [r2, #0]
 800740a:	1d19      	adds	r1, r3, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6011      	str	r1, [r2, #0]
 8007410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007418:	2301      	movs	r3, #1
 800741a:	e08c      	b.n	8007536 <_printf_i+0x1be>
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6011      	str	r1, [r2, #0]
 8007420:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007424:	bf18      	it	ne
 8007426:	b21b      	sxthne	r3, r3
 8007428:	e7cf      	b.n	80073ca <_printf_i+0x52>
 800742a:	6813      	ldr	r3, [r2, #0]
 800742c:	6825      	ldr	r5, [r4, #0]
 800742e:	1d18      	adds	r0, r3, #4
 8007430:	6010      	str	r0, [r2, #0]
 8007432:	0628      	lsls	r0, r5, #24
 8007434:	d501      	bpl.n	800743a <_printf_i+0xc2>
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	e002      	b.n	8007440 <_printf_i+0xc8>
 800743a:	0668      	lsls	r0, r5, #25
 800743c:	d5fb      	bpl.n	8007436 <_printf_i+0xbe>
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	4854      	ldr	r0, [pc, #336]	; (8007594 <_printf_i+0x21c>)
 8007442:	296f      	cmp	r1, #111	; 0x6f
 8007444:	bf14      	ite	ne
 8007446:	220a      	movne	r2, #10
 8007448:	2208      	moveq	r2, #8
 800744a:	2100      	movs	r1, #0
 800744c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007450:	6865      	ldr	r5, [r4, #4]
 8007452:	60a5      	str	r5, [r4, #8]
 8007454:	2d00      	cmp	r5, #0
 8007456:	f2c0 8095 	blt.w	8007584 <_printf_i+0x20c>
 800745a:	6821      	ldr	r1, [r4, #0]
 800745c:	f021 0104 	bic.w	r1, r1, #4
 8007460:	6021      	str	r1, [r4, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d13d      	bne.n	80074e2 <_printf_i+0x16a>
 8007466:	2d00      	cmp	r5, #0
 8007468:	f040 808e 	bne.w	8007588 <_printf_i+0x210>
 800746c:	4665      	mov	r5, ip
 800746e:	2a08      	cmp	r2, #8
 8007470:	d10b      	bne.n	800748a <_printf_i+0x112>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	07db      	lsls	r3, r3, #31
 8007476:	d508      	bpl.n	800748a <_printf_i+0x112>
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	6862      	ldr	r2, [r4, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	bfde      	ittt	le
 8007480:	2330      	movle	r3, #48	; 0x30
 8007482:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007486:	f105 35ff 	addle.w	r5, r5, #4294967295
 800748a:	ebac 0305 	sub.w	r3, ip, r5
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	f8cd 8000 	str.w	r8, [sp]
 8007494:	463b      	mov	r3, r7
 8007496:	aa03      	add	r2, sp, #12
 8007498:	4621      	mov	r1, r4
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff fef6 	bl	800728c <_printf_common>
 80074a0:	3001      	adds	r0, #1
 80074a2:	d14d      	bne.n	8007540 <_printf_i+0x1c8>
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	b005      	add	sp, #20
 80074aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074ae:	4839      	ldr	r0, [pc, #228]	; (8007594 <_printf_i+0x21c>)
 80074b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074b4:	6813      	ldr	r3, [r2, #0]
 80074b6:	6821      	ldr	r1, [r4, #0]
 80074b8:	1d1d      	adds	r5, r3, #4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6015      	str	r5, [r2, #0]
 80074be:	060a      	lsls	r2, r1, #24
 80074c0:	d50b      	bpl.n	80074da <_printf_i+0x162>
 80074c2:	07ca      	lsls	r2, r1, #31
 80074c4:	bf44      	itt	mi
 80074c6:	f041 0120 	orrmi.w	r1, r1, #32
 80074ca:	6021      	strmi	r1, [r4, #0]
 80074cc:	b91b      	cbnz	r3, 80074d6 <_printf_i+0x15e>
 80074ce:	6822      	ldr	r2, [r4, #0]
 80074d0:	f022 0220 	bic.w	r2, r2, #32
 80074d4:	6022      	str	r2, [r4, #0]
 80074d6:	2210      	movs	r2, #16
 80074d8:	e7b7      	b.n	800744a <_printf_i+0xd2>
 80074da:	064d      	lsls	r5, r1, #25
 80074dc:	bf48      	it	mi
 80074de:	b29b      	uxthmi	r3, r3
 80074e0:	e7ef      	b.n	80074c2 <_printf_i+0x14a>
 80074e2:	4665      	mov	r5, ip
 80074e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80074e8:	fb02 3311 	mls	r3, r2, r1, r3
 80074ec:	5cc3      	ldrb	r3, [r0, r3]
 80074ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80074f2:	460b      	mov	r3, r1
 80074f4:	2900      	cmp	r1, #0
 80074f6:	d1f5      	bne.n	80074e4 <_printf_i+0x16c>
 80074f8:	e7b9      	b.n	800746e <_printf_i+0xf6>
 80074fa:	6813      	ldr	r3, [r2, #0]
 80074fc:	6825      	ldr	r5, [r4, #0]
 80074fe:	6961      	ldr	r1, [r4, #20]
 8007500:	1d18      	adds	r0, r3, #4
 8007502:	6010      	str	r0, [r2, #0]
 8007504:	0628      	lsls	r0, r5, #24
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	d501      	bpl.n	800750e <_printf_i+0x196>
 800750a:	6019      	str	r1, [r3, #0]
 800750c:	e002      	b.n	8007514 <_printf_i+0x19c>
 800750e:	066a      	lsls	r2, r5, #25
 8007510:	d5fb      	bpl.n	800750a <_printf_i+0x192>
 8007512:	8019      	strh	r1, [r3, #0]
 8007514:	2300      	movs	r3, #0
 8007516:	6123      	str	r3, [r4, #16]
 8007518:	4665      	mov	r5, ip
 800751a:	e7b9      	b.n	8007490 <_printf_i+0x118>
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	1d19      	adds	r1, r3, #4
 8007520:	6011      	str	r1, [r2, #0]
 8007522:	681d      	ldr	r5, [r3, #0]
 8007524:	6862      	ldr	r2, [r4, #4]
 8007526:	2100      	movs	r1, #0
 8007528:	4628      	mov	r0, r5
 800752a:	f7f8 fe61 	bl	80001f0 <memchr>
 800752e:	b108      	cbz	r0, 8007534 <_printf_i+0x1bc>
 8007530:	1b40      	subs	r0, r0, r5
 8007532:	6060      	str	r0, [r4, #4]
 8007534:	6863      	ldr	r3, [r4, #4]
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	2300      	movs	r3, #0
 800753a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753e:	e7a7      	b.n	8007490 <_printf_i+0x118>
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	462a      	mov	r2, r5
 8007544:	4639      	mov	r1, r7
 8007546:	4630      	mov	r0, r6
 8007548:	47c0      	blx	r8
 800754a:	3001      	adds	r0, #1
 800754c:	d0aa      	beq.n	80074a4 <_printf_i+0x12c>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	079b      	lsls	r3, r3, #30
 8007552:	d413      	bmi.n	800757c <_printf_i+0x204>
 8007554:	68e0      	ldr	r0, [r4, #12]
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	4298      	cmp	r0, r3
 800755a:	bfb8      	it	lt
 800755c:	4618      	movlt	r0, r3
 800755e:	e7a3      	b.n	80074a8 <_printf_i+0x130>
 8007560:	2301      	movs	r3, #1
 8007562:	464a      	mov	r2, r9
 8007564:	4639      	mov	r1, r7
 8007566:	4630      	mov	r0, r6
 8007568:	47c0      	blx	r8
 800756a:	3001      	adds	r0, #1
 800756c:	d09a      	beq.n	80074a4 <_printf_i+0x12c>
 800756e:	3501      	adds	r5, #1
 8007570:	68e3      	ldr	r3, [r4, #12]
 8007572:	9a03      	ldr	r2, [sp, #12]
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	42ab      	cmp	r3, r5
 8007578:	dcf2      	bgt.n	8007560 <_printf_i+0x1e8>
 800757a:	e7eb      	b.n	8007554 <_printf_i+0x1dc>
 800757c:	2500      	movs	r5, #0
 800757e:	f104 0919 	add.w	r9, r4, #25
 8007582:	e7f5      	b.n	8007570 <_printf_i+0x1f8>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1ac      	bne.n	80074e2 <_printf_i+0x16a>
 8007588:	7803      	ldrb	r3, [r0, #0]
 800758a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800758e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007592:	e76c      	b.n	800746e <_printf_i+0xf6>
 8007594:	080311be 	.word	0x080311be
 8007598:	080311cf 	.word	0x080311cf

0800759c <memmove>:
 800759c:	4288      	cmp	r0, r1
 800759e:	b510      	push	{r4, lr}
 80075a0:	eb01 0302 	add.w	r3, r1, r2
 80075a4:	d807      	bhi.n	80075b6 <memmove+0x1a>
 80075a6:	1e42      	subs	r2, r0, #1
 80075a8:	4299      	cmp	r1, r3
 80075aa:	d00a      	beq.n	80075c2 <memmove+0x26>
 80075ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80075b4:	e7f8      	b.n	80075a8 <memmove+0xc>
 80075b6:	4283      	cmp	r3, r0
 80075b8:	d9f5      	bls.n	80075a6 <memmove+0xa>
 80075ba:	1881      	adds	r1, r0, r2
 80075bc:	1ad2      	subs	r2, r2, r3
 80075be:	42d3      	cmn	r3, r2
 80075c0:	d100      	bne.n	80075c4 <memmove+0x28>
 80075c2:	bd10      	pop	{r4, pc}
 80075c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80075cc:	e7f7      	b.n	80075be <memmove+0x22>
	...

080075d0 <_free_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d045      	beq.n	8007664 <_free_r+0x94>
 80075d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075dc:	1f0c      	subs	r4, r1, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfb8      	it	lt
 80075e2:	18e4      	addlt	r4, r4, r3
 80075e4:	f000 f8d2 	bl	800778c <__malloc_lock>
 80075e8:	4a1f      	ldr	r2, [pc, #124]	; (8007668 <_free_r+0x98>)
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	4610      	mov	r0, r2
 80075ee:	b933      	cbnz	r3, 80075fe <_free_r+0x2e>
 80075f0:	6063      	str	r3, [r4, #4]
 80075f2:	6014      	str	r4, [r2, #0]
 80075f4:	4628      	mov	r0, r5
 80075f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075fa:	f000 b8c8 	b.w	800778e <__malloc_unlock>
 80075fe:	42a3      	cmp	r3, r4
 8007600:	d90c      	bls.n	800761c <_free_r+0x4c>
 8007602:	6821      	ldr	r1, [r4, #0]
 8007604:	1862      	adds	r2, r4, r1
 8007606:	4293      	cmp	r3, r2
 8007608:	bf04      	itt	eq
 800760a:	681a      	ldreq	r2, [r3, #0]
 800760c:	685b      	ldreq	r3, [r3, #4]
 800760e:	6063      	str	r3, [r4, #4]
 8007610:	bf04      	itt	eq
 8007612:	1852      	addeq	r2, r2, r1
 8007614:	6022      	streq	r2, [r4, #0]
 8007616:	6004      	str	r4, [r0, #0]
 8007618:	e7ec      	b.n	80075f4 <_free_r+0x24>
 800761a:	4613      	mov	r3, r2
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	b10a      	cbz	r2, 8007624 <_free_r+0x54>
 8007620:	42a2      	cmp	r2, r4
 8007622:	d9fa      	bls.n	800761a <_free_r+0x4a>
 8007624:	6819      	ldr	r1, [r3, #0]
 8007626:	1858      	adds	r0, r3, r1
 8007628:	42a0      	cmp	r0, r4
 800762a:	d10b      	bne.n	8007644 <_free_r+0x74>
 800762c:	6820      	ldr	r0, [r4, #0]
 800762e:	4401      	add	r1, r0
 8007630:	1858      	adds	r0, r3, r1
 8007632:	4282      	cmp	r2, r0
 8007634:	6019      	str	r1, [r3, #0]
 8007636:	d1dd      	bne.n	80075f4 <_free_r+0x24>
 8007638:	6810      	ldr	r0, [r2, #0]
 800763a:	6852      	ldr	r2, [r2, #4]
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	4401      	add	r1, r0
 8007640:	6019      	str	r1, [r3, #0]
 8007642:	e7d7      	b.n	80075f4 <_free_r+0x24>
 8007644:	d902      	bls.n	800764c <_free_r+0x7c>
 8007646:	230c      	movs	r3, #12
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	e7d3      	b.n	80075f4 <_free_r+0x24>
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	1821      	adds	r1, r4, r0
 8007650:	428a      	cmp	r2, r1
 8007652:	bf04      	itt	eq
 8007654:	6811      	ldreq	r1, [r2, #0]
 8007656:	6852      	ldreq	r2, [r2, #4]
 8007658:	6062      	str	r2, [r4, #4]
 800765a:	bf04      	itt	eq
 800765c:	1809      	addeq	r1, r1, r0
 800765e:	6021      	streq	r1, [r4, #0]
 8007660:	605c      	str	r4, [r3, #4]
 8007662:	e7c7      	b.n	80075f4 <_free_r+0x24>
 8007664:	bd38      	pop	{r3, r4, r5, pc}
 8007666:	bf00      	nop
 8007668:	2000407c 	.word	0x2000407c

0800766c <_malloc_r>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	1ccd      	adds	r5, r1, #3
 8007670:	f025 0503 	bic.w	r5, r5, #3
 8007674:	3508      	adds	r5, #8
 8007676:	2d0c      	cmp	r5, #12
 8007678:	bf38      	it	cc
 800767a:	250c      	movcc	r5, #12
 800767c:	2d00      	cmp	r5, #0
 800767e:	4606      	mov	r6, r0
 8007680:	db01      	blt.n	8007686 <_malloc_r+0x1a>
 8007682:	42a9      	cmp	r1, r5
 8007684:	d903      	bls.n	800768e <_malloc_r+0x22>
 8007686:	230c      	movs	r3, #12
 8007688:	6033      	str	r3, [r6, #0]
 800768a:	2000      	movs	r0, #0
 800768c:	bd70      	pop	{r4, r5, r6, pc}
 800768e:	f000 f87d 	bl	800778c <__malloc_lock>
 8007692:	4a21      	ldr	r2, [pc, #132]	; (8007718 <_malloc_r+0xac>)
 8007694:	6814      	ldr	r4, [r2, #0]
 8007696:	4621      	mov	r1, r4
 8007698:	b991      	cbnz	r1, 80076c0 <_malloc_r+0x54>
 800769a:	4c20      	ldr	r4, [pc, #128]	; (800771c <_malloc_r+0xb0>)
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	b91b      	cbnz	r3, 80076a8 <_malloc_r+0x3c>
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 f863 	bl	800776c <_sbrk_r>
 80076a6:	6020      	str	r0, [r4, #0]
 80076a8:	4629      	mov	r1, r5
 80076aa:	4630      	mov	r0, r6
 80076ac:	f000 f85e 	bl	800776c <_sbrk_r>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d124      	bne.n	80076fe <_malloc_r+0x92>
 80076b4:	230c      	movs	r3, #12
 80076b6:	6033      	str	r3, [r6, #0]
 80076b8:	4630      	mov	r0, r6
 80076ba:	f000 f868 	bl	800778e <__malloc_unlock>
 80076be:	e7e4      	b.n	800768a <_malloc_r+0x1e>
 80076c0:	680b      	ldr	r3, [r1, #0]
 80076c2:	1b5b      	subs	r3, r3, r5
 80076c4:	d418      	bmi.n	80076f8 <_malloc_r+0x8c>
 80076c6:	2b0b      	cmp	r3, #11
 80076c8:	d90f      	bls.n	80076ea <_malloc_r+0x7e>
 80076ca:	600b      	str	r3, [r1, #0]
 80076cc:	50cd      	str	r5, [r1, r3]
 80076ce:	18cc      	adds	r4, r1, r3
 80076d0:	4630      	mov	r0, r6
 80076d2:	f000 f85c 	bl	800778e <__malloc_unlock>
 80076d6:	f104 000b 	add.w	r0, r4, #11
 80076da:	1d23      	adds	r3, r4, #4
 80076dc:	f020 0007 	bic.w	r0, r0, #7
 80076e0:	1ac3      	subs	r3, r0, r3
 80076e2:	d0d3      	beq.n	800768c <_malloc_r+0x20>
 80076e4:	425a      	negs	r2, r3
 80076e6:	50e2      	str	r2, [r4, r3]
 80076e8:	e7d0      	b.n	800768c <_malloc_r+0x20>
 80076ea:	428c      	cmp	r4, r1
 80076ec:	684b      	ldr	r3, [r1, #4]
 80076ee:	bf16      	itet	ne
 80076f0:	6063      	strne	r3, [r4, #4]
 80076f2:	6013      	streq	r3, [r2, #0]
 80076f4:	460c      	movne	r4, r1
 80076f6:	e7eb      	b.n	80076d0 <_malloc_r+0x64>
 80076f8:	460c      	mov	r4, r1
 80076fa:	6849      	ldr	r1, [r1, #4]
 80076fc:	e7cc      	b.n	8007698 <_malloc_r+0x2c>
 80076fe:	1cc4      	adds	r4, r0, #3
 8007700:	f024 0403 	bic.w	r4, r4, #3
 8007704:	42a0      	cmp	r0, r4
 8007706:	d005      	beq.n	8007714 <_malloc_r+0xa8>
 8007708:	1a21      	subs	r1, r4, r0
 800770a:	4630      	mov	r0, r6
 800770c:	f000 f82e 	bl	800776c <_sbrk_r>
 8007710:	3001      	adds	r0, #1
 8007712:	d0cf      	beq.n	80076b4 <_malloc_r+0x48>
 8007714:	6025      	str	r5, [r4, #0]
 8007716:	e7db      	b.n	80076d0 <_malloc_r+0x64>
 8007718:	2000407c 	.word	0x2000407c
 800771c:	20004080 	.word	0x20004080

08007720 <_realloc_r>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	4607      	mov	r7, r0
 8007724:	4614      	mov	r4, r2
 8007726:	460e      	mov	r6, r1
 8007728:	b921      	cbnz	r1, 8007734 <_realloc_r+0x14>
 800772a:	4611      	mov	r1, r2
 800772c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007730:	f7ff bf9c 	b.w	800766c <_malloc_r>
 8007734:	b922      	cbnz	r2, 8007740 <_realloc_r+0x20>
 8007736:	f7ff ff4b 	bl	80075d0 <_free_r>
 800773a:	4625      	mov	r5, r4
 800773c:	4628      	mov	r0, r5
 800773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007740:	f000 f826 	bl	8007790 <_malloc_usable_size_r>
 8007744:	42a0      	cmp	r0, r4
 8007746:	d20f      	bcs.n	8007768 <_realloc_r+0x48>
 8007748:	4621      	mov	r1, r4
 800774a:	4638      	mov	r0, r7
 800774c:	f7ff ff8e 	bl	800766c <_malloc_r>
 8007750:	4605      	mov	r5, r0
 8007752:	2800      	cmp	r0, #0
 8007754:	d0f2      	beq.n	800773c <_realloc_r+0x1c>
 8007756:	4631      	mov	r1, r6
 8007758:	4622      	mov	r2, r4
 800775a:	f7ff fbc3 	bl	8006ee4 <memcpy>
 800775e:	4631      	mov	r1, r6
 8007760:	4638      	mov	r0, r7
 8007762:	f7ff ff35 	bl	80075d0 <_free_r>
 8007766:	e7e9      	b.n	800773c <_realloc_r+0x1c>
 8007768:	4635      	mov	r5, r6
 800776a:	e7e7      	b.n	800773c <_realloc_r+0x1c>

0800776c <_sbrk_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4c06      	ldr	r4, [pc, #24]	; (8007788 <_sbrk_r+0x1c>)
 8007770:	2300      	movs	r3, #0
 8007772:	4605      	mov	r5, r0
 8007774:	4608      	mov	r0, r1
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	f7fe fe06 	bl	8006388 <_sbrk>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_sbrk_r+0x1a>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	b103      	cbz	r3, 8007786 <_sbrk_r+0x1a>
 8007784:	602b      	str	r3, [r5, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	200043c8 	.word	0x200043c8

0800778c <__malloc_lock>:
 800778c:	4770      	bx	lr

0800778e <__malloc_unlock>:
 800778e:	4770      	bx	lr

08007790 <_malloc_usable_size_r>:
 8007790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007794:	1f18      	subs	r0, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	bfbc      	itt	lt
 800779a:	580b      	ldrlt	r3, [r1, r0]
 800779c:	18c0      	addlt	r0, r0, r3
 800779e:	4770      	bx	lr

080077a0 <trunc>:
 80077a0:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80077a4:	ec5c bb10 	vmov	fp, ip, d0
 80077a8:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80077ac:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80077b0:	2913      	cmp	r1, #19
 80077b2:	4664      	mov	r4, ip
 80077b4:	dc11      	bgt.n	80077da <trunc+0x3a>
 80077b6:	2900      	cmp	r1, #0
 80077b8:	bfa7      	ittee	ge
 80077ba:	4b15      	ldrge	r3, [pc, #84]	; (8007810 <trunc+0x70>)
 80077bc:	fa43 f101 	asrge.w	r1, r3, r1
 80077c0:	2200      	movlt	r2, #0
 80077c2:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80077c6:	bfa4      	itt	ge
 80077c8:	2200      	movge	r2, #0
 80077ca:	ea2c 0301 	bicge.w	r3, ip, r1
 80077ce:	4693      	mov	fp, r2
 80077d0:	469c      	mov	ip, r3
 80077d2:	ec4c bb10 	vmov	d0, fp, ip
 80077d6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80077da:	2933      	cmp	r1, #51	; 0x33
 80077dc:	dd0d      	ble.n	80077fa <trunc+0x5a>
 80077de:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077e2:	d1f6      	bne.n	80077d2 <trunc+0x32>
 80077e4:	4663      	mov	r3, ip
 80077e6:	ee10 2a10 	vmov	r2, s0
 80077ea:	ee10 0a10 	vmov	r0, s0
 80077ee:	4621      	mov	r1, r4
 80077f0:	f7f8 fd54 	bl	800029c <__adddf3>
 80077f4:	4683      	mov	fp, r0
 80077f6:	468c      	mov	ip, r1
 80077f8:	e7eb      	b.n	80077d2 <trunc+0x32>
 80077fa:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80077fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007802:	fa23 f000 	lsr.w	r0, r3, r0
 8007806:	ea2b 0600 	bic.w	r6, fp, r0
 800780a:	46b3      	mov	fp, r6
 800780c:	46a4      	mov	ip, r4
 800780e:	e7e0      	b.n	80077d2 <trunc+0x32>
 8007810:	000fffff 	.word	0x000fffff

08007814 <_init>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr

08007820 <_fini>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr
